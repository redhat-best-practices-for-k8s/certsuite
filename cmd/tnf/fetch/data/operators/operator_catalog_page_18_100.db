{
  "data": [
    {
      "_id": "61a49f75c17162a20c1c675c",
      "alm_examples": [
        {
          "api_version": "federatorai.containers.ai/v1alpha1",
          "kind": "AlamedaService",
          "metadata": {
            "name": "my-alamedaservice"
          },
          "spec": {
            "alamedaAi": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "alamedaInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "100Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "fedemeterInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "imageLocation": "registry.connect.redhat.com/prophetstor",
            "storages": [
              {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "size": "2Gi",
                "type": "pvc",
                "usage": "log"
              }
            ],
            "version": "v4.7.2-b1777"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/prophetstor/federatorai-operator-bundle@sha256:8fcbd648e2d8048c8a209e1aba7fa67a0651adeaec5c9523a7a8f3c1b51bd85a",
      "bundle_path_digest": "sha256:8fcbd648e2d8048c8a209e1aba7fa67a0651adeaec5c9523a7a8f3c1b51bd85a",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-29T09:37:57.184000+00:00",
      "csv_description": "Federator.ai helps enterprises optimize cloud resources, maximize application performance, and save significant cost without excessive over-provisioning or under-provisioning of resources, meeting the service-level requirements of their applications.\n\nEnterprises often lack understanding of the resources needed to support their applications. This leads to either excessive over-provisioning or under-provisioning of resources (CPU, memory, storage). Using machine learning, Federator.ai determines the optimal cloud resources needed to support any workload on OpenShift and helps users find the best-cost instances from cloud providers for their applications.\n\n\n**Multi-layer workload prediction**\n\nUsing machine learning and math-based algorithms, Federator.ai predicts containerized application and cluster node resource usage as the basis for resource recommendations at application level as well as at cluster node level. Federator.ai supports prediction for both physical/virtual CPUs and memories.\n\n\n**Auto-scaling via resource recommendation**\n\nFederator.ai utilizes the predicted resource usage to recommend the right number and size of pods for applications. Integrated with Datadog's WPA, applications are automatically scaled to meet the predicted resource usage.\n\n\n**Application-aware recommendation execution**\n\nOptimizing the resource usage and performance goals, Federator.ai uses application specific metrics for workload prediction and pod capacity estimation to auto-scale the right number of pods for best performance without overprovisioning.\n\n\n**Multi-cloud Cost Analysis**\n\nWith resource usage prediction, Federator.ai analyzes potential cost of a cluster on different public cloud providers. It also recommend appropriate cluster nodes and instance types based on resource usage.\n\n\n**Custom Datadog/Sysdig Dashboards**\n\nPredefined custom Datadog/Sysdig Dashboards for workload prediction/recommendation visualization for cluster nodes and applications.\n\n\n**Additional resources**\n\nWant more product information? Explore detailed information about using this product and where to find additional help.\n\n* [Federator.ai Datasheet](https://prophetstor.com/wp-content/uploads/datasheets/Federator.ai.pdf)\n* [Quick Start Guide](https://prophetstor.com/wp-content/uploads/documentation/Federator.ai/Latest%20Version/ProphetStor%20Federator.ai%20Quick%20Installation%20Guide.pdf)\n* [Installation Guide](https://prophetstor.com/wp-content/uploads/2021/08/ProphetStor-Federator.ai-v4.7.0-Installation-Guide-v1.0.pdf)\n* [User Guide](https://prophetstor.com/wp-content/uploads/2021/11/Federator.ai-User-Guide-4.7.2.pdf)\n* [Release Notes](https://prophetstor.com/wp-content/uploads/2021/11/Federator.ai-4.7.2-Release-Notes.pdf)\n* [Company Information](https://www.prophetstor.com/)\n\n\n### Prerequisite\n*  The [Openshift](https://www.openshift.com) version 4.6.x or later if using OpenShift platform.\n*  The [Kubernetes](https://kubernetes.io/) version 1.16 or later if using Kubernetes environment.",
      "csv_display_name": "Federator.ai",
      "csv_metadata_description": "Federator.ai Operator provides easy configuration and management of AI-based Kubernetes resource orchestrator",
      "csv_name": "federatorai.v4.7.2-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:49:21.157000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "federatorai-certified",
      "provided_apis": [
        {
          "group": "federatorai.containers.ai",
          "kind": "AlamedaService",
          "plural": "alamedaservices",
          "version": "v1alpha1"
        }
      ],
      "provider": "ProphetStor Data Services, Inc.",
      "related_images": [
        {
          "digest": "sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "name": "ai-dispatcher"
        },
        {
          "digest": "sha256:c4ca91f8b942f90141f3cacc2b80f4e123058447ae4ad880763360a42408e439",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai@sha256:c4ca91f8b942f90141f3cacc2b80f4e123058447ae4ad880763360a42408e439",
          "name": "ai_engine"
        },
        {
          "digest": "sha256:a9f8fa8224535f70a959f736aba992b2135018afd57184f4849e8739d1ea2a18",
          "image": "registry.connect.redhat.com/prophetstor/alameda-datahub-ubi@sha256:a9f8fa8224535f70a959f736aba992b2135018afd57184f4849e8739d1ea2a18",
          "name": "datahub"
        },
        {
          "digest": "sha256:d5c6fbd329f49100422a995a4e177ba76c0a49936f0a0c8139250bf1357e992e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-executor-ubi@sha256:d5c6fbd329f49100422a995a4e177ba76c0a49936f0a0c8139250bf1357e992e",
          "name": "executor"
        },
        {
          "digest": "sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "name": "fedemeter-api"
        },
        {
          "digest": "sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "name": "fedemeter-influxdb"
        },
        {
          "digest": "sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "name": "federatorai-agent"
        },
        {
          "digest": "sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "name": "federatorai-agent-preloader"
        },
        {
          "digest": "sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "name": "federatorai-dashboard-frontend"
        },
        {
          "digest": "sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "name": "federatorai-dashboard-backend"
        },
        {
          "digest": "sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "name": "federatorai-data-adapter"
        },
        {
          "digest": "sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "name": "federatorai-restapi"
        },
        {
          "digest": "sha256:75c7ac8323db161c3a37d1931c863bda21f224e67443543572d912b976ee3ff0",
          "image": "registry.connect.redhat.com/prophetstor/alameda-influxdb@sha256:75c7ac8323db161c3a37d1931c863bda21f224e67443543572d912b976ee3ff0",
          "name": "influxdb"
        },
        {
          "digest": "sha256:3738f97c0b50afcf9e6b78d1084e98a3c78e0fd6d10d0a3ae458c27604e395fd",
          "image": "registry.connect.redhat.com/prophetstor/alameda-notifier-ubi@sha256:3738f97c0b50afcf9e6b78d1084e98a3c78e0fd6d10d0a3ae458c27604e395fd",
          "name": "notifier"
        },
        {
          "digest": "sha256:c28e9740e6031f1db3274a3722e9682eb7708479187fcdc5799ae0c21141639b",
          "image": "registry.connect.redhat.com/prophetstor/alameda-operator-ubi@sha256:c28e9740e6031f1db3274a3722e9682eb7708479187fcdc5799ae0c21141639b",
          "name": "operator"
        },
        {
          "digest": "sha256:3db8b480b94452aa7211327ec4ec5382b9b94156dfc7c22e65b5cbf4d0e1140b",
          "image": "registry.connect.redhat.com/prophetstor/alameda-rabbitmq@sha256:3db8b480b94452aa7211327ec4ec5382b9b94156dfc7c22e65b5cbf4d0e1140b",
          "name": "rabbitmq"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai-recommend-dispatcher"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai-recommend-worker"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "federatorai-operator-23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3-annotation"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "federatorai-operator"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "upgrader"
        },
        {
          "digest": "sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "name": "ai_dispatcher"
        },
        {
          "digest": "sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "name": "fedemeter_api"
        },
        {
          "digest": "sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "name": "fedemeter_influxdb"
        },
        {
          "digest": "sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "name": "federatorai_agent"
        },
        {
          "digest": "sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "name": "federatorai_agent_preloader"
        },
        {
          "digest": "sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "name": "federatorai_dashboard_frontend"
        },
        {
          "digest": "sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "name": "federatorai_dashboard_backend"
        },
        {
          "digest": "sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "name": "federatorai_data_adapter"
        },
        {
          "digest": "sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "name": "federatorai_restapi"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai_recommend_dispatcher"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai_recommend_worker"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "4.7.2-1",
      "version_original": "4.7.2-1"
    },
    {
      "_id": "61a4a616bfd4a5234d595fc9",
      "alm_examples": [
        {
          "api_version": "federatorai.containers.ai/v1alpha1",
          "kind": "AlamedaService",
          "metadata": {
            "name": "my-alamedaservice"
          },
          "spec": {
            "alamedaAi": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "alamedaInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "100Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "fedemeterInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "imageLocation": "registry.connect.redhat.com/prophetstor",
            "storages": [
              {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "size": "2Gi",
                "type": "pvc",
                "usage": "log"
              }
            ],
            "version": "v4.7.2-b1777"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/prophetstor/federatorai-operator-bundle@sha256:8fcbd648e2d8048c8a209e1aba7fa67a0651adeaec5c9523a7a8f3c1b51bd85a",
      "bundle_path_digest": "sha256:8fcbd648e2d8048c8a209e1aba7fa67a0651adeaec5c9523a7a8f3c1b51bd85a",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-29T10:06:14.844000+00:00",
      "csv_description": "Federator.ai helps enterprises optimize cloud resources, maximize application performance, and save significant cost without excessive over-provisioning or under-provisioning of resources, meeting the service-level requirements of their applications.\n\nEnterprises often lack understanding of the resources needed to support their applications. This leads to either excessive over-provisioning or under-provisioning of resources (CPU, memory, storage). Using machine learning, Federator.ai determines the optimal cloud resources needed to support any workload on OpenShift and helps users find the best-cost instances from cloud providers for their applications.\n\n\n**Multi-layer workload prediction**\n\nUsing machine learning and math-based algorithms, Federator.ai predicts containerized application and cluster node resource usage as the basis for resource recommendations at application level as well as at cluster node level. Federator.ai supports prediction for both physical/virtual CPUs and memories.\n\n\n**Auto-scaling via resource recommendation**\n\nFederator.ai utilizes the predicted resource usage to recommend the right number and size of pods for applications. Integrated with Datadog's WPA, applications are automatically scaled to meet the predicted resource usage.\n\n\n**Application-aware recommendation execution**\n\nOptimizing the resource usage and performance goals, Federator.ai uses application specific metrics for workload prediction and pod capacity estimation to auto-scale the right number of pods for best performance without overprovisioning.\n\n\n**Multi-cloud Cost Analysis**\n\nWith resource usage prediction, Federator.ai analyzes potential cost of a cluster on different public cloud providers. It also recommend appropriate cluster nodes and instance types based on resource usage.\n\n\n**Custom Datadog/Sysdig Dashboards**\n\nPredefined custom Datadog/Sysdig Dashboards for workload prediction/recommendation visualization for cluster nodes and applications.\n\n\n**Additional resources**\n\nWant more product information? Explore detailed information about using this product and where to find additional help.\n\n* [Federator.ai Datasheet](https://prophetstor.com/wp-content/uploads/datasheets/Federator.ai.pdf)\n* [Quick Start Guide](https://prophetstor.com/wp-content/uploads/documentation/Federator.ai/Latest%20Version/ProphetStor%20Federator.ai%20Quick%20Installation%20Guide.pdf)\n* [Installation Guide](https://prophetstor.com/wp-content/uploads/2021/08/ProphetStor-Federator.ai-v4.7.0-Installation-Guide-v1.0.pdf)\n* [User Guide](https://prophetstor.com/wp-content/uploads/2021/11/Federator.ai-User-Guide-4.7.2.pdf)\n* [Release Notes](https://prophetstor.com/wp-content/uploads/2021/11/Federator.ai-4.7.2-Release-Notes.pdf)\n* [Company Information](https://www.prophetstor.com/)\n\n\n### Prerequisite\n*  The [Openshift](https://www.openshift.com) version 4.6.x or later if using OpenShift platform.\n*  The [Kubernetes](https://kubernetes.io/) version 1.16 or later if using Kubernetes environment.",
      "csv_display_name": "Federator.ai",
      "csv_metadata_description": "Federator.ai Operator provides easy configuration and management of AI-based Kubernetes resource orchestrator",
      "csv_name": "federatorai.v4.7.2-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:13:16.810000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "federatorai-certified",
      "provided_apis": [
        {
          "group": "federatorai.containers.ai",
          "kind": "AlamedaService",
          "version": "v1alpha1"
        }
      ],
      "provider": "ProphetStor Data Services, Inc.",
      "related_images": [
        {
          "digest": "sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "name": "ai-dispatcher"
        },
        {
          "digest": "sha256:c4ca91f8b942f90141f3cacc2b80f4e123058447ae4ad880763360a42408e439",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai@sha256:c4ca91f8b942f90141f3cacc2b80f4e123058447ae4ad880763360a42408e439",
          "name": "ai_engine"
        },
        {
          "digest": "sha256:a9f8fa8224535f70a959f736aba992b2135018afd57184f4849e8739d1ea2a18",
          "image": "registry.connect.redhat.com/prophetstor/alameda-datahub-ubi@sha256:a9f8fa8224535f70a959f736aba992b2135018afd57184f4849e8739d1ea2a18",
          "name": "datahub"
        },
        {
          "digest": "sha256:d5c6fbd329f49100422a995a4e177ba76c0a49936f0a0c8139250bf1357e992e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-executor-ubi@sha256:d5c6fbd329f49100422a995a4e177ba76c0a49936f0a0c8139250bf1357e992e",
          "name": "executor"
        },
        {
          "digest": "sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "name": "fedemeter-api"
        },
        {
          "digest": "sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "name": "fedemeter-influxdb"
        },
        {
          "digest": "sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "name": "federatorai-agent"
        },
        {
          "digest": "sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "name": "federatorai-agent-preloader"
        },
        {
          "digest": "sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "name": "federatorai-dashboard-frontend"
        },
        {
          "digest": "sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "name": "federatorai-dashboard-backend"
        },
        {
          "digest": "sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "name": "federatorai-data-adapter"
        },
        {
          "digest": "sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "name": "federatorai-restapi"
        },
        {
          "digest": "sha256:75c7ac8323db161c3a37d1931c863bda21f224e67443543572d912b976ee3ff0",
          "image": "registry.connect.redhat.com/prophetstor/alameda-influxdb@sha256:75c7ac8323db161c3a37d1931c863bda21f224e67443543572d912b976ee3ff0",
          "name": "influxdb"
        },
        {
          "digest": "sha256:3738f97c0b50afcf9e6b78d1084e98a3c78e0fd6d10d0a3ae458c27604e395fd",
          "image": "registry.connect.redhat.com/prophetstor/alameda-notifier-ubi@sha256:3738f97c0b50afcf9e6b78d1084e98a3c78e0fd6d10d0a3ae458c27604e395fd",
          "name": "notifier"
        },
        {
          "digest": "sha256:c28e9740e6031f1db3274a3722e9682eb7708479187fcdc5799ae0c21141639b",
          "image": "registry.connect.redhat.com/prophetstor/alameda-operator-ubi@sha256:c28e9740e6031f1db3274a3722e9682eb7708479187fcdc5799ae0c21141639b",
          "name": "operator"
        },
        {
          "digest": "sha256:3db8b480b94452aa7211327ec4ec5382b9b94156dfc7c22e65b5cbf4d0e1140b",
          "image": "registry.connect.redhat.com/prophetstor/alameda-rabbitmq@sha256:3db8b480b94452aa7211327ec4ec5382b9b94156dfc7c22e65b5cbf4d0e1140b",
          "name": "rabbitmq"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai-recommend-dispatcher"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai-recommend-worker"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "federatorai-operator-23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3-annotation"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "federatorai-operator"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "upgrader"
        },
        {
          "digest": "sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "name": "ai_dispatcher"
        },
        {
          "digest": "sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "name": "fedemeter_api"
        },
        {
          "digest": "sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "name": "fedemeter_influxdb"
        },
        {
          "digest": "sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "name": "federatorai_agent"
        },
        {
          "digest": "sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "name": "federatorai_agent_preloader"
        },
        {
          "digest": "sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "name": "federatorai_dashboard_frontend"
        },
        {
          "digest": "sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "name": "federatorai_dashboard_backend"
        },
        {
          "digest": "sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "name": "federatorai_data_adapter"
        },
        {
          "digest": "sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "name": "federatorai_restapi"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai_recommend_dispatcher"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai_recommend_worker"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "4.7.2-1",
      "version_original": "4.7.2-1"
    },
    {
      "_id": "61a4a62827e166330707d8ac",
      "alm_examples": [
        {
          "api_version": "apps.docker.io/v1alpha1",
          "kind": "CarbonetesAnalyzer",
          "metadata": {
            "name": "carbonetesanalyzer"
          },
          "spec": {
            "affinity": {},
            "autoscaling": {
              "enabled": false,
              "maxReplicas": 100,
              "minReplicas": 1,
              "targetCPUUtilizationPercentage": 80
            },
            "carbonetesCreds": {
              "password": "",
              "username": ""
            },
            "debugging": {
              "enabled": false
            },
            "fullnameOverride": "",
            "image": {
              "pullPolicy": "Always",
              "repository": "quay.carbonetes.com/carbonetes/carbonetes-analyzer@sha256:1b9b93c9a37f7138c6a6259d20a3cfe254a47b294adc48849008ecbb9917697f"
            },
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [
                {
                  "host": "chart.local",
                  "paths": []
                }
              ],
              "tls": []
            },
            "nameOverride": "",
            "nodeSelector": {},
            "podAnnotations": {},
            "podSecurityContext": {},
            "replicaCount": 1,
            "resources": {},
            "securityContext": {},
            "service": {
              "port": 3000,
              "type": "ClusterIP"
            },
            "serviceAccount": {
              "annotations": {},
              "create": true,
              "name": "carbonetes-analyzer"
            },
            "tolerations": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/carbonetes/operator-bundle@sha256:ba799a2e818d8efe1ed200e366984b1e61baa7ec781c782e74e230692b1f98a6",
      "bundle_path_digest": "sha256:ba799a2e818d8efe1ed200e366984b1e61baa7ec781c782e74e230692b1f98a6",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-29T10:06:32.563000+00:00",
      "csv_description": "A Kubernetes Operator for creating Carbonetes Analyzer instances that Provides complete container analysis and policy evaluation as a fully managed service.\n\nCarbonetes analyzes your container images for native code vulnerabilities, software composition analysis (SCA), license types, malware, secrets, and bill of materials.\n\n## Prerequisites\n\nTo start using the Operator, you will need to create a secret containing your Carbonetes username and password.\n\n```\nkubectl create namespace carbonetes-operator\nkubectl create secret generic carbonetes-secrets --from-literal=username=${CARBONETES_USERNAME}--from-literal=password=${CARBONETES_PASSWORD}\n```\nDon't have the account yet? [Sign up now](https://console.carbonetes.com).",
      "csv_display_name": "Carbonetes Operator",
      "csv_metadata_description": "A Kubernetes Operator for creating Carbonetes Analyzer instances.",
      "csv_name": "carbonetes-operator.v1.0.5",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:16:47.362000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "carbonetes-operator",
      "provided_apis": [
        {
          "group": "apps.docker.io",
          "kind": "CarbonetesAnalyzer",
          "plural": "carbonetesanalyzers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Carbonetes",
      "related_images": [
        {
          "digest": "sha256:82318372a716645503fe30ec0e81a8bffb25afd84a8a14e58e881573fcc81772",
          "image": "quay.carbonetes.com/carbonetes/operator@sha256:82318372a716645503fe30ec0e81a8bffb25afd84a8a14e58e881573fcc81772",
          "name": "carbonetes-operator"
        },
        {
          "digest": "sha256:82318372a716645503fe30ec0e81a8bffb25afd84a8a14e58e881573fcc81772",
          "image": "quay.carbonetes.com/carbonetes/operator@sha256:82318372a716645503fe30ec0e81a8bffb25afd84a8a14e58e881573fcc81772",
          "name": "operator-82318372a716645503fe30ec0e81a8bffb25afd84a8a14e58e881573fcc81772-annotation"
        },
        {
          "digest": "sha256:82318372a716645503fe30ec0e81a8bffb25afd84a8a14e58e881573fcc81772",
          "image": "quay.carbonetes.com/carbonetes/operator@sha256:82318372a716645503fe30ec0e81a8bffb25afd84a8a14e58e881573fcc81772",
          "name": "manager"
        },
        {
          "digest": "sha256:1b9b93c9a37f7138c6a6259d20a3cfe254a47b294adc48849008ecbb9917697f",
          "image": "quay.carbonetes.com/carbonetes/carbonetes-analyzer@sha256:1b9b93c9a37f7138c6a6259d20a3cfe254a47b294adc48849008ecbb9917697f",
          "name": "carbonetes-analyzer-1b9b93c9a37f7138c6a6259d20a3cfe254a47b294adc48849008ecbb9917697f-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.0.5",
      "version_original": "1.0.5"
    },
    {
      "_id": "61a4a631bfd4a5234d595fca",
      "alm_examples": [
        {
          "api_version": "rc.app.stacks/v1beta2",
          "kind": "RuntimeComponent",
          "metadata": {
            "name": "runtimecomponent-sample"
          },
          "spec": {
            "applicationImage": "registry.connect.redhat.com/ibm/open-liberty-samples@sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
            "expose": true,
            "replicas": 1,
            "service": {
              "port": 9080
            }
          }
        },
        {
          "api_version": "rc.app.stacks/v1beta2",
          "kind": "RuntimeOperation",
          "metadata": {
            "name": "runtimeoperation-sample"
          },
          "spec": {
            "command": [
              "./your_script.sh"
            ],
            "containerName": "app",
            "podName": "Specify_Pod_Name_Here"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ibm/runtime-component-operator-bundle@sha256:65cc8aa40608b76956ff8c19316b63f805d7a28e8d7697b9ea1d427888a2ccdf",
      "bundle_path_digest": "sha256:65cc8aa40608b76956ff8c19316b63f805d7a28e8d7697b9ea1d427888a2ccdf",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "beta2",
      "creation_date": "2021-11-29T10:06:41.206000+00:00",
      "csv_description": "This advanced Operator is capable of deploying any runtime component image with consistent, production-grade QoS. It enables enterprise architects to govern the way their applications get deployed & managed in the cluster, while dramatically reducing the learning curve for developers to deploy into Kubernetes - allowing them to focus on writing the code!\nHere are some key features:\n\n#### Application Lifecyle\nYou can deploy your runtime component container by either pointing to a container image, or an OpenShift ImageStream. When using an ImageStream the Operator will watch for any updates and will re-deploy the modified image.\n\n#### Custom RBAC\nThis Operator is capable of using a custom ServiceAccount from the caller, allowing it to follow RBAC restrictions. By default it creates a ServiceAccount if one is not specified, which can also be bound with specific roles.\n\n#### Environment Configuration\nYou can configure a variety of artifacts with your deployment, such as: labels, annotations, and environment variables from a ConfigMap, a Secret or a value.\n\n#### Routing\nExpose your application to external users via a single toggle to create a Route on OpenShift or an Ingress on other Kubernetes environments. Advanced configuration, such as TLS settings, are also easily enabled.  Expiring Route certificates are re-issued.\n\n#### High Availability via Horizontal Pod Autoscaling\nRun multiple instances of your application for high availability. Either specify a static number of replicas or easily configure horizontal auto scaling to create (and delete) instances based on resource consumption.\n\n#### Persistence and advanced storage\nEnable persistence for your application by specifying simple requirements: just tell us the size of the storage and where you would like it to be mounted and We will create and manage that storage for you.\nThis toggles a StatefulSet resource instead of a Deployment resource, so your container can recover transactions and state upon a pod restart.\nWe offer an advanced mode where the user specifies a built-in PersistentVolumeClaim, allowing them to configure many details of the persistent volume, such as its storage class and access mode.\n\n#### Service Binding\nEasily bind to available services in your cluster.  Your runtime components can expose and consume other services by simply specifying the target endpoinds: we take care of the heavy lifting such as creating k8s Secrets, injecting them into your container and watching for any changes in configuration!  This way your applications can dynamically reconnect to its required services without any intervention or interruption.\n\n#### Exposing metrics to Prometheus\nThe Runtime Component Operator exposes the runtime container's metrics via the [Prometheus Operator](https://operatorhub.io/operator/prometheus).\nUsers can pick between a basic mode, where they simply specify the label that Prometheus is watching to scrape the metrics from the container, or they can specify the full `ServiceMonitor` spec embedded into the RuntimeComponent's `spec.monitoring` key controlling things like the poll internal and security credentials.\n\n#### Easily mount logs and transaction directories\nIf you need to mount the logs and transaction data from your runtime component to an external volume such as NFS (or any storage supported in your cluster), simply add the following (customizing the folder location and size) to your RuntimeComponent CR:\n``` storage: size: 2Gi mountPath: \"/logs\" ```\n\n#### Integration with OpenShift Serverless\nDeploy your serverless runtime component using a single toggle.  The Operator will convert all of its generated resources into [Knative](https://knative.dev) resources, allowing your pod to automatically scale to 0 when it is idle.\n\n#### Integration with OpenShift's Topology UI\nWe set the corresponding labels to support OpenShift's Developer Topology UI, which allows you to visualize your entire set of deployments and how they are connected.\n\nSee our [**documentation**](https://github.com/application-stacks/runtime-component-operator/tree/main/doc/) for more information.\n",
      "csv_display_name": "Runtime Component",
      "csv_metadata_description": "Deploys any runtime component with dynamic and auto-tuning configuration",
      "csv_name": "runtime-component.v0.8.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:39:39.517000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "runtime-component-operator-certified",
      "provided_apis": [
        {
          "group": "rc.app.stacks",
          "kind": "RuntimeOperation",
          "plural": "runtimeoperations",
          "version": "v1beta2"
        },
        {
          "group": "rc.app.stacks",
          "kind": "RuntimeComponent",
          "plural": "runtimecomponents",
          "version": "v1beta2"
        }
      ],
      "provider": "Community",
      "related_images": [
        {
          "digest": "sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "image": "registry.connect.redhat.com/ibm/runtime-component-operator@sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "name": "runtime-component-operator-febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b-annotation"
        },
        {
          "digest": "sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "image": "registry.connect.redhat.com/ibm/runtime-component-operator@sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "name": "manager"
        },
        {
          "digest": "sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
          "image": "registry.connect.redhat.com/ibm/open-liberty-samples@sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
          "name": "open-liberty-samples-8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.8.0",
      "version_original": "0.8.0"
    },
    {
      "_id": "61a51da727e166330707d94d",
      "alm_examples": [
        {
          "api_version": "federatorai.containers.ai/v1alpha1",
          "kind": "AlamedaService",
          "metadata": {
            "name": "my-alamedaservice"
          },
          "spec": {
            "alamedaAi": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "alamedaInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "100Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "fedemeterInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "imageLocation": "registry.connect.redhat.com/prophetstor",
            "storages": [
              {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "size": "2Gi",
                "type": "pvc",
                "usage": "log"
              }
            ],
            "version": "v4.7.2-b1777"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/prophetstor/federatorai-operator-bundle@sha256:8fcbd648e2d8048c8a209e1aba7fa67a0651adeaec5c9523a7a8f3c1b51bd85a",
      "bundle_path_digest": "sha256:8fcbd648e2d8048c8a209e1aba7fa67a0651adeaec5c9523a7a8f3c1b51bd85a",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-29T18:36:23.424000+00:00",
      "csv_description": "Federator.ai helps enterprises optimize cloud resources, maximize application performance, and save significant cost without excessive over-provisioning or under-provisioning of resources, meeting the service-level requirements of their applications.\n\nEnterprises often lack understanding of the resources needed to support their applications. This leads to either excessive over-provisioning or under-provisioning of resources (CPU, memory, storage). Using machine learning, Federator.ai determines the optimal cloud resources needed to support any workload on OpenShift and helps users find the best-cost instances from cloud providers for their applications.\n\n\n**Multi-layer workload prediction**\n\nUsing machine learning and math-based algorithms, Federator.ai predicts containerized application and cluster node resource usage as the basis for resource recommendations at application level as well as at cluster node level. Federator.ai supports prediction for both physical/virtual CPUs and memories.\n\n\n**Auto-scaling via resource recommendation**\n\nFederator.ai utilizes the predicted resource usage to recommend the right number and size of pods for applications. Integrated with Datadog's WPA, applications are automatically scaled to meet the predicted resource usage.\n\n\n**Application-aware recommendation execution**\n\nOptimizing the resource usage and performance goals, Federator.ai uses application specific metrics for workload prediction and pod capacity estimation to auto-scale the right number of pods for best performance without overprovisioning.\n\n\n**Multi-cloud Cost Analysis**\n\nWith resource usage prediction, Federator.ai analyzes potential cost of a cluster on different public cloud providers. It also recommend appropriate cluster nodes and instance types based on resource usage.\n\n\n**Custom Datadog/Sysdig Dashboards**\n\nPredefined custom Datadog/Sysdig Dashboards for workload prediction/recommendation visualization for cluster nodes and applications.\n\n\n**Additional resources**\n\nWant more product information? Explore detailed information about using this product and where to find additional help.\n\n* [Federator.ai Datasheet](https://prophetstor.com/wp-content/uploads/datasheets/Federator.ai.pdf)\n* [Quick Start Guide](https://prophetstor.com/wp-content/uploads/documentation/Federator.ai/Latest%20Version/ProphetStor%20Federator.ai%20Quick%20Installation%20Guide.pdf)\n* [Installation Guide](https://prophetstor.com/wp-content/uploads/2021/08/ProphetStor-Federator.ai-v4.7.0-Installation-Guide-v1.0.pdf)\n* [User Guide](https://prophetstor.com/wp-content/uploads/2021/11/Federator.ai-User-Guide-4.7.2.pdf)\n* [Release Notes](https://prophetstor.com/wp-content/uploads/2021/11/Federator.ai-4.7.2-Release-Notes.pdf)\n* [Company Information](https://www.prophetstor.com/)\n\n\n### Prerequisite\n*  The [Openshift](https://www.openshift.com) version 4.6.x or later if using OpenShift platform.\n*  The [Kubernetes](https://kubernetes.io/) version 1.16 or later if using Kubernetes environment.",
      "csv_display_name": "Federator.ai",
      "csv_metadata_description": "Federator.ai Operator provides easy configuration and management of AI-based Kubernetes resource orchestrator",
      "csv_name": "federatorai.v4.7.2-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:55:28.779000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "federatorai-certified",
      "provided_apis": [
        {
          "group": "federatorai.containers.ai",
          "kind": "AlamedaService",
          "plural": "alamedaservices",
          "version": "v1alpha1"
        }
      ],
      "provider": "ProphetStor Data Services, Inc.",
      "related_images": [
        {
          "digest": "sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "name": "ai-dispatcher"
        },
        {
          "digest": "sha256:c4ca91f8b942f90141f3cacc2b80f4e123058447ae4ad880763360a42408e439",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai@sha256:c4ca91f8b942f90141f3cacc2b80f4e123058447ae4ad880763360a42408e439",
          "name": "ai_engine"
        },
        {
          "digest": "sha256:a9f8fa8224535f70a959f736aba992b2135018afd57184f4849e8739d1ea2a18",
          "image": "registry.connect.redhat.com/prophetstor/alameda-datahub-ubi@sha256:a9f8fa8224535f70a959f736aba992b2135018afd57184f4849e8739d1ea2a18",
          "name": "datahub"
        },
        {
          "digest": "sha256:d5c6fbd329f49100422a995a4e177ba76c0a49936f0a0c8139250bf1357e992e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-executor-ubi@sha256:d5c6fbd329f49100422a995a4e177ba76c0a49936f0a0c8139250bf1357e992e",
          "name": "executor"
        },
        {
          "digest": "sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "name": "fedemeter-api"
        },
        {
          "digest": "sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "name": "fedemeter-influxdb"
        },
        {
          "digest": "sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "name": "federatorai-agent"
        },
        {
          "digest": "sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "name": "federatorai-agent-preloader"
        },
        {
          "digest": "sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "name": "federatorai-dashboard-frontend"
        },
        {
          "digest": "sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "name": "federatorai-dashboard-backend"
        },
        {
          "digest": "sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "name": "federatorai-data-adapter"
        },
        {
          "digest": "sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "name": "federatorai-restapi"
        },
        {
          "digest": "sha256:75c7ac8323db161c3a37d1931c863bda21f224e67443543572d912b976ee3ff0",
          "image": "registry.connect.redhat.com/prophetstor/alameda-influxdb@sha256:75c7ac8323db161c3a37d1931c863bda21f224e67443543572d912b976ee3ff0",
          "name": "influxdb"
        },
        {
          "digest": "sha256:3738f97c0b50afcf9e6b78d1084e98a3c78e0fd6d10d0a3ae458c27604e395fd",
          "image": "registry.connect.redhat.com/prophetstor/alameda-notifier-ubi@sha256:3738f97c0b50afcf9e6b78d1084e98a3c78e0fd6d10d0a3ae458c27604e395fd",
          "name": "notifier"
        },
        {
          "digest": "sha256:c28e9740e6031f1db3274a3722e9682eb7708479187fcdc5799ae0c21141639b",
          "image": "registry.connect.redhat.com/prophetstor/alameda-operator-ubi@sha256:c28e9740e6031f1db3274a3722e9682eb7708479187fcdc5799ae0c21141639b",
          "name": "operator"
        },
        {
          "digest": "sha256:3db8b480b94452aa7211327ec4ec5382b9b94156dfc7c22e65b5cbf4d0e1140b",
          "image": "registry.connect.redhat.com/prophetstor/alameda-rabbitmq@sha256:3db8b480b94452aa7211327ec4ec5382b9b94156dfc7c22e65b5cbf4d0e1140b",
          "name": "rabbitmq"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai-recommend-dispatcher"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai-recommend-worker"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "federatorai-operator-23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3-annotation"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "federatorai-operator"
        },
        {
          "digest": "sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:23743249f43219d077aa0a2b899e8c08bbee7caf0577771228c7192d3b99e9f3",
          "name": "upgrader"
        },
        {
          "digest": "sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:b12df0a12196c1bf9fd036bfa64507b8469254c3ffbcbdd92333603576200e6c",
          "name": "ai_dispatcher"
        },
        {
          "digest": "sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:60328410dc4813c1285ade12533efba9acb602433be7cc1f256fb3ea6312d3c2",
          "name": "fedemeter_api"
        },
        {
          "digest": "sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:163e559a6c684cde953f3515f1df08ebe7e799c53b24add3b225fcd6a976bb12",
          "name": "fedemeter_influxdb"
        },
        {
          "digest": "sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:43641d57b7b694adb090e6377bfd6315aab6193e5637bab91221f076f205d819",
          "name": "federatorai_agent"
        },
        {
          "digest": "sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:8f6ee4e54297b6dadc51bd8dad4d9f67cfb5aa7c4e8de82ad0928d71e1d0d0f7",
          "name": "federatorai_agent_preloader"
        },
        {
          "digest": "sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:3bde9bb8f63c92619d28c80985e5e30ec4cc96dba8252dff6c3b5f10104db89d",
          "name": "federatorai_dashboard_frontend"
        },
        {
          "digest": "sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:fa443c901e06aad3780666a4d676b330c61d66d8ea52ae2850f382f68559154d",
          "name": "federatorai_dashboard_backend"
        },
        {
          "digest": "sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:46b206bb1814b2b7d38e9e0d14ef1f0e3c51d7b3f18b32cc92515bffc5ca5b1f",
          "name": "federatorai_data_adapter"
        },
        {
          "digest": "sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:889136e2f82db71d4c7a5ab39472f578e12315c65bda1ab3dc3ef9adc9d4a6cc",
          "name": "federatorai_restapi"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai_recommend_dispatcher"
        },
        {
          "digest": "sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:b4cbe2b2aaac4200cb45310d0f9b4b6acb9d5c7c71d5daef0f3de491440ef94e",
          "name": "federatorai_recommend_worker"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "4.7.2-1",
      "version_original": "4.7.2-1"
    },
    {
      "_id": "61a57ae13e9240fca360f54a",
      "alm_examples": [
        {
          "api_version": "aikit.intel/v1alpha1",
          "kind": "AIKitContainer",
          "metadata": {
            "name": "intel-aikit-container",
            "namespace": "redhat-ods-applications"
          },
          "spec": {
            "fullnameOverride": "",
            "imagestream": {
              "name": "oneapi-aikit",
              "namespace": "redhat-ods-applications",
              "registry": {
                "name": "oneapi-aikit",
                "repo": "intel",
                "root": "registry.connect.redhat.com",
                "version": "latest"
              }
            },
            "nameOverride": ""
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/aikit-operator-bundle@sha256:2861cb69274ed1313bc97d870f9a52f361d5fc003b2d66752d38c9577bf1cf7c",
      "bundle_path_digest": "sha256:2861cb69274ed1313bc97d870f9a52f361d5fc003b2d66752d38c9577bf1cf7c",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:14:09.244000+00:00",
      "csv_description": "The Intel\u00ae oneAPI AI Analytics Toolkit gives data scientists, AI developers, and researchers familiar Python* tools and frameworks to accelerate end-to-end data science and machine learning pipelines on Intel\u00ae architectures. The components are built using oneAPI libraries for low-level compute optimizations. This toolkit maximizes performance from preprocessing through machine and deep learning phases and provides interoperability for efficient model development and deployment across single and multinodes.\n",
      "csv_display_name": "Intel\u00ae oneAPI AI Analytics Toolkit Operator",
      "csv_metadata_description": "",
      "csv_name": "aikit-operator.v2021.2.100410",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:52:17.025000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "aikit-operator",
      "provided_apis": [
        {
          "group": "aikit.intel",
          "kind": "AIKitContainer",
          "plural": "aikitcontainers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Intel",
      "related_images": [
        {
          "digest": "sha256:1f232b2c9ecc3219835cd98b1e0ea96485d5630856fe611c5fb9f2a5219160e8",
          "image": "registry.connect.redhat.com/intel/aikit-operator@sha256:1f232b2c9ecc3219835cd98b1e0ea96485d5630856fe611c5fb9f2a5219160e8",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2021.2.100410",
      "version_original": "2021.2.100410"
    },
    {
      "_id": "61a57ae9c17162a20c1c687d",
      "alm_examples": [
        {
          "api_version": "aikit.intel/v1alpha1",
          "kind": "AIKitContainer",
          "metadata": {
            "name": "intel-aikit-container",
            "namespace": "redhat-ods-applications"
          },
          "spec": {
            "fullnameOverride": "",
            "imagestream": {
              "name": "oneapi-aikit",
              "namespace": "redhat-ods-applications",
              "registry": {
                "name": "oneapi-aikit",
                "repo": "intel",
                "root": "registry.connect.redhat.com",
                "version": "latest"
              }
            },
            "nameOverride": ""
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/aikit-operator-bundle@sha256:504672b2db7fd25d1c85c9614f8242f98b4d2d04184a947dbaaada41ec205b45",
      "bundle_path_digest": "sha256:504672b2db7fd25d1c85c9614f8242f98b4d2d04184a947dbaaada41ec205b45",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:14:17.696000+00:00",
      "csv_description": "The Intel\u00ae oneAPI AI Analytics Toolkit gives data scientists, AI developers, and researchers familiar Python* tools and frameworks to accelerate end-to-end data science and machine learning pipelines on Intel\u00ae architectures. The components are built using oneAPI libraries for low-level compute optimizations. This toolkit maximizes performance from preprocessing through machine and deep learning phases and provides interoperability for efficient model development and deployment across single and multinodes.\n",
      "csv_display_name": "Intel\u00ae oneAPI AI Analytics Toolkit Operator",
      "csv_metadata_description": "",
      "csv_name": "aikit-operator.v2021.2.102120",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:52:20.955000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "aikit-operator",
      "provided_apis": [
        {
          "group": "aikit.intel",
          "kind": "AIKitContainer",
          "plural": "aikitcontainers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Intel",
      "related_images": [
        {
          "digest": "sha256:7abb5e6164ffb3e4b87c39061f45d09848218fcfb74b48bf5e1035d56b41ee0c",
          "image": "registry.connect.redhat.com/intel/aikit-operator@sha256:7abb5e6164ffb3e4b87c39061f45d09848218fcfb74b48bf5e1035d56b41ee0c",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2021.2.102120",
      "version_original": "2021.2.102120"
    },
    {
      "_id": "61a57af2bfd4a5234d5960cc",
      "alm_examples": [
        {
          "api_version": "aikit.intel/v1alpha1",
          "kind": "AIKitContainer",
          "metadata": {
            "name": "intel-aikit-container",
            "namespace": "redhat-ods-applications"
          },
          "spec": {
            "fullnameOverride": "",
            "imagestream": {
              "name": "oneapi-aikit",
              "namespace": "redhat-ods-applications",
              "registry": {
                "name": "oneapi-aikit",
                "repo": "intel",
                "root": "registry.connect.redhat.com",
                "version": "latest"
              }
            },
            "nameOverride": ""
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/aikit-operator-bundle@sha256:044fe556abd0194f7e44a9b20875caa3ded4b2e479b45d9cf5acfa097ef6c6c1",
      "bundle_path_digest": "sha256:044fe556abd0194f7e44a9b20875caa3ded4b2e479b45d9cf5acfa097ef6c6c1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:14:26.534000+00:00",
      "csv_description": "The Intel\u00ae oneAPI AI Analytics Toolkit gives data scientists, AI developers, and researchers familiar Python* tools and frameworks to accelerate end-to-end data science and machine learning pipelines on Intel\u00ae architectures. The components are built using oneAPI libraries for low-level compute optimizations. This toolkit maximizes performance from preprocessing through machine and deep learning phases and provides interoperability for efficient model development and deployment across single and multinodes.\n",
      "csv_display_name": "Intel\u00ae oneAPI AI Analytics Toolkit Operator",
      "csv_metadata_description": "",
      "csv_name": "aikit-operator.v2021.2.92808-dev-a60e5ba",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:52:25.136000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "aikit-operator",
      "provided_apis": [
        {
          "group": "aikit.intel",
          "kind": "AIKitContainer",
          "plural": "aikitcontainers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Intel",
      "related_images": [
        {
          "digest": "sha256:34516d6df20aa91b4fcd691aafed3260c8a43aaaded64fdbe8078fc45c1357f0",
          "image": "registry.connect.redhat.com/intel/aikit-operator@sha256:34516d6df20aa91b4fcd691aafed3260c8a43aaaded64fdbe8078fc45c1357f0",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2021.2.92808-dev-a60e5ba",
      "version_original": "2021.2.92808-dev-a60e5ba"
    },
    {
      "_id": "61a57afb3e9240fca360f54b",
      "alm_examples": [
        {
          "api_version": "aikit.intel/v1alpha1",
          "kind": "AIKitContainer",
          "metadata": {
            "name": "intel-aikit-container",
            "namespace": "redhat-ods-applications"
          },
          "spec": {
            "fullnameOverride": "",
            "imagestream": {
              "name": "oneapi-aikit",
              "namespace": "redhat-ods-applications",
              "registry": {
                "name": "oneapi-aikit",
                "repo": "intel",
                "root": "registry.connect.redhat.com",
                "version": "latest"
              }
            },
            "nameOverride": ""
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/aikit-operator-bundle@sha256:951e1dc1384a046270a6d5f540b1883aa47fa0c04895b5845635327c80281976",
      "bundle_path_digest": "sha256:951e1dc1384a046270a6d5f540b1883aa47fa0c04895b5845635327c80281976",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:14:35.233000+00:00",
      "csv_description": "The Intel\u00ae oneAPI AI Analytics Toolkit gives data scientists, AI developers, and researchers familiar Python* tools and frameworks to accelerate end-to-end data science and machine learning pipelines on Intel\u00ae architectures. The components are built using oneAPI libraries for low-level compute optimizations. This toolkit maximizes performance from preprocessing through machine and deep learning phases and provides interoperability for efficient model development and deployment across single and multinodes.\n",
      "csv_display_name": "Intel\u00ae oneAPI AI Analytics Toolkit Operator",
      "csv_metadata_description": "",
      "csv_name": "aikit-operator.v2021.2.92814",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:52:29.285000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "aikit-operator",
      "provided_apis": [
        {
          "group": "aikit.intel",
          "kind": "AIKitContainer",
          "plural": "aikitcontainers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Intel",
      "related_images": [
        {
          "digest": "sha256:5448635df26ff738f5dd39256c961ad2a5756ca8ee0cb66370b261a242ef6f7b",
          "image": "registry.connect.redhat.com/intel/aikit-operator@sha256:5448635df26ff738f5dd39256c961ad2a5756ca8ee0cb66370b261a242ef6f7b",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2021.2.92814",
      "version_original": "2021.2.92814"
    },
    {
      "_id": "61a57b033e9240fca360f54c",
      "alm_examples": [
        {
          "api_version": "aikit.intel/v1alpha1",
          "kind": "AIKitContainer",
          "metadata": {
            "name": "intel-aikit-container",
            "namespace": "redhat-ods-applications"
          },
          "spec": {
            "fullnameOverride": "",
            "imagestream": {
              "name": "oneapi-aikit",
              "namespace": "redhat-ods-applications",
              "registry": {
                "name": "oneapi-aikit",
                "repo": "intel",
                "root": "registry.connect.redhat.com",
                "version": "latest"
              }
            },
            "nameOverride": ""
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/aikit-operator-bundle@sha256:db2074b8ef12a3037a7aaa515c9055f080e546706f769404d6f9005a28f57e61",
      "bundle_path_digest": "sha256:db2074b8ef12a3037a7aaa515c9055f080e546706f769404d6f9005a28f57e61",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:14:43.525000+00:00",
      "csv_description": "The Intel\u00ae oneAPI AI Analytics Toolkit gives data scientists, AI developers, and researchers familiar Python* tools and frameworks to accelerate end-to-end data science and machine learning pipelines on Intel\u00ae architectures. The components are built using oneAPI libraries for low-level compute optimizations. This toolkit maximizes performance from preprocessing through machine and deep learning phases and provides interoperability for efficient model development and deployment across single and multinodes.\n",
      "csv_display_name": "Intel\u00ae oneAPI AI Analytics Toolkit Operator",
      "csv_metadata_description": "",
      "csv_name": "aikit-operator.v2021.2.92911",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:52:33.868000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "aikit-operator",
      "provided_apis": [
        {
          "group": "aikit.intel",
          "kind": "AIKitContainer",
          "plural": "aikitcontainers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Intel",
      "related_images": [
        {
          "digest": "sha256:6c55351004f5b04f901a2a3ad3ffab01c7b7d237dde9943dda3116e354d3cfe7",
          "image": "registry.connect.redhat.com/intel/aikit-operator@sha256:6c55351004f5b04f901a2a3ad3ffab01c7b7d237dde9943dda3116e354d3cfe7",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2021.2.92911",
      "version_original": "2021.2.92911"
    },
    {
      "_id": "61a57b0c27e166330707d95f",
      "alm_examples": [
        {
          "api_version": "charts.anchore.io/v1alpha1",
          "kind": "AnchoreEngine",
          "metadata": {
            "name": "anchoreengine-sample"
          },
          "spec": {
            "anchoreGlobal": {
              "defaultAdminEmail": "example@email.com"
            },
            "postgresql": {
              "extraEnv": [
                {
                  "name": "POSTGRESQL_USER",
                  "value": "anchoreengine"
                },
                {
                  "name": "POSTGRESQL_PASSWORD",
                  "value": "anchore-postgres,123"
                },
                {
                  "name": "POSTGRESQL_DATABASE",
                  "value": "anchore"
                },
                {
                  "name": "PGUSER",
                  "value": "postgres"
                }
              ],
              "postgresDatabase": "anchore",
              "postgresPassword": "anchore-postgres,123",
              "postgresUser": "anchoreengine"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/anchore/engine-operator-bundle@sha256:fbbe7e6c1d75c4de2f47e2c825c930568e85f1134545e9d890a0c9f3d9187a4d",
      "bundle_path_digest": "sha256:fbbe7e6c1d75c4de2f47e2c825c930568e85f1134545e9d890a0c9f3d9187a4d",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:14:52.340000+00:00",
      "csv_description": "Anchore Engine is an open source software system that provides a centralized service for analyzing container images, \n scanning for security vulnerabilities, and enforcing deployment policies. Anchore Engine is provided as a Docker \n container image that can be run standalone or with an orchestration platform such as Kubernetes. Anchore Engine allows \n users to perform detailed analysis on their container images, run queries, produce reports, and define policies that \n can be used in CI/CD pipelines. Users can extend Anchore Engine with plugins that add new queries, image analysis, and \n policies. Anchore Engine can be accessed directly through a RESTful API or via the Anchore CLI.\n\n The Anchore Engine Operator is based on the official stable [Helm Chart](https://github.com/anchore/anchore-charts/tree/master/stable/anchore-engine).",
      "csv_display_name": "Anchore Engine Operator",
      "csv_metadata_description": "Anchore Engine - container image scanning service for policy-based security, best-practice and compliance enforcement.",
      "csv_name": "anchore-engine.v1.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:52:53.270000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "anchore-engine",
      "provided_apis": [
        {
          "group": "charts.anchore.io",
          "kind": "AnchoreEngine",
          "version": "v1alpha1"
        }
      ],
      "provider": "Anchore Inc.",
      "related_images": [
        {
          "digest": "sha256:baf0f5acd319bc4d0132c88922ee3f357fdcdc278d931f243d0cbec3f6d416c6",
          "image": "registry.connect.redhat.com/anchore/engine-operator@sha256:baf0f5acd319bc4d0132c88922ee3f357fdcdc278d931f243d0cbec3f6d416c6",
          "name": "engine-operator-baf0f5acd319bc4d0132c88922ee3f357fdcdc278d931f243d0cbec3f6d416c6-annotation"
        },
        {
          "digest": "sha256:baf0f5acd319bc4d0132c88922ee3f357fdcdc278d931f243d0cbec3f6d416c6",
          "image": "registry.connect.redhat.com/anchore/engine-operator@sha256:baf0f5acd319bc4d0132c88922ee3f357fdcdc278d931f243d0cbec3f6d416c6",
          "name": "manager"
        },
        {
          "digest": "sha256:68e09d5ff695b46f24de3d7610f88dfc14b77b38758bbd68d03350dbae3deb0f",
          "image": "registry.connect.redhat.com/anchore/engine0@sha256:68e09d5ff695b46f24de3d7610f88dfc14b77b38758bbd68d03350dbae3deb0f",
          "name": "anchore_engine"
        },
        {
          "digest": "sha256:e8177c5de05ccdd6d12e360b65c63c889b2de725d573ffdedd8914230b118639",
          "image": "registry.redhat.io/rhel8/postgresql-96@sha256:e8177c5de05ccdd6d12e360b65c63c889b2de725d573ffdedd8914230b118639",
          "name": "anchore_postgresql"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.0.1",
      "version_original": "1.0.1"
    },
    {
      "_id": "61a57b153e9240fca360f54d",
      "alm_examples": [
        {
          "api_version": "anzo.cambridgesemantics.com/v1",
          "kind": "Anzo",
          "metadata": {
            "name": "agent01"
          },
          "spec": {
            "nodeConfig": {
              "spec": {
                "replicas": 1,
                "selector": {
                  "matchLabels": {
                    "app": "anzo"
                  }
                },
                "serviceName": "anzo-agent01",
                "template": {
                  "metadata": {
                    "labels": {
                      "app": "anzo"
                    }
                  },
                  "spec": {
                    "containers": [
                      {
                        "image": "registry.connect.redhat.com/cambridgesemantics/anzo@sha256:d1c2d54ca205d669c5ea1bb6aae105afe2385cc5695cecd78423ffa1d98929f8",
                        "name": "anzo",
                        "resources": {
                          "limits": {
                            "cpu": "4000m",
                            "memory": "12Gi"
                          },
                          "requests": {
                            "cpu": "4000m",
                            "memory": "12Gi"
                          }
                        }
                      }
                    ],
                    "serviceAccountName": "anzo-operator"
                  }
                }
              }
            },
            "role": "AnzoAgent"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cambridgesemantics/anzo-operator-bundle@sha256:28703523a1c160570fc23fb1236d2a02108b97e4423d42b0d3cde98c94d351cb",
      "bundle_path_digest": "sha256:28703523a1c160570fc23fb1236d2a02108b97e4423d42b0d3cde98c94d351cb",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:15:01.229000+00:00",
      "csv_description": "The Anzo Operator provides the way to install and configure an anzo agent setup on Red Hat K8S environment.\nCurrently, this is supported only through when deployed as an Anzo Agent as part of an Anzo Unstructured deployment.\n\n### Installation\n Refer [installation instructions]( https://github.com/cambridgesemantics/csi-k8s-operator-anzo/blob/v2.0.0/README.md )\n\n### Documentation\n\nYou can find our documentation [here.]( https://docs.cambridgesemantics.com/anzo/userdoc/cloud-deployments.htm )\n\n### Support\n\nWe offer Support to our customers through [ Cambridge Semantics Customer Center ]( https://customercenter.cambridgesemantics.com/ ).",
      "csv_display_name": "Anzo Operator",
      "csv_metadata_description": "kubernetes operator for Anzo",
      "csv_name": "anzo-operator.v2.0.101",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:53:04.072000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "anzo-operator",
      "provided_apis": [
        {
          "group": "anzo.cambridgesemantics.com",
          "kind": "Anzo",
          "plural": "anzos",
          "version": "v1"
        }
      ],
      "provider": "Cambridge Semantics Inc.",
      "related_images": [
        {
          "digest": "sha256:563e964f5771b9bfd860ea993b6e0936a54504908f5b2d1dff6f99ade74bb7a0",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-operator@sha256:563e964f5771b9bfd860ea993b6e0936a54504908f5b2d1dff6f99ade74bb7a0",
          "name": "anzo-operator-563e964f5771b9bfd860ea993b6e0936a54504908f5b2d1dff6f99ade74bb7a0-annotation"
        },
        {
          "digest": "sha256:563e964f5771b9bfd860ea993b6e0936a54504908f5b2d1dff6f99ade74bb7a0",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-operator@sha256:563e964f5771b9bfd860ea993b6e0936a54504908f5b2d1dff6f99ade74bb7a0",
          "name": "manager"
        },
        {
          "digest": "sha256:d1c2d54ca205d669c5ea1bb6aae105afe2385cc5695cecd78423ffa1d98929f8",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo@sha256:d1c2d54ca205d669c5ea1bb6aae105afe2385cc5695cecd78423ffa1d98929f8",
          "name": "anzo"
        },
        {
          "digest": "sha256:d1c2d54ca205d669c5ea1bb6aae105afe2385cc5695cecd78423ffa1d98929f8",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo@sha256:d1c2d54ca205d669c5ea1bb6aae105afe2385cc5695cecd78423ffa1d98929f8",
          "name": "anzo-d1c2d54ca205d669c5ea1bb6aae105afe2385cc5695cecd78423ffa1d98929f8-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.0.0",
      "version_original": "2.0.0"
    },
    {
      "_id": "61a57b1ebfd4a5234d5960cd",
      "alm_examples": [
        {
          "api_version": "anzograph.clusters.cambridgesemantics.com/v2",
          "kind": "AnzoGraph",
          "metadata": {
            "name": "azg01"
          },
          "spec": {
            "db": {
              "nodeConfig": {
                "spec": {
                  "replicas": 1,
                  "selector": {
                    "matchLabels": {
                      "app_data": "anzograph-data-grpc",
                      "app_mgmt": "anzograph-mgmt-grpc"
                    }
                  },
                  "serviceName": "anzograph-azg01",
                  "template": {
                    "metadata": {
                      "labels": {
                        "app_data": "anzograph-data-grpc",
                        "app_mgmt": "anzograph-mgmt-grpc"
                      }
                    },
                    "spec": {
                      "containers": [
                        {
                          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-db@sha256:8a5bd26551990929fdb776d6b421a9713cb84e03b19c18f81b625582f7f41af5",
                          "name": "db",
                          "resources": {
                            "limits": {
                              "cpu": "8000m",
                              "memory": "8Gi"
                            },
                            "requests": {
                              "cpu": "8000m",
                              "memory": "8Gi"
                            }
                          }
                        }
                      ],
                      "serviceAccountName": "anzograph-operator"
                    }
                  }
                }
              }
            },
            "deployFrontend": false,
            "frontend": {
              "nodeConfig": {
                "spec": {
                  "replicas": 1,
                  "selector": {
                    "matchLabels": {
                      "app_mgmt": "anzograph-frontend"
                    }
                  },
                  "serviceName": "anzograph-azg01",
                  "template": {
                    "metadata": {
                      "labels": {
                        "app_mgmt": "anzograph-frontend"
                      }
                    },
                    "spec": {
                      "containers": [
                        {
                          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-frontend@sha256:c1443bcdc8e998fc699f61980a665f1a083350adf2d3d1d55a7cb55e31ca50b3",
                          "name": "frontend",
                          "resources": {
                            "limits": {
                              "cpu": "2000m",
                              "memory": "4Gi"
                            },
                            "requests": {
                              "cpu": "2000m",
                              "memory": "4Gi"
                            }
                          }
                        }
                      ],
                      "serviceAccountName": "anzograph-operator"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cambridgesemantics/anzograph-operator-bundle@sha256:9418a3505873ac387f2b5455ec7e696739a2bb6f03232f8c0f59489c605b96f2",
      "bundle_path_digest": "sha256:9418a3505873ac387f2b5455ec7e696739a2bb6f03232f8c0f59489c605b96f2",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:15:10.124000+00:00",
      "csv_description": "The AnzoGraph Operator provides the way to install and configure an AnzoGraph\ncluster on Red Hat K8S environment.\n\n### Installation\n Refer [installation instructions]( https://github.com/cambridgesemantics/csi-k8s-operator-anzograph/blob/v2.0.1/README_openshift_marketplace.md )\n\n### Documentation\n\nYou can find our documentation [here.]( https://docs.cambridgesemantics.com/anzograph/userdoc/ )\n\n### Support\n\nWe offer Support to our customers with the AnzoGraph db Enterprise Edition License [here]( https://customercenter.cambridgesemantics.com/ ). For AnzoGraph db Free Edition questions, get help from our Anzograph User Community at Stack Overflow. When submitting a question, include the tag 'anzograph'.",
      "csv_display_name": "AnzoGraph Operator",
      "csv_metadata_description": "kubernetes operator for AnzoGraph DB",
      "csv_name": "anzograph-operator.v2.0.102",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:53:09.083000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "anzograph-operator",
      "provided_apis": [
        {
          "group": "anzograph.clusters.cambridgesemantics.com",
          "kind": "AnzoGraph",
          "version": "v2"
        }
      ],
      "provider": "Cambridge Semantics Inc.",
      "related_images": [
        {
          "digest": "sha256:a5b212558f748ddc8156541b546290320b656506e039a18903ad9fa6e638e732",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-operator@sha256:a5b212558f748ddc8156541b546290320b656506e039a18903ad9fa6e638e732",
          "name": "anzograph-operator-a5b212558f748ddc8156541b546290320b656506e039a18903ad9fa6e638e732-annotation"
        },
        {
          "digest": "sha256:a5b212558f748ddc8156541b546290320b656506e039a18903ad9fa6e638e732",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-operator@sha256:a5b212558f748ddc8156541b546290320b656506e039a18903ad9fa6e638e732",
          "name": "manager"
        },
        {
          "digest": "sha256:e3bdddf811b5ba69f388d023aea1ba538edd00e9f415c33ec555321d39129a36",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph@sha256:e3bdddf811b5ba69f388d023aea1ba538edd00e9f415c33ec555321d39129a36",
          "name": "anzograph_allinone"
        },
        {
          "digest": "sha256:8a5bd26551990929fdb776d6b421a9713cb84e03b19c18f81b625582f7f41af5",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-db@sha256:8a5bd26551990929fdb776d6b421a9713cb84e03b19c18f81b625582f7f41af5",
          "name": "anzograph_db"
        },
        {
          "digest": "sha256:c1443bcdc8e998fc699f61980a665f1a083350adf2d3d1d55a7cb55e31ca50b3",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-frontend@sha256:c1443bcdc8e998fc699f61980a665f1a083350adf2d3d1d55a7cb55e31ca50b3",
          "name": "anzograph_frontend"
        },
        {
          "digest": "sha256:c1443bcdc8e998fc699f61980a665f1a083350adf2d3d1d55a7cb55e31ca50b3",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-frontend@sha256:c1443bcdc8e998fc699f61980a665f1a083350adf2d3d1d55a7cb55e31ca50b3",
          "name": "anzograph-frontend-c1443bcdc8e998fc699f61980a665f1a083350adf2d3d1d55a7cb55e31ca50b3-annotation"
        },
        {
          "digest": "sha256:8a5bd26551990929fdb776d6b421a9713cb84e03b19c18f81b625582f7f41af5",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzograph-db@sha256:8a5bd26551990929fdb776d6b421a9713cb84e03b19c18f81b625582f7f41af5",
          "name": "anzograph-db-8a5bd26551990929fdb776d6b421a9713cb84e03b19c18f81b625582f7f41af5-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.0.1",
      "version_original": "2.0.1"
    },
    {
      "_id": "61a57b26c17162a20c1c687f",
      "alm_examples": [
        {
          "api_version": "anzounstructured.clusters.cambridgesemantics.com/v1",
          "kind": "AnzoUnstructured",
          "metadata": {
            "name": "au01"
          },
          "spec": {
            "auWorker": {
              "nodeConfig": {
                "spec": {
                  "replicas": 1,
                  "selector": {
                    "matchLabels": {
                      "app": "anzounstructured"
                    }
                  },
                  "serviceName": "au-au01-w",
                  "template": {
                    "metadata": {
                      "labels": {
                        "app": "anzounstructured"
                      }
                    },
                    "spec": {
                      "containers": [
                        {
                          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-unstructured-worker@sha256:4db61bdf6dc8b42824a06d2f8d8aeecddde765d123b40a63a7bbf87845719fb2",
                          "name": "w",
                          "resources": {
                            "limits": {
                              "cpu": "2",
                              "memory": "4Gi"
                            },
                            "requests": {
                              "cpu": "2",
                              "memory": "4Gi"
                            }
                          }
                        }
                      ],
                      "serviceAccountName": "unstructured-operator"
                    }
                  }
                }
              }
            },
            "msLeader": {
              "nodeConfig": {
                "spec": {
                  "replicas": 1,
                  "selector": {
                    "matchLabels": {
                      "app": "anzounstructured"
                    }
                  },
                  "serviceName": "au-au01-ms",
                  "template": {
                    "metadata": {
                      "labels": {
                        "app": "anzounstructured"
                      }
                    },
                    "spec": {
                      "containers": [
                        {
                          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-microservices-leader@sha256:0579fd97e81e436eaff3b58c5395f13aa924940a3d51f0bdea5163d327620286",
                          "name": "ms",
                          "resources": {
                            "limits": {
                              "cpu": "2",
                              "memory": "4Gi"
                            },
                            "requests": {
                              "cpu": "2",
                              "memory": "4Gi"
                            }
                          }
                        }
                      ],
                      "serviceAccountName": "unstructured-operator"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cambridgesemantics/anzo-unstructured-operator-bundle@sha256:800c686058a8b80d2c082741019db9d35535b2ba2b59007cbde0c2dffa143e82",
      "bundle_path_digest": "sha256:800c686058a8b80d2c082741019db9d35535b2ba2b59007cbde0c2dffa143e82",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:15:18.637000+00:00",
      "csv_description": "The Anzo Unstructured Operator provides the way to install and configure an anzo unstructured setup on Red Hat K8S environment.\nCurrently, this is possible only through existing Anzo installation.\n\n### Installation\n Refer [installation instructions]( https://github.com/cambridgesemantics/csi-k8s-operator-anzo-unstructured/blob/v2.0.0/README.md )\n\n### Documentation\n\nYou can find our documentation [here.]( https://docs.cambridgesemantics.com/anzo/userdoc/cloud-deployments.htm )\n\n### Support\n\nWe offer Support to our customers through [ Cambridge Semantics Customer Center ]( https://customercenter.cambridgesemantics.com/ ).",
      "csv_display_name": "Anzo Unstructured Operator",
      "csv_metadata_description": "Kubernetes Operator for Anzo Unstructured",
      "csv_name": "anzounstructured-operator.v2.0.101",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:53:12.947000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "anzounstructured-operator",
      "provided_apis": [
        {
          "group": "anzounstructured.clusters.cambridgesemantics.com",
          "kind": "AnzoUnstructured",
          "plural": "anzounstructureds",
          "version": "v1"
        }
      ],
      "provider": "Cambridge Semantics Inc.",
      "related_images": [
        {
          "digest": "sha256:a47af068a7aa55c12be84c80d263feeed5597ecc434986b4f2fff782b568bb04",
          "image": "registry.connect.redhat.com/cambridgesemantics/unstructured-operator@sha256:a47af068a7aa55c12be84c80d263feeed5597ecc434986b4f2fff782b568bb04",
          "name": "unstructured-operator-a47af068a7aa55c12be84c80d263feeed5597ecc434986b4f2fff782b568bb04-annotation"
        },
        {
          "digest": "sha256:a47af068a7aa55c12be84c80d263feeed5597ecc434986b4f2fff782b568bb04",
          "image": "registry.connect.redhat.com/cambridgesemantics/unstructured-operator@sha256:a47af068a7aa55c12be84c80d263feeed5597ecc434986b4f2fff782b568bb04",
          "name": "manager"
        },
        {
          "digest": "sha256:0579fd97e81e436eaff3b58c5395f13aa924940a3d51f0bdea5163d327620286",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-microservices-leader@sha256:0579fd97e81e436eaff3b58c5395f13aa924940a3d51f0bdea5163d327620286",
          "name": "anzo_microservices_leader"
        },
        {
          "digest": "sha256:4db61bdf6dc8b42824a06d2f8d8aeecddde765d123b40a63a7bbf87845719fb2",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-unstructured-worker@sha256:4db61bdf6dc8b42824a06d2f8d8aeecddde765d123b40a63a7bbf87845719fb2",
          "name": "anzo_unstructured_worker"
        },
        {
          "digest": "sha256:0579fd97e81e436eaff3b58c5395f13aa924940a3d51f0bdea5163d327620286",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-microservices-leader@sha256:0579fd97e81e436eaff3b58c5395f13aa924940a3d51f0bdea5163d327620286",
          "name": "anzo-microservices-leader-0579fd97e81e436eaff3b58c5395f13aa924940a3d51f0bdea5163d327620286-annotation"
        },
        {
          "digest": "sha256:4db61bdf6dc8b42824a06d2f8d8aeecddde765d123b40a63a7bbf87845719fb2",
          "image": "registry.connect.redhat.com/cambridgesemantics/anzo-unstructured-worker@sha256:4db61bdf6dc8b42824a06d2f8d8aeecddde765d123b40a63a7bbf87845719fb2",
          "name": "anzo-unstructured-worker-4db61bdf6dc8b42824a06d2f8d8aeecddde765d123b40a63a7bbf87845719fb2-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.0.0",
      "version_original": "2.0.0"
    },
    {
      "_id": "61a57b2ec17162a20c1c6880",
      "alm_examples": [
        {
          "api_version": "charts.helm.k8s.io/v1alpha1",
          "kind": "OpenshiftArtifactoryHa",
          "metadata": {
            "name": "openshiftartifactoryha"
          },
          "spec": {
            "artifactory-ha": {
              "artifactory": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/artifactory-pro",
                  "tag": "7.25.7-2"
                },
                "joinKey": "OVERRIDE",
                "masterKey": "OVERRIDE",
                "node": {
                  "replicaCount": 2,
                  "waitForPrimaryStartup": {
                    "enabled": false
                  }
                },
                "uid": "1000721030"
              },
              "database": {
                "driver": "OVERRIDE",
                "password": "OVERRIDE",
                "type": "OVERRIDE",
                "url": "OVERRIDE",
                "user": "OVERRIDE"
              },
              "databaseUpgradeReady": true,
              "initContainerImage": "registry.connect.redhat.com/jfrog/init@sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
              "nginx": {
                "gid": "1000720107",
                "http": {
                  "externalPort": 80,
                  "internalPort": 8080
                },
                "https": {
                  "externalPort": 443,
                  "internalPort": 8443
                },
                "image": {
                  "registry": "registry.redhat.io",
                  "repository": "rhel8/nginx-116",
                  "tag": "latest"
                },
                "service": {
                  "ssloffload": false
                },
                "tlsSecretName": "OVERRIDE",
                "uid": "1000720104"
              },
              "postgresql": {
                "enabled": false
              },
              "waitForDatabase": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/jfrog/artifactory-operator-bundle@sha256:49229329083f8836be365b25beda86290cf8c6985dbeb1c46991c2121b54dda9",
      "bundle_path_digest": "sha256:49229329083f8836be365b25beda86290cf8c6985dbeb1c46991c2121b54dda9",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:15:26.440000+00:00",
      "csv_description": " ## Breaking change\nPlease update to version 1.1.10 of the operator.\nVersion 1.1.8 and 1.1.9 have issues. Please skip these versions.\n\n## Overview\nOpenshift Operator to deploy JFrog Artifactory Enterprise into your Openshift cluster.\n## Security Context Constraints\nTo deploy this helm chart you will need to be a cluster admin w/ access to the anyuid scc and add the operator service account to the anyuid scc.\n```\noc adm policy add-scc-to-user anyuid -z artifactory-ha-operator -n openshift-operators\n```\nAdd the service account for the Artifactory chart to deploy successfully:\n``` oc adm policy add-scc-to-user anyuid -z openshiftartifactoryha-artifactory-ha -n artifactory ```\n### Usage\n\nAn external DB is required. The operator will not deploy a DB but will require you to specify the configuration values to connect to it.\n\nSearch for JFrog and click JFrog Artifactory Enterprise Operator to install.\n\nGo to the Installed Operators.\n\nWait for the JFrog Artifactory Enterprise Operator to complete the installation.\n\nOpen the Operator and click on the provided API: Artifactory HA.\n\nClick Create New Instance and provide the following parameters for your DB configuration:\n\n```\nDATABASE_TYPE\nDATABASE_DRIVER\nDATABASE_URL\nDATABASE_USER\nDATABASE_PASSWORD\n```\nMaster key and Join key must be supplied. To generate a new key for each run the command below:\n\n```\n# Create a key\nexport JOIN_KEY=$(openssl rand -hex 32)\necho ${JOIN_KEY}\n```\n\nTo use TLS you will need to first create a k8s tls secret to store your .crt and .key file into.\nThen supply the value of this k8s secret into the TLS_SECRET field.\n``` oc create secret tls my_tls_secret --cert=tls.crt --key=tls.key --namespace=my_namespace ```\nClick Create for Artifactory Enterprise to deploy into OpenShift and connect to it on the external IP exposed by the load balancer.\n### Create a route\nTo expose Artifactory from Openshift we recommend you create a new route in Openshift.\nYou can either use the oc command line tool or the Openshift web console to generate a new route.\nDepending upon where you terminate TLS you will need to either specify pass through or edge.\nCommand Line (Edge):\n``` oc create route edge --service=openshiftartifactory-ha --cert=tls.crt --key=tls.key --ca-cert=ca.crt --hostname=www.example.com ```\nOr for more information visit the official Openshift documentation on routes here:\nhttps://docs.openshift.com/container-platform/4.6/networking/routes/route-configuration.html\n\n",
      "csv_display_name": "JFrog Artifactory Enterprise Operator",
      "csv_metadata_description": "JFrog Artifactory Enterprise deploys Artifactory in a high availability environment across multiple pods",
      "csv_name": "artifactory-ha-operator.v1.1.14",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:53:39.784000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "openshiftartifactoryha-operator",
      "provided_apis": [
        {
          "group": "charts.helm.k8s.io",
          "kind": "OpenshiftArtifactoryHa",
          "version": "v1alpha1"
        }
      ],
      "provider": "JFrog",
      "related_images": [
        {
          "digest": "sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "name": "artifactory-operator-9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4-annotation"
        },
        {
          "digest": "sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "name": "artifactory-ha-operator"
        },
        {
          "digest": "sha256:abd96a07bbeffcdcdf69b5998b9256b684e72bcecb9b94b9a623a0c02b276322",
          "image": "registry.connect.redhat.com/jfrog/artifactory-pro@sha256:abd96a07bbeffcdcdf69b5998b9256b684e72bcecb9b94b9a623a0c02b276322",
          "name": "artifactory_image_repository"
        },
        {
          "digest": "sha256:225b9d8cac2b4d3a1d193782f4bba749194048b87bf31dcd12ea88422e6350c8",
          "image": "registry.redhat.io/rhel8/nginx-116@sha256:225b9d8cac2b4d3a1d193782f4bba749194048b87bf31dcd12ea88422e6350c8",
          "name": "nginx_image_repository"
        },
        {
          "digest": "sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
          "image": "registry.connect.redhat.com/jfrog/init@sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
          "name": "init-175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.1.14",
      "version_original": "1.1.14"
    },
    {
      "_id": "61a57b36bfd4a5234d5960ce",
      "alm_examples": [
        {
          "api_version": "charts.helm.k8s.io/v1alpha1",
          "kind": "OpenshiftArtifactoryHa",
          "metadata": {
            "name": "openshiftartifactoryha"
          },
          "spec": {
            "artifactory-ha": {
              "artifactory": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/artifactory-pro",
                  "tag": "7.25.7-2"
                },
                "joinKey": "OVERRIDE",
                "masterKey": "OVERRIDE",
                "node": {
                  "replicaCount": 2,
                  "waitForPrimaryStartup": {
                    "enabled": false
                  }
                },
                "uid": "1000721030"
              },
              "database": {
                "driver": "OVERRIDE",
                "password": "OVERRIDE",
                "type": "OVERRIDE",
                "url": "OVERRIDE",
                "user": "OVERRIDE"
              },
              "databaseUpgradeReady": true,
              "initContainerImage": "registry.connect.redhat.com/jfrog/init@sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
              "nginx": {
                "gid": "1000720107",
                "http": {
                  "externalPort": 80,
                  "internalPort": 8080
                },
                "https": {
                  "externalPort": 443,
                  "internalPort": 8443
                },
                "image": {
                  "registry": "registry.redhat.io",
                  "repository": "rhel8/nginx-116",
                  "tag": "latest"
                },
                "service": {
                  "ssloffload": false
                },
                "tlsSecretName": "OVERRIDE",
                "uid": "1000720104"
              },
              "postgresql": {
                "enabled": false
              },
              "waitForDatabase": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/jfrog/artifactory-operator-bundle@sha256:49229329083f8836be365b25beda86290cf8c6985dbeb1c46991c2121b54dda9",
      "bundle_path_digest": "sha256:49229329083f8836be365b25beda86290cf8c6985dbeb1c46991c2121b54dda9",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:15:34.963000+00:00",
      "csv_description": " ## Breaking change\nPlease update to version 1.1.10 of the operator.\nVersion 1.1.8 and 1.1.9 have issues. Please skip these versions.\n\n## Overview\nOpenshift Operator to deploy JFrog Artifactory Enterprise into your Openshift cluster.\n## Security Context Constraints\nTo deploy this helm chart you will need to be a cluster admin w/ access to the anyuid scc and add the operator service account to the anyuid scc.\n```\noc adm policy add-scc-to-user anyuid -z artifactory-ha-operator -n openshift-operators\n```\nAdd the service account for the Artifactory chart to deploy successfully:\n``` oc adm policy add-scc-to-user anyuid -z openshiftartifactoryha-artifactory-ha -n artifactory ```\n### Usage\n\nAn external DB is required. The operator will not deploy a DB but will require you to specify the configuration values to connect to it.\n\nSearch for JFrog and click JFrog Artifactory Enterprise Operator to install.\n\nGo to the Installed Operators.\n\nWait for the JFrog Artifactory Enterprise Operator to complete the installation.\n\nOpen the Operator and click on the provided API: Artifactory HA.\n\nClick Create New Instance and provide the following parameters for your DB configuration:\n\n```\nDATABASE_TYPE\nDATABASE_DRIVER\nDATABASE_URL\nDATABASE_USER\nDATABASE_PASSWORD\n```\nMaster key and Join key must be supplied. To generate a new key for each run the command below:\n\n```\n# Create a key\nexport JOIN_KEY=$(openssl rand -hex 32)\necho ${JOIN_KEY}\n```\n\nTo use TLS you will need to first create a k8s tls secret to store your .crt and .key file into.\nThen supply the value of this k8s secret into the TLS_SECRET field.\n``` oc create secret tls my_tls_secret --cert=tls.crt --key=tls.key --namespace=my_namespace ```\nClick Create for Artifactory Enterprise to deploy into OpenShift and connect to it on the external IP exposed by the load balancer.\n### Create a route\nTo expose Artifactory from Openshift we recommend you create a new route in Openshift.\nYou can either use the oc command line tool or the Openshift web console to generate a new route.\nDepending upon where you terminate TLS you will need to either specify pass through or edge.\nCommand Line (Edge):\n``` oc create route edge --service=openshiftartifactory-ha --cert=tls.crt --key=tls.key --ca-cert=ca.crt --hostname=www.example.com ```\nOr for more information visit the official Openshift documentation on routes here:\nhttps://docs.openshift.com/container-platform/4.6/networking/routes/route-configuration.html\n\n",
      "csv_display_name": "JFrog Artifactory Enterprise Operator",
      "csv_metadata_description": "JFrog Artifactory Enterprise deploys Artifactory in a high availability environment across multiple pods",
      "csv_name": "artifactory-ha-operator.v1.1.14",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:53:43.423000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "openshiftartifactoryha-operator",
      "provided_apis": [
        {
          "group": "charts.helm.k8s.io",
          "kind": "OpenshiftArtifactoryHa",
          "version": "v1alpha1"
        }
      ],
      "provider": "JFrog",
      "related_images": [
        {
          "digest": "sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "name": "artifactory-operator-9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4-annotation"
        },
        {
          "digest": "sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "name": "artifactory-ha-operator"
        },
        {
          "digest": "sha256:abd96a07bbeffcdcdf69b5998b9256b684e72bcecb9b94b9a623a0c02b276322",
          "image": "registry.connect.redhat.com/jfrog/artifactory-pro@sha256:abd96a07bbeffcdcdf69b5998b9256b684e72bcecb9b94b9a623a0c02b276322",
          "name": "artifactory_image_repository"
        },
        {
          "digest": "sha256:225b9d8cac2b4d3a1d193782f4bba749194048b87bf31dcd12ea88422e6350c8",
          "image": "registry.redhat.io/rhel8/nginx-116@sha256:225b9d8cac2b4d3a1d193782f4bba749194048b87bf31dcd12ea88422e6350c8",
          "name": "nginx_image_repository"
        },
        {
          "digest": "sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
          "image": "registry.connect.redhat.com/jfrog/init@sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
          "name": "init-175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.1.14",
      "version_original": "1.1.14"
    },
    {
      "_id": "61a57b3f3e9240fca360f54e",
      "alm_examples": [
        {
          "api_version": "charts.helm.k8s.io/v1alpha1",
          "kind": "OpenshiftArtifactoryHa",
          "metadata": {
            "name": "openshiftartifactoryha"
          },
          "spec": {
            "artifactory-ha": {
              "artifactory": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/artifactory-pro",
                  "tag": "7.25.7-2"
                },
                "joinKey": "OVERRIDE",
                "masterKey": "OVERRIDE",
                "node": {
                  "replicaCount": 2,
                  "waitForPrimaryStartup": {
                    "enabled": false
                  }
                },
                "uid": "1000721030"
              },
              "database": {
                "driver": "OVERRIDE",
                "password": "OVERRIDE",
                "type": "OVERRIDE",
                "url": "OVERRIDE",
                "user": "OVERRIDE"
              },
              "databaseUpgradeReady": true,
              "initContainerImage": "registry.connect.redhat.com/jfrog/init@sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
              "nginx": {
                "gid": "1000720107",
                "http": {
                  "externalPort": 80,
                  "internalPort": 8080
                },
                "https": {
                  "externalPort": 443,
                  "internalPort": 8443
                },
                "image": {
                  "registry": "registry.redhat.io",
                  "repository": "rhel8/nginx-116",
                  "tag": "latest"
                },
                "service": {
                  "ssloffload": false
                },
                "tlsSecretName": "OVERRIDE",
                "uid": "1000720104"
              },
              "postgresql": {
                "enabled": false
              },
              "waitForDatabase": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/jfrog/artifactory-operator-bundle@sha256:55712df39fd00efa21711d24459e5a0610d9d2221af37a893fd80f7951838fab",
      "bundle_path_digest": "sha256:55712df39fd00efa21711d24459e5a0610d9d2221af37a893fd80f7951838fab",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:15:43.436000+00:00",
      "csv_description": " ## Breaking change\nPlease update to version 1.1.10 of the operator.\nVersion 1.1.8 and 1.1.9 have issues. Please skip these versions.\n\n## Overview\nOpenshift Operator to deploy JFrog Artifactory Enterprise into your Openshift cluster.\n## Security Context Constraints\nTo deploy this helm chart you will need to be a cluster admin w/ access to the anyuid scc and add the operator service account to the anyuid scc.\n```\noc adm policy add-scc-to-user anyuid -z artifactory-ha-operator -n openshift-operators\n```\nAdd the service account for the Artifactory chart to deploy successfully:\n``` oc adm policy add-scc-to-user anyuid -z openshiftartifactoryha-artifactory-ha -n artifactory ```\n### Usage\n\nAn external DB is required. The operator will not deploy a DB but will require you to specify the configuration values to connect to it.\n\nSearch for JFrog and click JFrog Artifactory Enterprise Operator to install.\n\nGo to the Installed Operators.\n\nWait for the JFrog Artifactory Enterprise Operator to complete the installation.\n\nOpen the Operator and click on the provided API: Artifactory HA.\n\nClick Create New Instance and provide the following parameters for your DB configuration:\n\n```\nDATABASE_TYPE\nDATABASE_DRIVER\nDATABASE_URL\nDATABASE_USER\nDATABASE_PASSWORD\n```\nMaster key and Join key must be supplied. To generate a new key for each run the command below:\n\n```\n# Create a key\nexport JOIN_KEY=$(openssl rand -hex 32)\necho ${JOIN_KEY}\n```\n\nTo use TLS you will need to first create a k8s tls secret to store your .crt and .key file into.\nThen supply the value of this k8s secret into the TLS_SECRET field.\n``` oc create secret tls my_tls_secret --cert=tls.crt --key=tls.key --namespace=my_namespace ```\nClick Create for Artifactory Enterprise to deploy into OpenShift and connect to it on the external IP exposed by the load balancer.\n### Create a route\nTo expose Artifactory from Openshift we recommend you create a new route in Openshift.\nYou can either use the oc command line tool or the Openshift web console to generate a new route.\nDepending upon where you terminate TLS you will need to either specify pass through or edge.\nCommand Line (Edge):\n``` oc create route edge --service=openshiftartifactory-ha --cert=tls.crt --key=tls.key --ca-cert=ca.crt --hostname=www.example.com ```\nOr for more information visit the official Openshift documentation on routes here:\nhttps://docs.openshift.com/container-platform/4.6/networking/routes/route-configuration.html\n\n",
      "csv_display_name": "JFrog Artifactory Enterprise Operator",
      "csv_metadata_description": "JFrog Artifactory Enterprise deploys Artifactory in a high availability environment across multiple pods",
      "csv_name": "artifactory-ha-operator.v1.1.15",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:53:47.286000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "openshiftartifactoryha-operator",
      "provided_apis": [
        {
          "group": "charts.helm.k8s.io",
          "kind": "OpenshiftArtifactoryHa",
          "version": "v1alpha1"
        }
      ],
      "provider": "JFrog",
      "related_images": [
        {
          "digest": "sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "name": "artifactory-operator-9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4-annotation"
        },
        {
          "digest": "sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:9b0b59194a052c63fa0d54d47220b7d2154ac38272694e54492cf2c029043cc4",
          "name": "artifactory-ha-operator"
        },
        {
          "digest": "sha256:abd96a07bbeffcdcdf69b5998b9256b684e72bcecb9b94b9a623a0c02b276322",
          "image": "registry.connect.redhat.com/jfrog/artifactory-pro@sha256:abd96a07bbeffcdcdf69b5998b9256b684e72bcecb9b94b9a623a0c02b276322",
          "name": "artifactory_image_repository"
        },
        {
          "digest": "sha256:d71d368d6094a5777000a8d99164959ccb97fca355e855e24bd92c13a8df04f6",
          "image": "registry.redhat.io/rhel8/nginx-116@sha256:d71d368d6094a5777000a8d99164959ccb97fca355e855e24bd92c13a8df04f6",
          "name": "nginx_image_repository"
        },
        {
          "digest": "sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
          "image": "registry.connect.redhat.com/jfrog/init@sha256:175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03",
          "name": "init-175efbb8c51f0c50c4d32e876b20083b92ec5a04bab94e93cb3cb92d86164d03-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.1.15",
      "version_original": "1.1.15"
    },
    {
      "_id": "61a57b47bfd4a5234d5960cf",
      "alm_examples": [
        {
          "api_version": "charts.helm.k8s.io/v1",
          "kind": "OpenshiftArtifactoryHa",
          "metadata": {
            "name": "openshiftartifactoryha"
          },
          "spec": {
            "artifactory-ha": {
              "artifactory": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/artifactory-pro",
                  "tag": "7.27.3-1"
                },
                "joinKey": "OVERRIDE",
                "masterKey": "OVERRIDE",
                "node": {
                  "replicaCount": 2,
                  "waitForPrimaryStartup": {
                    "enabled": false
                  }
                },
                "uid": "1000721030"
              },
              "database": {
                "driver": "OVERRIDE",
                "password": "OVERRIDE",
                "type": "OVERRIDE",
                "url": "OVERRIDE",
                "user": "OVERRIDE"
              },
              "databaseUpgradeReady": true,
              "initContainerImage": "registry.connect.redhat.com/jfrog/init@sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
              "nginx": {
                "gid": "1000720107",
                "http": {
                  "externalPort": 80,
                  "internalPort": 8080
                },
                "https": {
                  "externalPort": 443,
                  "internalPort": 8443
                },
                "image": {
                  "registry": "registry.redhat.io",
                  "repository": "rhel8/nginx-116",
                  "tag": "latest"
                },
                "service": {
                  "ssloffload": false
                },
                "tlsSecretName": "OVERRIDE",
                "uid": "1000720104"
              },
              "postgresql": {
                "enabled": false
              },
              "waitForDatabase": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/jfrog/artifactory-operator-bundle@sha256:fc374491270b9566b0a5c80f3dd665b2227b1e8fb224eada7e5c98c82926ae08",
      "bundle_path_digest": "sha256:fc374491270b9566b0a5c80f3dd665b2227b1e8fb224eada7e5c98c82926ae08",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:15:51.531000+00:00",
      "csv_description": " ## Breaking change\nPlease update to version 1.1.10 of the operator.\nVersion 1.1.8 and 1.1.9 have issues. Please skip these versions.\n\n## Overview\nOpenshift Operator to deploy JFrog Artifactory Enterprise into your Openshift cluster.\n## Security Context Constraints\nTo deploy this helm chart you will need to be a cluster admin w/ access to the anyuid scc and add the operator service account to the anyuid scc.\n```\noc adm policy add-scc-to-user anyuid -z artifactory-ha-operator -n openshift-operators\n```\nAdd the service account for the Artifactory chart to deploy successfully:\n``` oc adm policy add-scc-to-user anyuid -z openshiftartifactoryha-artifactory-ha -n artifactory ```\n### Usage\n\nAn external DB is required. The operator will not deploy a DB but will require you to specify the configuration values to connect to it.\n\nSearch for JFrog and click JFrog Artifactory Enterprise Operator to install.\n\nGo to the Installed Operators.\n\nWait for the JFrog Artifactory Enterprise Operator to complete the installation.\n\nOpen the Operator and click on the provided API: Artifactory HA.\n\nClick Create New Instance and provide the following parameters for your DB configuration:\n\n```\nDATABASE_TYPE\nDATABASE_DRIVER\nDATABASE_URL\nDATABASE_USER\nDATABASE_PASSWORD\n```\nMaster key and Join key must be supplied. To generate a new key for each run the command below:\n\n```\n# Create a key\nexport JOIN_KEY=$(openssl rand -hex 32)\necho ${JOIN_KEY}\n```\n\nTo use TLS you will need to first create a k8s tls secret to store your .crt and .key file into.\nThen supply the value of this k8s secret into the TLS_SECRET field.\n``` oc create secret tls my_tls_secret --cert=tls.crt --key=tls.key --namespace=my_namespace ```\nClick Create for Artifactory Enterprise to deploy into OpenShift and connect to it on the external IP exposed by the load balancer.\n### Create a route\nTo expose Artifactory from Openshift we recommend you create a new route in Openshift.\nYou can either use the oc command line tool or the Openshift web console to generate a new route.\nDepending upon where you terminate TLS you will need to either specify pass through or edge.\nCommand Line (Edge):\n``` oc create route edge --service=openshiftartifactory-ha --cert=tls.crt --key=tls.key --ca-cert=ca.crt --hostname=www.example.com ```\nOr for more information visit the official Openshift documentation on routes here:\nhttps://docs.openshift.com/container-platform/4.6/networking/routes/route-configuration.html\n\n",
      "csv_display_name": "JFrog Artifactory Enterprise Operator",
      "csv_metadata_description": "JFrog Artifactory Enterprise deploys Artifactory in a high availability environment across multiple pods",
      "csv_name": "artifactory-ha-operator.v1.1.18",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:53:51.143000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "openshiftartifactoryha-operator",
      "provided_apis": [
        {
          "group": "charts.helm.k8s.io",
          "kind": "OpenshiftArtifactoryHa",
          "version": "v1"
        }
      ],
      "provider": "JFrog",
      "related_images": [
        {
          "digest": "sha256:e292553e1b6e792ff19276c7f6565d7ed61dd95289eb176066329954bc93e371",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:e292553e1b6e792ff19276c7f6565d7ed61dd95289eb176066329954bc93e371",
          "name": "artifactory-operator-e292553e1b6e792ff19276c7f6565d7ed61dd95289eb176066329954bc93e371-annotation"
        },
        {
          "digest": "sha256:e292553e1b6e792ff19276c7f6565d7ed61dd95289eb176066329954bc93e371",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:e292553e1b6e792ff19276c7f6565d7ed61dd95289eb176066329954bc93e371",
          "name": "artifactory-ha-operator"
        },
        {
          "digest": "sha256:7289dde95d1e4d8e161a28cffd9c4a0cc96f92f7536d069ab63ec304a92254fd",
          "image": "registry.connect.redhat.com/jfrog/artifactory-pro@sha256:7289dde95d1e4d8e161a28cffd9c4a0cc96f92f7536d069ab63ec304a92254fd",
          "name": "artifactory_image_repository"
        },
        {
          "digest": "sha256:d71d368d6094a5777000a8d99164959ccb97fca355e855e24bd92c13a8df04f6",
          "image": "registry.redhat.io/rhel8/nginx-116@sha256:d71d368d6094a5777000a8d99164959ccb97fca355e855e24bd92c13a8df04f6",
          "name": "nginx_image_repository"
        },
        {
          "digest": "sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
          "image": "registry.connect.redhat.com/jfrog/init@sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
          "name": "init-164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.1.18",
      "version_original": "1.1.18"
    },
    {
      "_id": "61a57b4f3e9240fca360f54f",
      "alm_examples": [
        {
          "api_version": "charts.helm.k8s.io/v1",
          "kind": "OpenshiftArtifactoryHa",
          "metadata": {
            "name": "openshiftartifactoryha"
          },
          "spec": {
            "artifactory-ha": {
              "artifactory": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/artifactory-pro",
                  "tag": "7.27.3-1"
                },
                "joinKey": "OVERRIDE",
                "masterKey": "OVERRIDE",
                "node": {
                  "replicaCount": 2,
                  "waitForPrimaryStartup": {
                    "enabled": false
                  }
                },
                "uid": "1000721030"
              },
              "database": {
                "driver": "OVERRIDE",
                "password": "OVERRIDE",
                "type": "OVERRIDE",
                "url": "OVERRIDE",
                "user": "OVERRIDE"
              },
              "databaseUpgradeReady": true,
              "initContainerImage": "registry.connect.redhat.com/jfrog/init@sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
              "nginx": {
                "gid": "1000720107",
                "http": {
                  "externalPort": 80,
                  "internalPort": 8080
                },
                "https": {
                  "externalPort": 443,
                  "internalPort": 8443
                },
                "image": {
                  "registry": "registry.redhat.io",
                  "repository": "rhel8/nginx-116",
                  "tag": "latest"
                },
                "service": {
                  "ssloffload": false
                },
                "tlsSecretName": "OVERRIDE",
                "uid": "1000720104"
              },
              "postgresql": {
                "enabled": false
              },
              "waitForDatabase": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/jfrog/artifactory-operator-bundle@sha256:3c12c9d9537b12f610b9f759ad0a94ed465608f69e6bd1cd175a8c3d177151b8",
      "bundle_path_digest": "sha256:3c12c9d9537b12f610b9f759ad0a94ed465608f69e6bd1cd175a8c3d177151b8",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:15:59.736000+00:00",
      "csv_description": " ## Breaking change\nPlease update to version 1.1.10 of the operator.\nVersion 1.1.8 and 1.1.9 have issues. Please skip these versions.\n\n## Overview\nOpenshift Operator to deploy JFrog Artifactory Enterprise into your Openshift cluster.\n## Security Context Constraints\nTo deploy this helm chart you will need to be a cluster admin w/ access to the anyuid scc and add the operator service account to the anyuid scc.\n```\noc adm policy add-scc-to-user anyuid -z artifactory-ha-operator -n openshift-operators\n```\nAdd the service account for the Artifactory chart to deploy successfully:\n``` oc adm policy add-scc-to-user anyuid -z openshiftartifactoryha-artifactory-ha -n artifactory ```\n### Usage\n\nAn external DB is required. The operator will not deploy a DB but will require you to specify the configuration values to connect to it.\n\nSearch for JFrog and click JFrog Artifactory Enterprise Operator to install.\n\nGo to the Installed Operators.\n\nWait for the JFrog Artifactory Enterprise Operator to complete the installation.\n\nOpen the Operator and click on the provided API: Artifactory HA.\n\nClick Create New Instance and provide the following parameters for your DB configuration:\n\n```\nDATABASE_TYPE\nDATABASE_DRIVER\nDATABASE_URL\nDATABASE_USER\nDATABASE_PASSWORD\n```\nMaster key and Join key must be supplied. To generate a new key for each run the command below:\n\n```\n# Create a key\nexport JOIN_KEY=$(openssl rand -hex 32)\necho ${JOIN_KEY}\n```\n\nTo use TLS you will need to first create a k8s tls secret to store your .crt and .key file into.\nThen supply the value of this k8s secret into the TLS_SECRET field.\n``` oc create secret tls my_tls_secret --cert=tls.crt --key=tls.key --namespace=my_namespace ```\nClick Create for Artifactory Enterprise to deploy into OpenShift and connect to it on the external IP exposed by the load balancer.\n### Create a route\nTo expose Artifactory from Openshift we recommend you create a new route in Openshift.\nYou can either use the oc command line tool or the Openshift web console to generate a new route.\nDepending upon where you terminate TLS you will need to either specify pass through or edge.\nCommand Line (Edge):\n``` oc create route edge --service=openshiftartifactory-ha --cert=tls.crt --key=tls.key --ca-cert=ca.crt --hostname=www.example.com ```\nOr for more information visit the official Openshift documentation on routes here:\nhttps://docs.openshift.com/container-platform/4.6/networking/routes/route-configuration.html\n\n",
      "csv_display_name": "JFrog Artifactory Enterprise Operator",
      "csv_metadata_description": "JFrog Artifactory Enterprise deploys Artifactory in a high availability environment across multiple pods",
      "csv_name": "artifactory-ha-operator.v1.1.20",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:53:55.093000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "openshiftartifactoryha-operator",
      "provided_apis": [
        {
          "group": "charts.helm.k8s.io",
          "kind": "OpenshiftArtifactoryHa",
          "version": "v1"
        }
      ],
      "provider": "JFrog",
      "related_images": [
        {
          "digest": "sha256:29dad888f9b74b2c19f221aa6634c94dcd2144237dc039157056a77cbb0c74a4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:29dad888f9b74b2c19f221aa6634c94dcd2144237dc039157056a77cbb0c74a4",
          "name": "artifactory-operator-29dad888f9b74b2c19f221aa6634c94dcd2144237dc039157056a77cbb0c74a4-annotation"
        },
        {
          "digest": "sha256:29dad888f9b74b2c19f221aa6634c94dcd2144237dc039157056a77cbb0c74a4",
          "image": "registry.connect.redhat.com/jfrog/artifactory-operator@sha256:29dad888f9b74b2c19f221aa6634c94dcd2144237dc039157056a77cbb0c74a4",
          "name": "artifactory-ha-operator"
        },
        {
          "digest": "sha256:7289dde95d1e4d8e161a28cffd9c4a0cc96f92f7536d069ab63ec304a92254fd",
          "image": "registry.connect.redhat.com/jfrog/artifactory-pro@sha256:7289dde95d1e4d8e161a28cffd9c4a0cc96f92f7536d069ab63ec304a92254fd",
          "name": "artifactory_image_repository"
        },
        {
          "digest": "sha256:d71d368d6094a5777000a8d99164959ccb97fca355e855e24bd92c13a8df04f6",
          "image": "registry.redhat.io/rhel8/nginx-116@sha256:d71d368d6094a5777000a8d99164959ccb97fca355e855e24bd92c13a8df04f6",
          "name": "nginx_image_repository"
        },
        {
          "digest": "sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
          "image": "registry.connect.redhat.com/jfrog/init@sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
          "name": "init-164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.1.20",
      "version_original": "1.1.20"
    },
    {
      "_id": "61a57b60bfd4a5234d5960d0",
      "alm_examples": [
        {
          "api_version": "cilium.io/v1alpha1",
          "kind": "CiliumConfig",
          "metadata": {
            "name": "cilium-openshift-default",
            "namespace": "placeholder"
          },
          "spec": {
            "cni": {
              "binPath": "/var/lib/cni/bin",
              "confPath": "/var/run/multus/cni/net.d"
            },
            "endpointRoutes": {
              "enabled": true
            },
            "hubble": {
              "tls": {
                "enabled": false
              }
            },
            "ipam": {
              "mode": "cluster-pool",
              "operator": {
                "clusterPoolIPv4MaskSize": "23",
                "clusterPoolIPv4PodCIDR": "10.128.0.0/14"
              }
            },
            "kubeProxyReplacement": "probe",
            "nativeRoutingCIDR": "10.128.0.0/14",
            "prometheus": {
              "serviceMonitor": {
                "enabled": false
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/isovalent/cilium-olm-metadata@sha256:33a2e21a069ff24af4bf0ffc51e83ddf398df5d9735d0123120768e9dc2c27f9",
      "bundle_path_digest": "sha256:33a2e21a069ff24af4bf0ffc51e83ddf398df5d9735d0123120768e9dc2c27f9",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:16:16.258000+00:00",
      "csv_description": "Cilium - eBPF-based Networking, Security, and Observability",
      "csv_display_name": "Cilium",
      "csv_metadata_description": "",
      "csv_name": "cilium.v1.10.4-x5bfd7b3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:54:42.600000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "cilium",
      "provided_apis": [
        {
          "group": "cilium.io",
          "kind": "CiliumConfig",
          "plural": "ciliumconfigs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Isovalent",
      "related_images": [
        {
          "digest": "sha256:b45ff6a6552d71cbc26e358e0b25759d33818fd92301f1656453c5bcf826ff13",
          "image": "registry.connect.redhat.com/isovalent/cilium-olm@sha256:b45ff6a6552d71cbc26e358e0b25759d33818fd92301f1656453c5bcf826ff13",
          "name": "operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.10.4+x5bfd7b3",
      "version_original": "1.10.4+x5bfd7b3"
    },
    {
      "_id": "61a57b6927e166330707d960",
      "alm_examples": [
        {
          "api_version": "citrix.citrix.com/v1alpha1",
          "kind": "Citrix-adc-istio-ingress-gateway",
          "metadata": {
            "name": "cxa-ingress-gateway-sample"
          },
          "spec": {
            "ADMSettings": {
              "ADMIP": "",
              "bandWidth": "",
              "bandWidthLicense": false,
              "cpxCores": "",
              "licenseServerIP": "",
              "licenseServerPort": 27000,
              "vCPULicense": false
            },
            "certProvider": {
              "caAddr": "istiod.istio-system.svc",
              "caPort": 15012,
              "certTTLinHours": 720,
              "clusterId": "Kubernetes",
              "jwtPolicy": "",
              "trustDomain": "cluster.local"
            },
            "citrixCPX": false,
            "coe": {
              "coeTracing": false,
              "coeURL": ""
            },
            "ingressGateway": {
              "EULA": false,
              "adcServerName": "",
              "httpNodePort": 30180,
              "httpsNodePort": 31443,
              "image": "quay.io/citrix/citrix-k8s-cpx-ingress@sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
              "imagePullPolicy": "IfNotPresent",
              "label": "citrix-ingressgateway",
              "lightWeightCPX": 1,
              "mgmtHttpPort": 10080,
              "mgmtHttpsPort": 10443,
              "multiClusterIngress": false,
              "multiClusterListenerNodePort": 32443,
              "multiClusterListenerPort": 15443,
              "multiClusterSvcDomain": "global",
              "netProfile": "",
              "netscalerUrl": "",
              "nodePortRequired": false,
              "secretVolumes": [],
              "tcpPort": [],
              "vserverIP": "nsip"
            },
            "istioPilot": {
              "insecureGrpcPort": 15010,
              "name": "istiod",
              "namespace": "istio-system",
              "secureGrpcPort": 15012
            },
            "metricExporter": {
              "image": "quay.io/citrix/citrix-adc-metrics-exporter@sha256:edc7f42fed88a1652904abb3a9cca09cd555374320a55693087eea2da629e536",
              "imagePullPolicy": "IfNotPresent",
              "logLevel": "ERROR",
              "port": 8888,
              "required": true,
              "secure": "YES"
            },
            "secretName": "nslogin",
            "xDSAdaptor": {
              "image": "quay.io/citrix/citrix-xds-adaptor@sha256:b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6",
              "imagePullPolicy": "IfNotPresent",
              "jsonLog": false,
              "logLevel": "DEBUG",
              "proxyType": "router",
              "secureConnect": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/citrix/istioingressgateway-bundle@sha256:5af6bafd200b94629bf0c5371a779ec19a726225821daa796d494fa99ef2c6e8",
      "bundle_path_digest": "sha256:5af6bafd200b94629bf0c5371a779ec19a726225821daa796d494fa99ef2c6e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:16:25.137000+00:00",
      "csv_description": "An Istio ingress gateway acts as an entry point for the incoming traffic and secures and controls access to the service mesh from outside. It also performs routing and load balancing. Citrix ADC CPX, MPX, or VPX can be deployed as an ingress gateway to the Istio service mesh",
      "csv_display_name": "Citrix ADC Istio Ingress Gateway Operator",
      "csv_metadata_description": "An Istio ingress gateway acts as an entry point for the incoming traffic. Citrix ADC CPX, MPX, or VPX can be deployed as an ingress gateway to the Istio service jeee An Istio ingress gateway acts as an entry point for the incoming traffic and secures and controls access to the service mesh from outside. It also perform routing and load balancing. Citrix ADC CPX, MPX, or VPX can be deployed as an ingress gateway to the Istio service mesh.",
      "csv_name": "citrix-adc-istio-ingress-gateway-operator.v0.9.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:55:22.025000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "citrix-adc-istio-ingress-gateway-operator",
      "provided_apis": [
        {
          "group": "citrix.citrix.com",
          "kind": "Citrix-adc-istio-ingress-gateway",
          "version": "v1alpha1"
        }
      ],
      "provider": "citrix",
      "related_images": [
        {
          "digest": "sha256:8333b7fb73ad7479be45cb6a71d391554480ee0a623744e0a2e185cd1f45c226",
          "image": "registry.connect.redhat.com/citrix/citrix-adc-istio-ingress-gateway@sha256:8333b7fb73ad7479be45cb6a71d391554480ee0a623744e0a2e185cd1f45c226",
          "name": "citrix-adc-istio-ingress-gateway-8333b7fb73ad7479be45cb6a71d391554480ee0a623744e0a2e185cd1f45c226-annotation"
        },
        {
          "digest": "sha256:a5c16c64229aac3564c66816c123e81a849ff93b8a443cd6ff14bd8d63c06644",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a5c16c64229aac3564c66816c123e81a849ff93b8a443cd6ff14bd8d63c06644",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:8333b7fb73ad7479be45cb6a71d391554480ee0a623744e0a2e185cd1f45c226",
          "image": "registry.connect.redhat.com/citrix/citrix-adc-istio-ingress-gateway@sha256:8333b7fb73ad7479be45cb6a71d391554480ee0a623744e0a2e185cd1f45c226",
          "name": "manager"
        },
        {
          "digest": "sha256:b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6",
          "image": "quay.io/citrix/citrix-xds-adaptor@sha256:b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6",
          "name": "citrix-xds-adaptor-b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6-annotation"
        },
        {
          "digest": "sha256:edc7f42fed88a1652904abb3a9cca09cd555374320a55693087eea2da629e536",
          "image": "quay.io/citrix/citrix-adc-metrics-exporter@sha256:edc7f42fed88a1652904abb3a9cca09cd555374320a55693087eea2da629e536",
          "name": "citrix-adc-metrics-exporter-edc7f42fed88a1652904abb3a9cca09cd555374320a55693087eea2da629e536-annotation"
        },
        {
          "digest": "sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "image": "quay.io/citrix/citrix-k8s-cpx-ingress@sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "name": "citrix-k8s-cpx-ingress-8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.9.9",
      "version_original": "0.9.9"
    },
    {
      "_id": "61a57b72c17162a20c1c6881",
      "alm_examples": [
        {
          "api_version": "citrix.citrix.com/v1alpha1",
          "kind": "Citrix-cpx-istio-sidecar-injector",
          "metadata": {
            "name": "cpx-sidecar-injector-sample"
          },
          "spec": {
            "ADMSettings": {
              "ADMIP": "",
              "bandWidth": "",
              "bandWidthLicense": false,
              "licenseServerIP": "",
              "licenseServerPort": 27000
            },
            "certProvider": {
              "caAddr": "istiod.istio-system.svc",
              "caPort": 15012,
              "certTTLinHours": 720,
              "clusterId": "Kubernetes",
              "jwtPolicy": "",
              "trustDomain": "cluster.local"
            },
            "coe": {
              "coeTracing": false,
              "coeURL": ""
            },
            "cpxProxy": {
              "EULA": false,
              "cpxDisableProbe": "YES",
              "cpxSidecarMode": true,
              "image": "quay.io/citrix/citrix-k8s-cpx-ingress@sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
              "imagePullPolicy": "IfNotPresent",
              "mgmtHttpPort": 10080,
              "mgmtHttpsPort": 10443,
              "netscalerUrl": "http://127.0.0.1"
            },
            "istioPilot": {
              "SAN": "",
              "insecureGrpcPort": 15010,
              "name": "istiod",
              "namespace": "istio-system",
              "secureGrpcPort": 15012
            },
            "sidecarCertsGenerator": {
              "image": "quay.io/citrix/cpx-sidecar-injector-certgen@sha256:7a4cc4a981e703c508361aad75fa3b9df9e562890f4e1c0dfd9973c00e97abfb",
              "imagePullPolicy": "IfNotPresent"
            },
            "sidecarWebHook": {
              "imagePullPolicy": "IfNotPresent",
              "webhookImage": "quay.io/citrix/cpx-istio-sidecar-injector@sha256:c40909e434f633ce89e8d0c4df08ed0662833369b6d4b5272dfbc8f4c281b1ac"
            },
            "webhook": {
              "injectionLabelName": "cpx-injection"
            },
            "xDSAdaptor": {
              "image": "quay.io/citrix/citrix-xds-adaptor@sha256:b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6",
              "imagePullPolicy": "IfNotPresent",
              "jsonLog": false,
              "logLevel": "DEBUG",
              "proxyType": "sidecar",
              "secureConnect": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/citrix/istiosidecarcitrix-bundle@sha256:aa46e5305cf61454f4bec9134d8146449e84173ed580612ede9e1777097a780a",
      "bundle_path_digest": "sha256:aa46e5305cf61454f4bec9134d8146449e84173ed580612ede9e1777097a780a",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:16:34.131000+00:00",
      "csv_description": "In Istio service mesh, a sidecar proxy runs alongside application pods and it intercepts and manages incoming and outgoing traffic for applications. Citrix ADC CPX can be deployed as the sidecar proxy in application pods. A sidecar proxy applies the configured routing policies or rules to the ingress and egress traffic from the pod.",
      "csv_display_name": "Citrix ADC CPX Istio Sidecar Injector Operator",
      "csv_metadata_description": "In Istio service mesh, a sidecar proxy runs alongside application pods and it intercepts and manages incoming and outgoing traffic for applications. Citrix ADC CPX can be deployed as the sidecar proxy in application pods. A sidecar proxy applies the configured routing policies or rules to the ingress and egress traffic from the pod.",
      "csv_name": "citrix-cpx-istio-sidecar-injector-operator.v0.9.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:55:25.905000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "citrix-cpx-istio-sidecar-injector-operator",
      "provided_apis": [
        {
          "group": "citrix.citrix.com",
          "kind": "Citrix-cpx-istio-sidecar-injector",
          "plural": "citrix-cpx-istio-sidecar-injectors",
          "version": "v1alpha1"
        }
      ],
      "provider": "citrix",
      "related_images": [
        {
          "digest": "sha256:ba07565418d5e88d9c1f59bc603c32e642f7ca37521097729b054b65636ca899",
          "image": "registry.connect.redhat.com/citrix/citrix-cpx-istio-sidecar-injector@sha256:ba07565418d5e88d9c1f59bc603c32e642f7ca37521097729b054b65636ca899",
          "name": "citrix-cpx-istio-sidecar-injector-ba07565418d5e88d9c1f59bc603c32e642f7ca37521097729b054b65636ca899-annotation"
        },
        {
          "digest": "sha256:9211b70edbb93d718428e1c9a992e5fc74a20cb213f8a0592ffe340c362890fe",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9211b70edbb93d718428e1c9a992e5fc74a20cb213f8a0592ffe340c362890fe",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ba07565418d5e88d9c1f59bc603c32e642f7ca37521097729b054b65636ca899",
          "image": "registry.connect.redhat.com/citrix/citrix-cpx-istio-sidecar-injector@sha256:ba07565418d5e88d9c1f59bc603c32e642f7ca37521097729b054b65636ca899",
          "name": "manager"
        },
        {
          "digest": "sha256:b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6",
          "image": "quay.io/citrix/citrix-xds-adaptor@sha256:b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6",
          "name": "citrix-xds-adaptor-b5b5ab8435d65dcbe4348c0f1b4b69fef8fcc8a27e67927821ff4b4f0b8594f6-annotation"
        },
        {
          "digest": "sha256:c40909e434f633ce89e8d0c4df08ed0662833369b6d4b5272dfbc8f4c281b1ac",
          "image": "quay.io/citrix/cpx-istio-sidecar-injector@sha256:c40909e434f633ce89e8d0c4df08ed0662833369b6d4b5272dfbc8f4c281b1ac",
          "name": "cpx-istio-sidecar-injector-c40909e434f633ce89e8d0c4df08ed0662833369b6d4b5272dfbc8f4c281b1ac-annotation"
        },
        {
          "digest": "sha256:7a4cc4a981e703c508361aad75fa3b9df9e562890f4e1c0dfd9973c00e97abfb",
          "image": "quay.io/citrix/cpx-sidecar-injector-certgen@sha256:7a4cc4a981e703c508361aad75fa3b9df9e562890f4e1c0dfd9973c00e97abfb",
          "name": "cpx-sidecar-injector-certgen-7a4cc4a981e703c508361aad75fa3b9df9e562890f4e1c0dfd9973c00e97abfb-annotation"
        },
        {
          "digest": "sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "image": "quay.io/citrix/citrix-k8s-cpx-ingress@sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "name": "citrix-k8s-cpx-ingress-8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.9.9",
      "version_original": "0.9.9"
    },
    {
      "_id": "61a57b82c17162a20c1c6882",
      "alm_examples": [
        {
          "api_version": "citrix.com/v1alpha1",
          "kind": "CitrixCpxWithIngressController",
          "metadata": {
            "name": "cpx-cic"
          },
          "spec": {
            "ADMSettings": {
              "ADMIP": "",
              "bandWidth": "",
              "bandWidthLicense": false,
              "cpxCores": "",
              "licenseServerIP": "",
              "licenseServerPort": 27000,
              "loginSecret": "",
              "vCPULicense": false
            },
            "bgpSettings": {
              "bgpConfig": [
                {
                  "bgpRouter": {
                    "localAS": 100,
                    "neighbor": [
                      {
                        "ASOriginationInterval": 10,
                        "address": "",
                        "advertisementInterval": 10,
                        "remoteAS": 100
                      }
                    ]
                  }
                }
              ],
              "required": false
            },
            "cic": {
              "image": "registry.connect.redhat.com/citrix/citrix-ingress-controller@sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
              "pullPolicy": "Always",
              "required": true
            },
            "coeConfig": {
              "distributedTracing": {
                "enable": false,
                "samplingrate": 100
              },
              "endpoint": {
                "server": ""
              },
              "required": false,
              "timeseries": {
                "auditlogs": {
                  "enable": false
                },
                "events": {
                  "enable": false
                },
                "metrics": {
                  "enable": false,
                  "mode": "avro"
                },
                "port": 5563
              },
              "transactions": {
                "enable": false,
                "port": 5557
              }
            },
            "cpxBgpRouter": false,
            "crds": {
              "install": false,
              "retainOnDelete": false
            },
            "defaultSSLCertSecret": "",
            "entityPrefix": "",
            "exporter": {
              "image": "registry.connect.redhat.com/citrix/citrix-adc-metrics-exporter@sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
              "ports": {
                "containerPort": 8888
              },
              "pullPolicy": "Always",
              "required": false
            },
            "image": "quay.io/citrix/citrix-k8s-cpx-ingress@sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
            "imagePullSecrets": [],
            "ingressClass": [],
            "ingressIP": "",
            "ipam": false,
            "kubernetesURL": "",
            "license": {
              "accept": "no"
            },
            "logLevel": "INFO",
            "logProxy": "",
            "mgmtHttpPort": 9080,
            "mgmtHttpsPort": 9443,
            "namespaceLabels": "",
            "nodeSelector": {
              "key": "",
              "value": ""
            },
            "nsCookieVersion": "0",
            "nsGateway": "192.168.1.1",
            "nsHTTP2ServerSide": "OFF",
            "nsIP": "192.168.1.2",
            "nsProtocol": "http",
            "openshift": true,
            "pullPolicy": "Always",
            "routeLabels": "",
            "serviceAccount": {
              "create": true
            },
            "serviceAnnotations": {},
            "servicePorts": [],
            "serviceSpec": {
              "loadBalancerSourceRanges": []
            },
            "serviceType": {
              "loadBalancer": {
                "enabled": false,
                "externalTrafficPolicy": "Local"
              },
              "nodePort": {
                "enabled": false,
                "httpPort": "",
                "httpsPort": ""
              }
            },
            "setAsDefaultIngressClass": false,
            "sslCertManagedByAWS": false,
            "tolerations": [],
            "updateIngressStatus": false
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/citrix/citrix-k8s-cpx-ingress-bundle@sha256:cb78fbaa6e154066b70b1e36731fc268bd61b514493f1541f630fff7f7e16d59",
      "bundle_path_digest": "sha256:cb78fbaa6e154066b70b1e36731fc268bd61b514493f1541f630fff7f7e16d59",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:16:50.131000+00:00",
      "csv_description": "Citrix ADC CPX is a container-based application delivery controller that can be provisioned on a Docker host. Citrix ADC CPX enables customers to leverage Docker engine capabilities and use NetScaler load balancing and traffic management features for container-based applications. Citrix Ingress Controller which will be running in side-car mode with Citrix ADC CPX will automatically configures Citrix ADC CPX based on the Ingress resource configuration. This operator can be used deploy Citrix ADC CPX with Citrix ingress controller in an OpenShift environment.",
      "csv_display_name": "Citrix ADC CPX with Ingress Controller",
      "csv_metadata_description": "Citrix ADC CPX is a container-based application delivery controller that can be provisioned on a Docker host. Citrix ADC CPX enables customers to leverage Docker engine capabilities and use NetScaler load balancing and traffic management features for container-based applications. Citrix Ingress Controller which will be running in side-car mode with Citrix ADC CPX will automatically configures Citrix ADC CPX based on the Ingress resource configuration. This operator can be used deploy Citrix ADC CPX with Citrix ingress controller in an Openshift environment.",
      "csv_name": "citrix-cpx-with-ingress-controller-operator.v1.18.5",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:55:30.931000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "citrix-cpx-with-ingress-controller-operator",
      "provided_apis": [
        {
          "group": "citrix.com",
          "kind": "CitrixCpxWithIngressController",
          "plural": "citrixcpxwithingresscontrollers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Citrix",
      "related_images": [
        {
          "digest": "sha256:92677d3e130f52490b52729a192b61ea5a03bd8eefd29f4ffe0222abfe2f9a1d",
          "image": "registry.connect.redhat.com/citrix/citrix-k8s-cpx-ingress-controller@sha256:92677d3e130f52490b52729a192b61ea5a03bd8eefd29f4ffe0222abfe2f9a1d",
          "name": "citrix-k8s-cpx-ingress-controller-92677d3e130f52490b52729a192b61ea5a03bd8eefd29f4ffe0222abfe2f9a1d-annotation"
        },
        {
          "digest": "sha256:71527b0033776ac8a68e9c52937cbdac5909a56058105bcb6489c4a0cb9e4f4d",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:71527b0033776ac8a68e9c52937cbdac5909a56058105bcb6489c4a0cb9e4f4d",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:92677d3e130f52490b52729a192b61ea5a03bd8eefd29f4ffe0222abfe2f9a1d",
          "image": "registry.connect.redhat.com/citrix/citrix-k8s-cpx-ingress-controller@sha256:92677d3e130f52490b52729a192b61ea5a03bd8eefd29f4ffe0222abfe2f9a1d",
          "name": "manager"
        },
        {
          "digest": "sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "image": "quay.io/citrix/citrix-k8s-cpx-ingress@sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "name": "cpx"
        },
        {
          "digest": "sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "image": "registry.connect.redhat.com/citrix/citrix-ingress-controller@sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "name": "cic"
        },
        {
          "digest": "sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "image": "registry.connect.redhat.com/citrix/citrix-adc-metrics-exporter@sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "name": "exporter"
        },
        {
          "digest": "sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "image": "quay.io/citrix/citrix-k8s-cpx-ingress@sha256:8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc",
          "name": "citrix-k8s-cpx-ingress-8f28c8af17909f0c0ced2109701755be1edea22b2a80f00aa37da70168abe1dc-annotation"
        },
        {
          "digest": "sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "image": "registry.connect.redhat.com/citrix/citrix-adc-metrics-exporter@sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "name": "citrix-adc-metrics-exporter-6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8-annotation"
        },
        {
          "digest": "sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "image": "registry.connect.redhat.com/citrix/citrix-ingress-controller@sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "name": "citrix-ingress-controller-91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.18.5",
      "version_original": "1.18.5"
    },
    {
      "_id": "61a57b8a27e166330707d961",
      "alm_examples": [
        {
          "api_version": "citrix.com/v1alpha1",
          "kind": "CitrixIngressController",
          "metadata": {
            "name": "cic"
          },
          "spec": {
            "adcCredentialSecret": "",
            "clusterName": "",
            "cncPbr": false,
            "coeConfig": {
              "distributedTracing": {
                "enable": false,
                "samplingrate": 100
              },
              "endpoint": {
                "server": ""
              },
              "required": false,
              "timeseries": {
                "auditlogs": {
                  "enable": false
                },
                "events": {
                  "enable": false
                },
                "metrics": {
                  "enable": false,
                  "mode": "avro"
                },
                "port": 30002
              },
              "transactions": {
                "enable": false,
                "port": 30001
              }
            },
            "crds": {
              "install": false,
              "retainOnDelete": false
            },
            "defaultSSLCertSecret": "",
            "entityPrefix": "",
            "exporter": {
              "image": "registry.connect.redhat.com/citrix/citrix-adc-metrics-exporter@sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
              "ports": {
                "containerPort": 8888
              },
              "pullPolicy": "Always",
              "required": false
            },
            "ignoreNodeExternalIP": false,
            "image": "registry.connect.redhat.com/citrix/citrix-ingress-controller@sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
            "imagePullSecrets": [],
            "ingressClass": [],
            "ipam": false,
            "kubernetesURL": "",
            "license": {
              "accept": "no"
            },
            "logLevel": "INFO",
            "logProxy": "",
            "namespaceLabels": "",
            "nodeSelector": {
              "key": "",
              "value": ""
            },
            "nodeWatch": false,
            "nsCookieVersion": "0",
            "nsHTTP2ServerSide": "OFF",
            "nsIP": "x.x.x.x",
            "nsPort": 443,
            "nsProtocol": "HTTPS",
            "nsSNIPS": "",
            "nsVIP": "",
            "openshift": true,
            "podIPsforServiceGroupMembers": false,
            "pullPolicy": "Always",
            "routeLabels": "",
            "serviceAccount": {
              "create": true
            },
            "serviceClass": [],
            "setAsDefaultIngressClass": false,
            "tolerations": [],
            "updateIngressStatus": false
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/citrix/citrix-k8s-ingress-bundle@sha256:6f413e337185bf1d3d918d1286d8b2e698c9b05eb43f2a93016376a52ed8b9a2",
      "bundle_path_digest": "sha256:6f413e337185bf1d3d918d1286d8b2e698c9b05eb43f2a93016376a52ed8b9a2",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:16:58.443000+00:00",
      "csv_description": "Citrix provides an ingress controller for Citrix ADC MPX (hardware), Citrix ADC VPX (virtualized), and Citrix ADC CPX (containerized) for on-prem and cloud deployments. It automatically configures one or more Citrix ADC based on the Ingress resource configuration. This operator can be used deploy Citrix Ingress Controller in an OpenShift environment.",
      "csv_display_name": "Citrix Ingress Controller",
      "csv_metadata_description": "Citrix provides an ingress controller for Citrix ADC MPX (hardware), Citrix ADC VPX (virtualized), and Citrix ADC CPX (containerized) for on-prem and cloud deployments. It automatically configures one or more Citrix ADC based on the Ingress resource configuration. This operator can be used deploy Citrix Ingress Controller in an Openshift environment.",
      "csv_name": "citrix-ingress-controller-operator.v1.18.5",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:55:36.003000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "citrix-ingress-controller-operator",
      "provided_apis": [
        {
          "group": "citrix.com",
          "kind": "CitrixIngressController",
          "plural": "citrixingresscontrollers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Citrix",
      "related_images": [
        {
          "digest": "sha256:2f6aaffb61cf9d29f89e63bf8b1111adab4527165beddfff5c618fba8ecfa10e",
          "image": "registry.connect.redhat.com/citrix/citrix-k8s-ingress-controller@sha256:2f6aaffb61cf9d29f89e63bf8b1111adab4527165beddfff5c618fba8ecfa10e",
          "name": "citrix-k8s-ingress-controller-2f6aaffb61cf9d29f89e63bf8b1111adab4527165beddfff5c618fba8ecfa10e-annotation"
        },
        {
          "digest": "sha256:71527b0033776ac8a68e9c52937cbdac5909a56058105bcb6489c4a0cb9e4f4d",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:71527b0033776ac8a68e9c52937cbdac5909a56058105bcb6489c4a0cb9e4f4d",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:2f6aaffb61cf9d29f89e63bf8b1111adab4527165beddfff5c618fba8ecfa10e",
          "image": "registry.connect.redhat.com/citrix/citrix-k8s-ingress-controller@sha256:2f6aaffb61cf9d29f89e63bf8b1111adab4527165beddfff5c618fba8ecfa10e",
          "name": "manager"
        },
        {
          "digest": "sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "image": "registry.connect.redhat.com/citrix/citrix-ingress-controller@sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "name": "cic"
        },
        {
          "digest": "sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "image": "registry.connect.redhat.com/citrix/citrix-adc-metrics-exporter@sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "name": "exporter"
        },
        {
          "digest": "sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "image": "registry.connect.redhat.com/citrix/citrix-ingress-controller@sha256:91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821",
          "name": "citrix-ingress-controller-91e7f337aab58db503e218ba3ac6b9f73173772314f57fc234ea340576426821-annotation"
        },
        {
          "digest": "sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "image": "registry.connect.redhat.com/citrix/citrix-adc-metrics-exporter@sha256:6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8",
          "name": "citrix-adc-metrics-exporter-6ce388d8f6324713b2db96385311d1e7a06c41dc54353c4ed81e6cf3dfdfb4b8-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.18.5",
      "version_original": "1.18.5"
    },
    {
      "_id": "61a57b933e9240fca360f551",
      "alm_examples": [
        {
          "api_version": "charts.cloudbees.com/v1alpha1",
          "kind": "CloudBeesCI",
          "metadata": {
            "name": "cloudbeesci-sample"
          },
          "spec": {
            "Agents": {
              "Enabled": true,
              "Image": {
                "dockerImage": "cloudbees/cloudbees-core-agent:2.289.3.2"
              },
              "SeparateNamespace": {
                "Create": false,
                "Enabled": false
              }
            },
            "Hibernation": {
              "Enabled": false,
              "Image": {
                "dockerImage": "cloudbees/managed-master-hibernation-monitor:247.c5dfce00a179"
              },
              "NodeSelector": {},
              "Tolerations": []
            },
            "Master": {
              "Enabled": true,
              "Image": {
                "dockerImage": "cloudbees/cloudbees-core-mm:2.289.3.2"
              }
            },
            "NetworkPolicy": {
              "Enabled": false,
              "JMXSelectors": [],
              "ingressControllerSelector": []
            },
            "OperationsCenter": {
              "AgentListenerPort": 50000,
              "Annotations": {},
              "CSRF": {
                "ProxyCompatibility": false
              },
              "CasC": {
                "ConfigMapName": "oc-casc-bundle",
                "Enabled": false
              },
              "ContainerPort": 8080,
              "Enabled": true,
              "ExtraConfigMaps": [],
              "ExtraContainers": [],
              "ExtraGroovyConfiguration": {},
              "ExtraVolumeMounts": [],
              "ExtraVolumes": [],
              "HealthProbeLivenessFailureThreshold": 12,
              "HealthProbes": true,
              "Image": {
                "dockerImage": "cloudbees/cloudbees-cloud-core-oc:2.289.3.2"
              },
              "Ingress": {
                "Annotations": {
                  "kubernetes.io/tls-acme": "false"
                },
                "Class": "nginx",
                "tls": {
                  "Enable": false
                }
              },
              "LoadBalancerSourceRanges": [
                "0.0.0.0/0"
              ],
              "Name": "cjoc",
              "NodeSelector": {},
              "Platform": "standard",
              "Protocol": "http",
              "Resources": {
                "Limits": {
                  "Cpu": 1,
                  "Memory": "2G"
                },
                "Requests": {
                  "Cpu": 1,
                  "Memory": "2G"
                }
              },
              "Route": {
                "tls": {
                  "Enable": false,
                  "InsecureEdgeTerminationPolicy": "Redirect",
                  "Termination": "edge"
                }
              },
              "ServiceAgentListenerPort": 50000,
              "ServiceAnnotations": {},
              "ServicePort": 80,
              "ServiceType": "ClusterIP",
              "Tolerations": []
            },
            "Persistence": {
              "AccessMode": "ReadWriteOnce",
              "Annotations": {},
              "Size": "20Gi"
            },
            "PodSecurityPolicy": {
              "Annotations": {},
              "Enabled": false
            },
            "Subdomain": false,
            "ingress-nginx": {
              "Enabled": false,
              "controller": {
                "admissionWebhooks": {
                  "patch": {
                    "nodeSelector": {
                      "kubernetes.io/os": "linux"
                    }
                  }
                },
                "ingressClass": "nginx",
                "nodeSelector": {
                  "kubernetes.io/os": "linux"
                },
                "service": {
                  "externalTrafficPolicy": "Local"
                }
              },
              "defaultBackend": {
                "nodeSelector": {
                  "kubernetes.io/os": "linux"
                }
              }
            },
            "nginx-ingress": {
              "Enabled": false,
              "controller": {
                "ingressClass": "nginx",
                "nodeSelector": {
                  "kubernetes.io/os": "linux"
                },
                "service": {
                  "externalTrafficPolicy": "Local"
                }
              },
              "defaultBackend": {
                "nodeSelector": {
                  "kubernetes.io/os": "linux"
                }
              }
            },
            "rbac": {
              "agentsServiceAccountName": "jenkins-agents",
              "hibernationMonitorServiceAccountName": "managed-master-hibernation-monitor",
              "install": true,
              "masterServiceAccountName": "jenkins",
              "serviceAccountName": "cjoc"
            },
            "sidecarinjector": {
              "Enabled": false
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cloudbees/cloudbees-core-modern@sha256:2cf058c819b40512094f84f4d374457455370ec4994d34cee6e39b9d87841f05",
      "bundle_path_digest": "sha256:2cf058c819b40512094f84f4d374457455370ec4994d34cee6e39b9d87841f05",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:17:07.414000+00:00",
      "csv_description": "CloudBees CI",
      "csv_display_name": "CloudBees CI",
      "csv_metadata_description": "",
      "csv_name": "cloudbees-ci.v3.34.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:56:02.140000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "cloudbees-ci",
      "provided_apis": [
        {
          "group": "charts.cloudbees.com",
          "kind": "CloudBeesCI",
          "plural": "cloudbeescis",
          "version": "v1alpha1"
        }
      ],
      "provider": "CloudBees",
      "related_images": [
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:bd0bd72e9e7807b0fa307de8a93a56967221fe2dd181bac02383f0f9be9120e4",
          "image": "registry.connect.redhat.com/cloudbees/cloudbees-ci-operator@sha256:bd0bd72e9e7807b0fa307de8a93a56967221fe2dd181bac02383f0f9be9120e4",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "3.34.1",
      "version_original": "3.34.1"
    },
    {
      "_id": "61a57bfb27e166330707d963",
      "alm_examples": [
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoDeBundle",
          "metadata": {
            "name": "my-bundle",
            "namespace": "my-namespace"
          },
          "spec": {
            "details": {
              "name": "my-bundle"
            }
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoDatabaseService",
          "metadata": {
            "name": "my-entando-database-service",
            "namespace": "my-namespace"
          },
          "spec": {
            "createDeployment": true,
            "databaseName": "my_database",
            "dbms": "postgresql"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoKeycloakServer",
          "metadata": {
            "name": "my-keycloak",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "environmentVariables": [],
            "replicas": 1,
            "standardImage": "redhat-sso"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoClusterInfrastructure",
          "metadata": {
            "name": "my-entando-cluster-infrastructure",
            "namespace": "my-namespace"
          },
          "spec": {
            "environmentVariables": [],
            "replicas": 1
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoPlugin",
          "metadata": {
            "name": "my-entando-plugin",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "healthCheckPath": "/management/health",
            "image": "entando/entando-avatar-plugin:6.0.5",
            "ingressHostName": "my-plugin.apps-crc.testing",
            "ingressPath": "/avatarPlugin",
            "replicas": 1,
            "roles": [
              {
                "code": "admin",
                "name": "user"
              },
              {
                "code": "user",
                "name": "user"
              }
            ],
            "securityLevel": "strict"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoApp",
          "metadata": {
            "name": "my-app",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "environmentVariables": [],
            "ingressHostName": "my-app.apps-crc.testing",
            "replicas": 1,
            "standardServerImage": "eap"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoAppPluginLink",
          "metadata": {
            "name": "my-link",
            "namespace": "my-namespace"
          },
          "spec": {
            "entandoAppName": "my-app",
            "entandoPluginName": "my-plugin"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoCompositeApp",
          "metadata": {
            "name": "my-entando-composite-app",
            "namespace": "my-namespace"
          },
          "spec": {
            "components": [
              {
                "kind": "EntandoDatabaseService",
                "metadata": {
                  "name": "inline-entando-database-service"
                },
                "spec": {
                  "createDeployment": true
                }
              },
              {
                "kind": "EntandoKeycloakServer",
                "metadata": {
                  "name": "inline-keycloak"
                },
                "spec": {
                  "standardImage": "redhat-sso"
                }
              },
              {
                "kind": "EntandoClusterInfrastructure",
                "metadata": {
                  "name": "inline-entando-cluster-infrastructure"
                },
                "spec": {}
              },
              {
                "kind": "EntandoApp",
                "metadata": {
                  "name": "inline-app"
                },
                "spec": {
                  "standardServerImage": "eap"
                }
              },
              {
                "kind": "EntandoPlugin",
                "metadata": {
                  "name": "inline-plugin"
                },
                "spec": {
                  "healthCheckPath": "/management/health",
                  "image": "entando/entando-avatar-plugin:6.0.5",
                  "ingressPath": "/avatarPlugin",
                  "roles": [
                    {
                      "code": "admin",
                      "name": "admin"
                    },
                    {
                      "code": "user",
                      "name": "user"
                    }
                  ]
                }
              },
              {
                "kind": "EntandoAppPluginLink",
                "metadata": {
                  "name": "inline-link"
                },
                "spec": {
                  "entandoAppName": "inline-app",
                  "entandoPluginName": "inline-plugin"
                }
              }
            ],
            "dbmsOverride": "postgresql",
            "ingressHostNameOverride": "entando.apps-crc.testing"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/entando/entando-operator@sha256:639e2d35738483c6c092ebe8636bbab50c0f2101bc06f2fe9a1c7f68b3ffc4a6",
      "bundle_path_digest": "sha256:639e2d35738483c6c092ebe8636bbab50c0f2101bc06f2fe9a1c7f68b3ffc4a6",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:18:51.222000+00:00",
      "csv_description": "## Entando\n\nThe Entando platform accelerates the development and lifecycle  management of fully modularized applications on Kubernetes. It  provides tools to help developers create and manage applications  using modular frontend and backend components.\nThe Entando Operator automates the installation, provisioning, and  configuration management of the components that make up an Entando  application. Specifically, the operator manages the following custom  resources:\n**EntandoKeycloakServers** for centralized authentication of frontend  and backend components. The operator can deploy Keycloak, or in certified  environments, Red Hat SSO servers that can then be used by subsequent  deployments as an OpenID Connect provider.\n**EntandoApps** for hosting an Entando application. EntandoApps are hosted on Wildfly or JBoss EAP containers, and can also be used to deploy custom  EntandoApp containers.\n**EntandoPlugins** for deploying microservices to customize or enhance your EntandoApp. Entando microservice plugins are deployed to your cluster, and  then linked to one or more EntandoApps.\n## Using the Operator\nThe Entando Operator can be deployed using the default settings without any  configuration. Once deployed, the operator can be customized by editing  the *configmap* and secrets.\n### ConfigMap: entando-operator-config\nThe 'entando-operator-config' ConfigMap can be added after deployment and any changes to it will be picked up by the operator on subsequent event processing. It supports the following keys:\n\n    entando.k8s.operator.gc.controller.pods: set this to \"false\" to keep controller pods after completion.\n    entando.k8s.operator.compliance.mode: set this to \"community\" if there is no requirement for Red Hat compliance.\n    entando.k8s.operator.image.pull.secrets: a comma separated list containing the names of pull secrets that will be linked to all service accounts.\n    entando.k8s.operator.disable.pvc.garbage.collection: set this to \"false\" if you want Persistent Volume Claims to be deleted with the custom resources they are associated with.\n    entando.k8s.operator.impose.default.limits: set this to \"false\" if there is no need to limit the resource consumption of pods on your cluster.\n    entando.k8s.operator.request.to.limit.ratio: a decimal number that default limits will be multiplied by to calculate default requests for resources.\n    entando.k8s.operator.force.db.password.reset: set this to \"true\" if you plan to delete Secrets from your namespace but you want to retain the Database they point to.\n    entando.k8s.operator.pull.policy.override: specify your preferred pullPolicy for images. The default is Always.\n    entando.tls.secret.name: The name of a standard TLS secret to use for HTTPS Ingresses. See the section entando-tls-secret.\n    entando.ca.secret.name: The name of a secret containing CA certificates. See the section entando-ca-cert-secret.\n    entando.assume.external.https.provider: Set this to \"true\" if your cloud provider handles HTTPS for you.\n    entando.use.auto.cert.generation: Set this to \"true\" to have Openshift use its internal CA to generate certificates for your Routes.\n    entando.default.routing.suffix: The domain name that can be suffixed to deployment names when the ingressHostName is omitted. Needs to be preconfigured on your DNS provider.\n    entando.pod.completion.timeout.seconds: The time it will take before Entando fails a run-to-completion Pod.\n    entando.pod.readiness.timeout.seconds: The time it will take before Entando fails a Service Pod.\n    entando.pod.shutdown.timeout.seconds: The time Entando will give a Pod to shutdown gracefully.\n\n\n### entando-pull-secret\nThe secret to be used to pull Entando images from the Red Hat container registry. The name of this secret is hard coded as it is required for the ClusterServiceVersion of this Operator\n### entando-tls-secret\nA standard Kubernetes TLS secret that will be used on all deployments where no custom TLS secret name is specified.\n### entando-ca-cert-secret\nThis is an opaque secret in the Entando Operator's namespace that contains the certificates of all trusted certificate authorities in your environment. This is generally used mainly for self signed certificates. As is generally the case for opaque secrets, there are no constraints on the keys in this secret. However, limit the files inside the secret to X509 certificates or certificate chains. The Entando Operator will load all of these files into a Java keystore that it then configures as the trust store for each container that uses Java.\n",
      "csv_display_name": "Entando Operator",
      "csv_metadata_description": "Processes EntandoKeycloakServer, EntandoApp and EntandoPlugin custom resources and deploys the relevant containers in the Kubernetes cluster.",
      "csv_name": "entando-k8s-operator.v6.3.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:57:54.492000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "entando-k8s-operator",
      "provided_apis": [
        {
          "group": "entando.org",
          "kind": "EntandoAppPluginLink",
          "plural": "entandoapppluginlinks",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoApp",
          "plural": "entandoapps",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoClusterInfrastructure",
          "plural": "entandoclusterinfrastructures",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoCompositeApp",
          "plural": "entandocompositeapps",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoDatabaseService",
          "plural": "entandodatabaseservices",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoDeBundle",
          "plural": "entandodebundles",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoKeycloakServer",
          "plural": "entandokeycloakservers",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoPlugin",
          "plural": "entandoplugins",
          "version": "v1"
        }
      ],
      "provider": "Entando, Inc",
      "related_images": [],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "6.3.2",
      "version_original": "6.3.2"
    },
    {
      "_id": "61a57c0427e166330707d964",
      "alm_examples": [
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoDeBundle",
          "metadata": {
            "name": "my-bundle",
            "namespace": "my-namespace"
          },
          "spec": {
            "details": {
              "name": "my-bundle"
            }
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoDatabaseService",
          "metadata": {
            "name": "my-entando-database-service",
            "namespace": "my-namespace"
          },
          "spec": {
            "createDeployment": true,
            "databaseName": "my_database",
            "dbms": "postgresql"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoKeycloakServer",
          "metadata": {
            "name": "my-keycloak",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "environmentVariables": [],
            "replicas": 1,
            "standardImage": "redhat-sso"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoClusterInfrastructure",
          "metadata": {
            "name": "my-entando-cluster-infrastructure",
            "namespace": "my-namespace"
          },
          "spec": {
            "environmentVariables": [],
            "replicas": 1
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoPlugin",
          "metadata": {
            "name": "my-entando-plugin",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "healthCheckPath": "/management/health",
            "image": "entando/entando-avatar-plugin:6.0.5",
            "ingressHostName": "my-plugin.apps-crc.testing",
            "ingressPath": "/avatarPlugin",
            "replicas": 1,
            "roles": [
              {
                "code": "admin",
                "name": "user"
              },
              {
                "code": "user",
                "name": "user"
              }
            ],
            "securityLevel": "strict"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoApp",
          "metadata": {
            "name": "my-app",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "environmentVariables": [],
            "ingressHostName": "my-app.apps-crc.testing",
            "replicas": 1,
            "standardServerImage": "eap"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoAppPluginLink",
          "metadata": {
            "name": "my-link",
            "namespace": "my-namespace"
          },
          "spec": {
            "entandoAppName": "my-app",
            "entandoPluginName": "my-plugin"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoCompositeApp",
          "metadata": {
            "name": "my-entando-composite-app",
            "namespace": "my-namespace"
          },
          "spec": {
            "components": [
              {
                "kind": "EntandoDatabaseService",
                "metadata": {
                  "name": "inline-entando-database-service"
                },
                "spec": {
                  "createDeployment": true
                }
              },
              {
                "kind": "EntandoKeycloakServer",
                "metadata": {
                  "name": "inline-keycloak"
                },
                "spec": {
                  "standardImage": "redhat-sso"
                }
              },
              {
                "kind": "EntandoClusterInfrastructure",
                "metadata": {
                  "name": "inline-entando-cluster-infrastructure"
                },
                "spec": {}
              },
              {
                "kind": "EntandoApp",
                "metadata": {
                  "name": "inline-app"
                },
                "spec": {
                  "standardServerImage": "eap"
                }
              },
              {
                "kind": "EntandoPlugin",
                "metadata": {
                  "name": "inline-plugin"
                },
                "spec": {
                  "healthCheckPath": "/management/health",
                  "image": "entando/entando-avatar-plugin:6.0.5",
                  "ingressPath": "/avatarPlugin",
                  "roles": [
                    {
                      "code": "admin",
                      "name": "admin"
                    },
                    {
                      "code": "user",
                      "name": "user"
                    }
                  ]
                }
              },
              {
                "kind": "EntandoAppPluginLink",
                "metadata": {
                  "name": "inline-link"
                },
                "spec": {
                  "entandoAppName": "inline-app",
                  "entandoPluginName": "inline-plugin"
                }
              }
            ],
            "dbmsOverride": "postgresql",
            "ingressHostNameOverride": "entando.apps-crc.testing"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/entando/entando-operator@sha256:110de9cf2e6ecc1d3f6bff990ec9eb890b26c6ade5c03a232421d30e6bbace57",
      "bundle_path_digest": "sha256:110de9cf2e6ecc1d3f6bff990ec9eb890b26c6ade5c03a232421d30e6bbace57",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:19:00.194000+00:00",
      "csv_description": "## Entando\n\nThe Entando platform accelerates the development and lifecycle  management of fully modularized applications on Kubernetes. It  provides tools to help developers create and manage applications  using modular frontend and backend components.\nThe Entando Operator automates the installation, provisioning, and  configuration management of the components that make up an Entando  application. Specifically, the operator manages the following custom  resources:\n**EntandoKeycloakServers** for centralized authentication of frontend  and backend components. The operator can deploy Keycloak, or in certified  environments, Red Hat SSO servers that can then be used by subsequent  deployments as an OpenID Connect provider.\n**EntandoApps** for hosting an Entando application. EntandoApps are hosted on Wildfly or JBoss EAP containers, and can also be used to deploy custom  EntandoApp containers.\n**EntandoPlugins** for deploying microservices to customize or enhance your EntandoApp. Entando microservice plugins are deployed to your cluster, and  then linked to one or more EntandoApps.\n## Using the Operator\nThe Entando Operator can be deployed using the default settings without any  configuration. Once deployed, the operator can be customized by editing  the *configmap* and secrets.\n### ConfigMap: entando-operator-config\nThe 'entando-operator-config' ConfigMap can be added after deployment and any changes to it will be picked up by the operator on subsequent event processing. It supports the following keys:\n\n    entando.k8s.operator.gc.controller.pods: set this to \"false\" to keep controller pods after completion.\n    entando.k8s.operator.compliance.mode: set this to \"community\" if there is no requirement for Red Hat compliance.\n    entando.k8s.operator.image.pull.secrets: a comma separated list containing the names of pull secrets that will be linked to all service accounts.\n    entando.k8s.operator.disable.pvc.garbage.collection: set this to \"false\" if you want Persistent Volume Claims to be deleted with the custom resources they are associated with.\n    entando.k8s.operator.impose.default.limits: set this to \"false\" if there is no need to limit the resource consumption of pods on your cluster.\n    entando.k8s.operator.request.to.limit.ratio: a decimal number that default limits will be multiplied by to calculate default requests for resources.\n    entando.k8s.operator.force.db.password.reset: set this to \"true\" if you plan to delete Secrets from your namespace but you want to retain the Database they point to.\n    entando.k8s.operator.pull.policy.override: specify your preferred pullPolicy for images. The default is Always.\n    entando.tls.secret.name: The name of a standard TLS secret to use for HTTPS Ingresses. See the section entando-tls-secret.\n    entando.ca.secret.name: The name of a secret containing CA certificates. See the section entando-ca-cert-secret.\n    entando.assume.external.https.provider: Set this to \"true\" if your cloud provider handles HTTPS for you.\n    entando.use.auto.cert.generation: Set this to \"true\" to have Openshift use its internal CA to generate certificates for your Routes.\n    entando.default.routing.suffix: The domain name that can be suffixed to deployment names when the ingressHostName is omitted. Needs to be preconfigured on your DNS provider.\n    entando.pod.completion.timeout.seconds: The time it will take before Entando fails a run-to-completion Pod.\n    entando.pod.readiness.timeout.seconds: The time it will take before Entando fails a Service Pod.\n    entando.pod.shutdown.timeout.seconds: The time Entando will give a Pod to shutdown gracefully.\n\n\n### entando-pull-secret\nThe secret to be used to pull Entando images from the Red Hat container registry. The name of this secret is hard coded as it is required for the ClusterServiceVersion of this Operator\n### entando-tls-secret\nA standard Kubernetes TLS secret that will be used on all deployments where no custom TLS secret name is specified.\n### entando-ca-cert-secret\nThis is an opaque secret in the Entando Operator's namespace that contains the certificates of all trusted certificate authorities in your environment. This is generally used mainly for self signed certificates. As is generally the case for opaque secrets, there are no constraints on the keys in this secret. However, limit the files inside the secret to X509 certificates or certificate chains. The Entando Operator will load all of these files into a Java keystore that it then configures as the trust store for each container that uses Java.\n",
      "csv_display_name": "Entando Operator",
      "csv_metadata_description": "Processes EntandoKeycloakServer, EntandoApp and EntandoPlugin custom resources and deploys the relevant containers in the Kubernetes cluster.",
      "csv_name": "entando-k8s-operator.v6.3.2-pr2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:57:59.224000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "entando-k8s-operator",
      "provided_apis": [
        {
          "group": "entando.org",
          "kind": "EntandoApp",
          "plural": "entandoapps",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoClusterInfrastructure",
          "plural": "entandoclusterinfrastructures",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoCompositeApp",
          "plural": "entandocompositeapps",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoDatabaseService",
          "plural": "entandodatabaseservices",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoDeBundle",
          "plural": "entandodebundles",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoKeycloakServer",
          "plural": "entandokeycloakservers",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoPlugin",
          "plural": "entandoplugins",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoAppPluginLink",
          "plural": "entandoapppluginlinks",
          "version": "v1"
        }
      ],
      "provider": "Entando, Inc",
      "related_images": [
        {
          "digest": "sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "image": "entando/entando-k8s-controller-coordinator@sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "name": "entando-k8s-controller-coordinator-c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839-annotation"
        },
        {
          "digest": "sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "image": "entando/entando-k8s-controller-coordinator@sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "name": "entando-operator"
        },
        {
          "digest": "sha256:570bce7dc649ac7ac85e7ecb196aabc281c77a94590aa7df7d9746869ce757ea",
          "image": "registry.redhat.io/rhel8/mysql-80@sha256:570bce7dc649ac7ac85e7ecb196aabc281c77a94590aa7df7d9746869ce757ea",
          "name": "rhel8_mysql_80"
        },
        {
          "digest": "sha256:f4e5c728b644bf1888ec8086424852ed74b5596a511be29e636fb10218fc9b6f",
          "image": "registry.redhat.io/rhel8/postgresql-12@sha256:f4e5c728b644bf1888ec8086424852ed74b5596a511be29e636fb10218fc9b6f",
          "name": "rhel8_postgresql_12"
        },
        {
          "digest": "sha256:1ca90c09302b9cadf8950278d92ad4d7f3a14f02dea8704320794aa77ada8631",
          "image": "docker.io/entando/app-builder@sha256:1ca90c09302b9cadf8950278d92ad4d7f3a14f02dea8704320794aa77ada8631",
          "name": "app_builder"
        },
        {
          "digest": "sha256:668191fc86b090452baaba18ec7bbc3d07df5a99750e0c5b98759599d565cfbe",
          "image": "docker.io/entando/entando-component-manager@sha256:668191fc86b090452baaba18ec7bbc3d07df5a99750e0c5b98759599d565cfbe",
          "name": "entando_component_manager"
        },
        {
          "digest": "sha256:1f0e35d7f7ee8123721cf8e80ac96ac2f594f21a2b68cf9e720917d090c8095e",
          "image": "docker.io/entando/entando-de-app-eap@sha256:1f0e35d7f7ee8123721cf8e80ac96ac2f594f21a2b68cf9e720917d090c8095e",
          "name": "entando_de_app_eap"
        },
        {
          "digest": "sha256:c68d3b129fc625f5d1ee10ed2a107e28c145049d4b513dcdb2c736555025e339",
          "image": "docker.io/entando/entando-k8s-app-controller@sha256:c68d3b129fc625f5d1ee10ed2a107e28c145049d4b513dcdb2c736555025e339",
          "name": "entando_k8s_app_controller"
        },
        {
          "digest": "sha256:aa7ba0861705213434e610530c5bf5da1bdb33f1834d3c346174f5a28145c0bd",
          "image": "docker.io/entando/entando-k8s-app-plugin-link-controller@sha256:aa7ba0861705213434e610530c5bf5da1bdb33f1834d3c346174f5a28145c0bd",
          "name": "entando_k8s_app_plugin_link_controller"
        },
        {
          "digest": "sha256:86dbea6696349d7b2393e12bacef4d1acec2dd3f8551e397fa26c92706a18dd3",
          "image": "docker.io/entando/entando-k8s-cluster-infrastructure-controller@sha256:86dbea6696349d7b2393e12bacef4d1acec2dd3f8551e397fa26c92706a18dd3",
          "name": "entando_k8s_cluster_infrastructure_controller"
        },
        {
          "digest": "sha256:4bc6797bb41b3e407b64530c3cff7a78f3fc2c22863caad9c606ccd650310b61",
          "image": "docker.io/entando/entando-k8s-composite-app-controller@sha256:4bc6797bb41b3e407b64530c3cff7a78f3fc2c22863caad9c606ccd650310b61",
          "name": "entando_k8s_composite_app_controller"
        },
        {
          "digest": "sha256:58ca4ad2fca83a715aba9b68609f9056f633d556eb9845b3aff5c05769369539",
          "image": "docker.io/entando/entando-k8s-database-service-controller@sha256:58ca4ad2fca83a715aba9b68609f9056f633d556eb9845b3aff5c05769369539",
          "name": "entando_k8s_database_service_controller"
        },
        {
          "digest": "sha256:8ae47dbf93201965106663299f06daad544982fa244d4a0f365a1b717727e5ed",
          "image": "docker.io/entando/entando-k8s-dbjob@sha256:8ae47dbf93201965106663299f06daad544982fa244d4a0f365a1b717727e5ed",
          "name": "entando_k8s_dbjob"
        },
        {
          "digest": "sha256:f1ed42001260802353197433cea7df4c2d0e5fd9bcd926bb5ae7c654dfad2ffe",
          "image": "docker.io/entando/entando-k8s-keycloak-controller@sha256:f1ed42001260802353197433cea7df4c2d0e5fd9bcd926bb5ae7c654dfad2ffe",
          "name": "entando_k8s_keycloak_controller"
        },
        {
          "digest": "sha256:a20c753dda86e0f54f210e446b404733045ba426fc7186dc3936daed8224fbcb",
          "image": "docker.io/entando/entando-k8s-plugin-controller@sha256:a20c753dda86e0f54f210e446b404733045ba426fc7186dc3936daed8224fbcb",
          "name": "entando_k8s_plugin_controller"
        },
        {
          "digest": "sha256:775391f0005e64764288bfe007d9ea576f13618c02ea400d030a7502cfb551bd",
          "image": "docker.io/entando/entando-k8s-service@sha256:775391f0005e64764288bfe007d9ea576f13618c02ea400d030a7502cfb551bd",
          "name": "entando_k8s_service"
        },
        {
          "digest": "sha256:3692adb3694b3bf278bed7a678c9d0eaa0aba8e3e3ed4117ca04156525bcac72",
          "image": "docker.io/entando/entando-redhat-sso@sha256:3692adb3694b3bf278bed7a678c9d0eaa0aba8e3e3ed4117ca04156525bcac72",
          "name": "entando_redhat_sso"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "6.3.2-pr2",
      "version_original": "6.3.2-pr2"
    },
    {
      "_id": "61a57c0c3e9240fca360f553",
      "alm_examples": [
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoDeBundle",
          "metadata": {
            "name": "my-bundle",
            "namespace": "my-namespace"
          },
          "spec": {
            "details": {
              "name": "my-bundle"
            }
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoDatabaseService",
          "metadata": {
            "name": "my-entando-database-service",
            "namespace": "my-namespace"
          },
          "spec": {
            "createDeployment": true,
            "databaseName": "my_database",
            "dbms": "postgresql"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoKeycloakServer",
          "metadata": {
            "name": "my-keycloak",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "environmentVariables": [],
            "replicas": 1,
            "standardImage": "redhat-sso"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoClusterInfrastructure",
          "metadata": {
            "name": "my-entando-cluster-infrastructure",
            "namespace": "my-namespace"
          },
          "spec": {
            "environmentVariables": [],
            "replicas": 1
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoPlugin",
          "metadata": {
            "name": "my-entando-plugin",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "healthCheckPath": "/management/health",
            "image": "entando/entando-avatar-plugin:6.0.5",
            "ingressHostName": "my-plugin.apps-crc.testing",
            "ingressPath": "/avatarPlugin",
            "replicas": 1,
            "roles": [
              {
                "code": "admin",
                "name": "user"
              },
              {
                "code": "user",
                "name": "user"
              }
            ],
            "securityLevel": "strict"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoApp",
          "metadata": {
            "name": "my-app",
            "namespace": "my-namespace"
          },
          "spec": {
            "dbms": "postgresql",
            "environmentVariables": [],
            "ingressHostName": "my-app.apps-crc.testing",
            "replicas": 1,
            "standardServerImage": "eap"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoAppPluginLink",
          "metadata": {
            "name": "my-link",
            "namespace": "my-namespace"
          },
          "spec": {
            "entandoAppName": "my-app",
            "entandoPluginName": "my-plugin"
          }
        },
        {
          "api_version": "entando.org/v1",
          "kind": "EntandoCompositeApp",
          "metadata": {
            "name": "my-entando-composite-app",
            "namespace": "my-namespace"
          },
          "spec": {
            "components": [
              {
                "kind": "EntandoDatabaseService",
                "metadata": {
                  "name": "inline-entando-database-service"
                },
                "spec": {
                  "createDeployment": true
                }
              },
              {
                "kind": "EntandoKeycloakServer",
                "metadata": {
                  "name": "inline-keycloak"
                },
                "spec": {
                  "standardImage": "redhat-sso"
                }
              },
              {
                "kind": "EntandoClusterInfrastructure",
                "metadata": {
                  "name": "inline-entando-cluster-infrastructure"
                },
                "spec": {}
              },
              {
                "kind": "EntandoApp",
                "metadata": {
                  "name": "inline-app"
                },
                "spec": {
                  "standardServerImage": "eap"
                }
              },
              {
                "kind": "EntandoPlugin",
                "metadata": {
                  "name": "inline-plugin"
                },
                "spec": {
                  "healthCheckPath": "/management/health",
                  "image": "entando/entando-avatar-plugin:6.0.5",
                  "ingressPath": "/avatarPlugin",
                  "roles": [
                    {
                      "code": "admin",
                      "name": "admin"
                    },
                    {
                      "code": "user",
                      "name": "user"
                    }
                  ]
                }
              },
              {
                "kind": "EntandoAppPluginLink",
                "metadata": {
                  "name": "inline-link"
                },
                "spec": {
                  "entandoAppName": "inline-app",
                  "entandoPluginName": "inline-plugin"
                }
              }
            ],
            "dbmsOverride": "postgresql",
            "ingressHostNameOverride": "entando.apps-crc.testing"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/entando/entando-operator@sha256:66f8db604ac4d104cd88d786c4a9437dd1a22b3d7f8fd856c1251191f7d4856a",
      "bundle_path_digest": "sha256:66f8db604ac4d104cd88d786c4a9437dd1a22b3d7f8fd856c1251191f7d4856a",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "beta",
      "creation_date": "2021-11-30T01:19:08.409000+00:00",
      "csv_description": "## Entando\n\nThe Entando platform accelerates the development and lifecycle  management of fully modularized applications on Kubernetes. It  provides tools to help developers create and manage applications  using modular frontend and backend components.\nThe Entando Operator automates the installation, provisioning, and  configuration management of the components that make up an Entando  application. Specifically, the operator manages the following custom  resources:\n**EntandoKeycloakServers** for centralized authentication of frontend  and backend components. The operator can deploy Keycloak, or in certified  environments, Red Hat SSO servers that can then be used by subsequent  deployments as an OpenID Connect provider.\n**EntandoApps** for hosting an Entando application. EntandoApps are hosted on Wildfly or JBoss EAP containers, and can also be used to deploy custom  EntandoApp containers.\n**EntandoPlugins** for deploying microservices to customize or enhance your EntandoApp. Entando microservice plugins are deployed to your cluster, and  then linked to one or more EntandoApps.\n## Using the Operator\nThe Entando Operator can be deployed using the default settings without any  configuration. Once deployed, the operator can be customized by editing  the *configmap* and secrets.\n### ConfigMap: entando-operator-config\nThe 'entando-operator-config' ConfigMap can be added after deployment and any changes to it will be picked up by the operator on subsequent event processing. It supports the following keys:\n\n    entando.k8s.operator.gc.controller.pods: set this to \"false\" to keep controller pods after completion.\n    entando.k8s.operator.compliance.mode: set this to \"community\" if there is no requirement for Red Hat compliance.\n    entando.k8s.operator.image.pull.secrets: a comma separated list containing the names of pull secrets that will be linked to all service accounts.\n    entando.k8s.operator.disable.pvc.garbage.collection: set this to \"false\" if you want Persistent Volume Claims to be deleted with the custom resources they are associated with.\n    entando.k8s.operator.impose.default.limits: set this to \"false\" if there is no need to limit the resource consumption of pods on your cluster.\n    entando.k8s.operator.request.to.limit.ratio: a decimal number that default limits will be multiplied by to calculate default requests for resources.\n    entando.k8s.operator.force.db.password.reset: set this to \"true\" if you plan to delete Secrets from your namespace but you want to retain the Database they point to.\n    entando.k8s.operator.pull.policy.override: specify your preferred pullPolicy for images. The default is Always.\n    entando.tls.secret.name: The name of a standard TLS secret to use for HTTPS Ingresses. See the section entando-tls-secret.\n    entando.ca.secret.name: The name of a secret containing CA certificates. See the section entando-ca-cert-secret.\n    entando.assume.external.https.provider: Set this to \"true\" if your cloud provider handles HTTPS for you.\n    entando.use.auto.cert.generation: Set this to \"true\" to have Openshift use its internal CA to generate certificates for your Routes.\n    entando.default.routing.suffix: The domain name that can be suffixed to deployment names when the ingressHostName is omitted. Needs to be preconfigured on your DNS provider.\n    entando.pod.completion.timeout.seconds: The time it will take before Entando fails a run-to-completion Pod.\n    entando.pod.readiness.timeout.seconds: The time it will take before Entando fails a Service Pod.\n    entando.pod.shutdown.timeout.seconds: The time Entando will give a Pod to shutdown gracefully.\n\n\n### entando-pull-secret\nThe secret to be used to pull Entando images from the Red Hat container registry. The name of this secret is hard coded as it is required for the ClusterServiceVersion of this Operator\n### entando-tls-secret\nA standard Kubernetes TLS secret that will be used on all deployments where no custom TLS secret name is specified.\n### entando-ca-cert-secret\nThis is an opaque secret in the Entando Operator's namespace that contains the certificates of all trusted certificate authorities in your environment. This is generally used mainly for self signed certificates. As is generally the case for opaque secrets, there are no constraints on the keys in this secret. However, limit the files inside the secret to X509 certificates or certificate chains. The Entando Operator will load all of these files into a Java keystore that it then configures as the trust store for each container that uses Java.\n",
      "csv_display_name": "Entando Operator",
      "csv_metadata_description": "Processes EntandoKeycloakServer, EntandoApp and EntandoPlugin custom resources and deploys the relevant containers in the Kubernetes cluster.",
      "csv_name": "entando-k8s-operator.v6.3.2-pr4",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:58:04.847000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "entando-k8s-operator",
      "provided_apis": [
        {
          "group": "entando.org",
          "kind": "EntandoCompositeApp",
          "plural": "entandocompositeapps",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoDatabaseService",
          "plural": "entandodatabaseservices",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoDeBundle",
          "plural": "entandodebundles",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoKeycloakServer",
          "plural": "entandokeycloakservers",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoPlugin",
          "plural": "entandoplugins",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoAppPluginLink",
          "plural": "entandoapppluginlinks",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoApp",
          "plural": "entandoapps",
          "version": "v1"
        },
        {
          "group": "entando.org",
          "kind": "EntandoClusterInfrastructure",
          "plural": "entandoclusterinfrastructures",
          "version": "v1"
        }
      ],
      "provider": "Entando, Inc",
      "related_images": [
        {
          "digest": "sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "image": "entando/entando-k8s-controller-coordinator@sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "name": "entando-k8s-controller-coordinator-c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839-annotation"
        },
        {
          "digest": "sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "image": "entando/entando-k8s-controller-coordinator@sha256:c8a93ebd69af3cf822dd7d4fcce5d4241cd8dca229c4e25c771bcfecca916839",
          "name": "entando-operator"
        },
        {
          "digest": "sha256:570bce7dc649ac7ac85e7ecb196aabc281c77a94590aa7df7d9746869ce757ea",
          "image": "registry.redhat.io/rhel8/mysql-80@sha256:570bce7dc649ac7ac85e7ecb196aabc281c77a94590aa7df7d9746869ce757ea",
          "name": "rhel8_mysql_80"
        },
        {
          "digest": "sha256:f4e5c728b644bf1888ec8086424852ed74b5596a511be29e636fb10218fc9b6f",
          "image": "registry.redhat.io/rhel8/postgresql-12@sha256:f4e5c728b644bf1888ec8086424852ed74b5596a511be29e636fb10218fc9b6f",
          "name": "rhel8_postgresql_12"
        },
        {
          "digest": "sha256:1ca90c09302b9cadf8950278d92ad4d7f3a14f02dea8704320794aa77ada8631",
          "image": "docker.io/entando/app-builder@sha256:1ca90c09302b9cadf8950278d92ad4d7f3a14f02dea8704320794aa77ada8631",
          "name": "app_builder"
        },
        {
          "digest": "sha256:668191fc86b090452baaba18ec7bbc3d07df5a99750e0c5b98759599d565cfbe",
          "image": "docker.io/entando/entando-component-manager@sha256:668191fc86b090452baaba18ec7bbc3d07df5a99750e0c5b98759599d565cfbe",
          "name": "entando_component_manager"
        },
        {
          "digest": "sha256:1f0e35d7f7ee8123721cf8e80ac96ac2f594f21a2b68cf9e720917d090c8095e",
          "image": "docker.io/entando/entando-de-app-eap@sha256:1f0e35d7f7ee8123721cf8e80ac96ac2f594f21a2b68cf9e720917d090c8095e",
          "name": "entando_de_app_eap"
        },
        {
          "digest": "sha256:c68d3b129fc625f5d1ee10ed2a107e28c145049d4b513dcdb2c736555025e339",
          "image": "docker.io/entando/entando-k8s-app-controller@sha256:c68d3b129fc625f5d1ee10ed2a107e28c145049d4b513dcdb2c736555025e339",
          "name": "entando_k8s_app_controller"
        },
        {
          "digest": "sha256:aa7ba0861705213434e610530c5bf5da1bdb33f1834d3c346174f5a28145c0bd",
          "image": "docker.io/entando/entando-k8s-app-plugin-link-controller@sha256:aa7ba0861705213434e610530c5bf5da1bdb33f1834d3c346174f5a28145c0bd",
          "name": "entando_k8s_app_plugin_link_controller"
        },
        {
          "digest": "sha256:86dbea6696349d7b2393e12bacef4d1acec2dd3f8551e397fa26c92706a18dd3",
          "image": "docker.io/entando/entando-k8s-cluster-infrastructure-controller@sha256:86dbea6696349d7b2393e12bacef4d1acec2dd3f8551e397fa26c92706a18dd3",
          "name": "entando_k8s_cluster_infrastructure_controller"
        },
        {
          "digest": "sha256:4bc6797bb41b3e407b64530c3cff7a78f3fc2c22863caad9c606ccd650310b61",
          "image": "docker.io/entando/entando-k8s-composite-app-controller@sha256:4bc6797bb41b3e407b64530c3cff7a78f3fc2c22863caad9c606ccd650310b61",
          "name": "entando_k8s_composite_app_controller"
        },
        {
          "digest": "sha256:58ca4ad2fca83a715aba9b68609f9056f633d556eb9845b3aff5c05769369539",
          "image": "docker.io/entando/entando-k8s-database-service-controller@sha256:58ca4ad2fca83a715aba9b68609f9056f633d556eb9845b3aff5c05769369539",
          "name": "entando_k8s_database_service_controller"
        },
        {
          "digest": "sha256:8ae47dbf93201965106663299f06daad544982fa244d4a0f365a1b717727e5ed",
          "image": "docker.io/entando/entando-k8s-dbjob@sha256:8ae47dbf93201965106663299f06daad544982fa244d4a0f365a1b717727e5ed",
          "name": "entando_k8s_dbjob"
        },
        {
          "digest": "sha256:f1ed42001260802353197433cea7df4c2d0e5fd9bcd926bb5ae7c654dfad2ffe",
          "image": "docker.io/entando/entando-k8s-keycloak-controller@sha256:f1ed42001260802353197433cea7df4c2d0e5fd9bcd926bb5ae7c654dfad2ffe",
          "name": "entando_k8s_keycloak_controller"
        },
        {
          "digest": "sha256:a20c753dda86e0f54f210e446b404733045ba426fc7186dc3936daed8224fbcb",
          "image": "docker.io/entando/entando-k8s-plugin-controller@sha256:a20c753dda86e0f54f210e446b404733045ba426fc7186dc3936daed8224fbcb",
          "name": "entando_k8s_plugin_controller"
        },
        {
          "digest": "sha256:775391f0005e64764288bfe007d9ea576f13618c02ea400d030a7502cfb551bd",
          "image": "docker.io/entando/entando-k8s-service@sha256:775391f0005e64764288bfe007d9ea576f13618c02ea400d030a7502cfb551bd",
          "name": "entando_k8s_service"
        },
        {
          "digest": "sha256:3692adb3694b3bf278bed7a678c9d0eaa0aba8e3e3ed4117ca04156525bcac72",
          "image": "docker.io/entando/entando-redhat-sso@sha256:3692adb3694b3bf278bed7a678c9d0eaa0aba8e3e3ed4117ca04156525bcac72",
          "name": "entando_redhat_sso"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "6.3.2-pr4",
      "version_original": "6.3.2-pr4"
    },
    {
      "_id": "61a57c153e9240fca360f554",
      "alm_examples": [
        {
          "api_version": "federatorai.containers.ai/v1alpha1",
          "kind": "AlamedaService",
          "metadata": {
            "name": "my-alamedaservice"
          },
          "spec": {
            "alamedaAi": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "alamedaInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "100Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "fedemeterInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "imageLocation": "registry.connect.redhat.com/prophetstor",
            "keycode": {
              "codeNumber": ""
            },
            "storages": [
              {
                "accessMode": [
                  "ReadWriteOnce"
                ],
                "size": "2Gi",
                "type": "pvc",
                "usage": "log"
              }
            ],
            "version": "v4.6.1-b1655-2"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/prophetstor/federatorai-operator-bundle@sha256:66fa5c8e525ce32eef696b286ba2278c0fca6be668bda76d28f5f78dc45c37e3",
      "bundle_path_digest": "sha256:66fa5c8e525ce32eef696b286ba2278c0fca6be668bda76d28f5f78dc45c37e3",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:19:17.150000+00:00",
      "csv_description": "Federator.ai helps enterprises optimize cloud resources, maximize application performance, and save significant cost without excessive over-provisioning or under-provisioning of resources, meeting the service-level requirements of their applications.\n\nEnterprises often lack understanding of the resources needed to support their applications. This leads to either excessive over-provisioning or under-provisioning of resources (CPU, memory, storage). Using machine learning, Federator.ai determines the optimal cloud resources needed to support any workload on OpenShift and helps users find the best-cost instances from cloud providers for their applications.\n\n\n**Multi-layer workload prediction**\n\nUsing machine learning and math-based algorithms, Federator.ai predicts containerized application and cluster node resource usage as the basis for resource recommendations at application level as well as at cluster node level. Federator.ai supports prediction for both physical/virtual CPUs and memories.\n\n\n**Auto-scaling via resource recommendation**\n\nFederator.ai utilizes the predicted resource usage to recommend the right number and size of pods for applications. Integrated with Datadog's WPA, applications are automatically scaled to meet the predicted resource usage.\n\n\n**Application-aware recommendation execution**\n\nOptimizing the resource usage and performance goals, Federator.ai uses application specific metrics for workload prediction and pod capacity estimation to auto-scale the right number of pods for best performance without overprovisioning.\n\n\n**Multi-cloud Cost Analysis**\n\nWith resource usage prediction, Federator.ai analyzes potential cost of a cluster on different public cloud providers. It also recommend appropriate cluster nodes and instance types based on resource usage.\n\n\n**Custom Datadog/Sysdig Dashboards**\n\nPredefined custom Datadog/Sysdig Dashboards for workload prediction/recommendation visualization for cluster nodes and applications.\n\n\n**Additional resources**\n\nWant more product information? Explore detailed information about using this product and where to find additional help.\n\n* [Federator.ai Datasheet](https://prophetstor.com/wp-content/uploads/datasheets/Federator.ai.pdf)\n* [Quick Start Guide](https://prophetstor.com/wp-content/uploads/documentation/Federator.ai/Latest%20Version/ProphetStor%20Federator.ai%20Quick%20Installation%20Guide.pdf)\n* [Installation Guide](https://prophetstor.com/wp-content/uploads/2021/07/ProphetStor-Federator.ai-v4.6.1-Installation-Guide-v1.0.pdf)\n* [User Guide](https://prophetstor.com/wp-content/uploads/2021/07/Federator.ai-4.6.1-User-Guide.pdf)\n* [Company Information](https://www.prophetstor.com/)\n\n\n### Prerequisite\n*  The [Openshift](https://www.openshift.com) version 4.4.x or later if using OpenShift platform.\n*  The [Kubernetes](https://kubernetes.io/) version 1.16 or later if using Kubernetes environment.",
      "csv_display_name": "Federator.ai",
      "csv_metadata_description": "Federator.ai Operator provides easy configuration and management of AI-based Kubernetes resource orchestrator",
      "csv_name": "federatorai.v4.6.1-4",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:58:09.321000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "federatorai-certified",
      "provided_apis": [
        {
          "group": "federatorai.containers.ai",
          "kind": "AlamedaService",
          "version": "v1alpha1"
        }
      ],
      "provider": "ProphetStor Data Services, Inc.",
      "related_images": [
        {
          "digest": "sha256:2c7070dcd426598c97e528b4fbc79de5585c4aeb4e5902406435a9e6d7e3bf0d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:2c7070dcd426598c97e528b4fbc79de5585c4aeb4e5902406435a9e6d7e3bf0d",
          "name": "federatorai-operator-2c7070dcd426598c97e528b4fbc79de5585c4aeb4e5902406435a9e6d7e3bf0d-annotation"
        },
        {
          "digest": "sha256:2c7070dcd426598c97e528b4fbc79de5585c4aeb4e5902406435a9e6d7e3bf0d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:2c7070dcd426598c97e528b4fbc79de5585c4aeb4e5902406435a9e6d7e3bf0d",
          "name": "federatorai-operator"
        },
        {
          "digest": "sha256:2c7070dcd426598c97e528b4fbc79de5585c4aeb4e5902406435a9e6d7e3bf0d",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:2c7070dcd426598c97e528b4fbc79de5585c4aeb4e5902406435a9e6d7e3bf0d",
          "name": "upgrader"
        },
        {
          "digest": "sha256:17aed4cd6a97f8ee5655660d2d13911e7c99c9f304b2fa09de891e4bf3141c69",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:17aed4cd6a97f8ee5655660d2d13911e7c99c9f304b2fa09de891e4bf3141c69",
          "name": "ai_dispatcher"
        },
        {
          "digest": "sha256:0f946dde5fcb2f631153ea778ea24cac3e53b052a6bc97d09a0d2c04a8860446",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai@sha256:0f946dde5fcb2f631153ea778ea24cac3e53b052a6bc97d09a0d2c04a8860446",
          "name": "ai_engine"
        },
        {
          "digest": "sha256:222f6166fef3c74f187446adf5ab6361a03231eabab88a54ebd8f6f2a0ebd5c4",
          "image": "registry.connect.redhat.com/prophetstor/alameda-analyzer-ubi@sha256:222f6166fef3c74f187446adf5ab6361a03231eabab88a54ebd8f6f2a0ebd5c4",
          "name": "analyzer"
        },
        {
          "digest": "sha256:7601000fdaf7b937847cea40c4ac1b60ab843b1439e8a0c7e9dc4723408055ba",
          "image": "registry.connect.redhat.com/prophetstor/alameda-datahub-ubi@sha256:7601000fdaf7b937847cea40c4ac1b60ab843b1439e8a0c7e9dc4723408055ba",
          "name": "datahub"
        },
        {
          "digest": "sha256:d59db2fa0cdf0b0a66955297174641bef668db1d010e306b2bb711756ca57c38",
          "image": "registry.connect.redhat.com/prophetstor/alameda-executor-ubi@sha256:d59db2fa0cdf0b0a66955297174641bef668db1d010e306b2bb711756ca57c38",
          "name": "executor"
        },
        {
          "digest": "sha256:ae1e6994e8e1414a117308d7fb24bccfb093aaa8492d1d357a26f9e2ab7acf7c",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:ae1e6994e8e1414a117308d7fb24bccfb093aaa8492d1d357a26f9e2ab7acf7c",
          "name": "fedemeter_api"
        },
        {
          "digest": "sha256:d3b5505dd4fe688071f2d685773ed691cebcb04ff35eaf41e4f7a0331ff6e688",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:d3b5505dd4fe688071f2d685773ed691cebcb04ff35eaf41e4f7a0331ff6e688",
          "name": "fedemeter_influxdb"
        },
        {
          "digest": "sha256:c5c2794413aea8384e8325a8cd9d86b4ec29ee5652e6b3bd172f15269e1d8ae0",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:c5c2794413aea8384e8325a8cd9d86b4ec29ee5652e6b3bd172f15269e1d8ae0",
          "name": "federatorai_agent"
        },
        {
          "digest": "sha256:468dfd11a6877103809cb17f56165d06e00d93a3c89411307249f921289fc1e4",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:468dfd11a6877103809cb17f56165d06e00d93a3c89411307249f921289fc1e4",
          "name": "federatorai_agent_preloader"
        },
        {
          "digest": "sha256:5a552ec0a78ae167ad7ff8dbdb02ac3de49d60df49bcbe6ca11091077e744a12",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:5a552ec0a78ae167ad7ff8dbdb02ac3de49d60df49bcbe6ca11091077e744a12",
          "name": "federatorai_dashboard_frontend"
        },
        {
          "digest": "sha256:77709a35443202cffd2ef4df9daabd6a00ab4e536525ce99a9fd4203a0669e9a",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:77709a35443202cffd2ef4df9daabd6a00ab4e536525ce99a9fd4203a0669e9a",
          "name": "federatorai_dashboard_backend"
        },
        {
          "digest": "sha256:9c4ce48758ea58003cd25351c440e9aa12664cd59ee75bed8063374815f4d4da",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:9c4ce48758ea58003cd25351c440e9aa12664cd59ee75bed8063374815f4d4da",
          "name": "federatorai_data_adapter"
        },
        {
          "digest": "sha256:801059280ae54de7eaa518f5701ea320696e5aa83b3cd7ef3ad82ba1e3e1d395",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:801059280ae54de7eaa518f5701ea320696e5aa83b3cd7ef3ad82ba1e3e1d395",
          "name": "federatorai_restapi"
        },
        {
          "digest": "sha256:a20096b566e7dde77e7e5885a60d47e6c8824f8db896f20b90676d14f7d2bcc8",
          "image": "registry.connect.redhat.com/prophetstor/alameda-influxdb@sha256:a20096b566e7dde77e7e5885a60d47e6c8824f8db896f20b90676d14f7d2bcc8",
          "name": "influxdb"
        },
        {
          "digest": "sha256:87afe424d8d205b8a2f01262e3edac73e8f3eee0aa597610b8a4ee57e17f4ac0",
          "image": "registry.connect.redhat.com/prophetstor/alameda-notifier-ubi@sha256:87afe424d8d205b8a2f01262e3edac73e8f3eee0aa597610b8a4ee57e17f4ac0",
          "name": "notifier"
        },
        {
          "digest": "sha256:d4fceace6cc1f0e80b8b6abe870ec9722ea69e91c481246b13e3d50a2c3e1ffb",
          "image": "registry.connect.redhat.com/prophetstor/alameda-operator-ubi@sha256:d4fceace6cc1f0e80b8b6abe870ec9722ea69e91c481246b13e3d50a2c3e1ffb",
          "name": "operator"
        },
        {
          "digest": "sha256:2b61bfd1ba9186cc50b8f960f54d0ec94643715292bb874762009b3045477799",
          "image": "registry.connect.redhat.com/prophetstor/alameda-rabbitmq@sha256:2b61bfd1ba9186cc50b8f960f54d0ec94643715292bb874762009b3045477799",
          "name": "rabbitmq"
        },
        {
          "digest": "sha256:288cb6c29200d07451b8e2ab53b9a5112108cb5f2b6dc288026f9c2f12f5f9fd",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:288cb6c29200d07451b8e2ab53b9a5112108cb5f2b6dc288026f9c2f12f5f9fd",
          "name": "recommender"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "4.6.1-4",
      "version_original": "4.6.1-4"
    },
    {
      "_id": "61a57c1dbfd4a5234d5960d5",
      "alm_examples": [
        {
          "api_version": "federatorai.containers.ai/v1alpha1",
          "kind": "AlamedaService",
          "metadata": {
            "name": "my-alamedaservice"
          },
          "spec": {
            "alamedaAi": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "alamedaInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "100Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "fedemeterInfluxdb": {
              "storages": [
                {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "size": "10Gi",
                  "type": "pvc",
                  "usage": "data"
                }
              ]
            },
            "imageLocation": "registry.connect.redhat.com/prophetstor",
            "storages": [
              {
                "accessMode": [
                  "ReadWriteOnce"
                ],
                "size": "2Gi",
                "type": "pvc",
                "usage": "log"
              }
            ],
            "version": "v4.7.1-b1760"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/prophetstor/federatorai-operator-bundle@sha256:d0ac978d749654ddf4cc20823805ba7d33ee62e9a7ec98fdd53d9926b697c347",
      "bundle_path_digest": "sha256:d0ac978d749654ddf4cc20823805ba7d33ee62e9a7ec98fdd53d9926b697c347",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:19:25.850000+00:00",
      "csv_description": "Federator.ai helps enterprises optimize cloud resources, maximize application performance, and save significant cost without excessive over-provisioning or under-provisioning of resources, meeting the service-level requirements of their applications.\n\nEnterprises often lack understanding of the resources needed to support their applications. This leads to either excessive over-provisioning or under-provisioning of resources (CPU, memory, storage). Using machine learning, Federator.ai determines the optimal cloud resources needed to support any workload on OpenShift and helps users find the best-cost instances from cloud providers for their applications.\n\n\n**Multi-layer workload prediction**\n\nUsing machine learning and math-based algorithms, Federator.ai predicts containerized application and cluster node resource usage as the basis for resource recommendations at application level as well as at cluster node level. Federator.ai supports prediction for both physical/virtual CPUs and memories.\n\n\n**Auto-scaling via resource recommendation**\n\nFederator.ai utilizes the predicted resource usage to recommend the right number and size of pods for applications. Integrated with Datadog's WPA, applications are automatically scaled to meet the predicted resource usage.\n\n\n**Application-aware recommendation execution**\n\nOptimizing the resource usage and performance goals, Federator.ai uses application specific metrics for workload prediction and pod capacity estimation to auto-scale the right number of pods for best performance without overprovisioning.\n\n\n**Multi-cloud Cost Analysis**\n\nWith resource usage prediction, Federator.ai analyzes potential cost of a cluster on different public cloud providers. It also recommend appropriate cluster nodes and instance types based on resource usage.\n\n\n**Custom Datadog/Sysdig Dashboards**\n\nPredefined custom Datadog/Sysdig Dashboards for workload prediction/recommendation visualization for cluster nodes and applications.\n\n\n**Additional resources**\n\nWant more product information? Explore detailed information about using this product and where to find additional help.\n\n* [Federator.ai Datasheet](https://prophetstor.com/wp-content/uploads/datasheets/Federator.ai.pdf)\n* [Quick Start Guide](https://prophetstor.com/wp-content/uploads/documentation/Federator.ai/Latest%20Version/ProphetStor%20Federator.ai%20Quick%20Installation%20Guide.pdf)\n* [Installation Guide](https://prophetstor.com/wp-content/uploads/2021/08/ProphetStor-Federator.ai-v4.7.0-Installation-Guide-v1.0.pdf)\n* [User Guide](https://prophetstor.com/wp-content/uploads/2021/08/Federator.ai-4.7.0-User-Guide.pdf)\n* [Release Notes](https://prophetstor.com/wp-content/uploads/2021/08/Federator.ai-4.7.0-Release-Notes.pdf)\n* [Company Information](https://www.prophetstor.com/)\n\n\n### Prerequisite\n*  The [Openshift](https://www.openshift.com) version 4.4.x or later if using OpenShift platform.\n*  The [Kubernetes](https://kubernetes.io/) version 1.16 or later if using Kubernetes environment.",
      "csv_display_name": "Federator.ai",
      "csv_metadata_description": "Federator.ai Operator provides easy configuration and management of AI-based Kubernetes resource orchestrator",
      "csv_name": "federatorai.v4.7.1-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:58:14.383000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "federatorai-certified",
      "provided_apis": [
        {
          "group": "federatorai.containers.ai",
          "kind": "AlamedaService",
          "version": "v1alpha1"
        }
      ],
      "provider": "ProphetStor Data Services, Inc.",
      "related_images": [
        {
          "digest": "sha256:bdd87f6b7d7ba9d12ed8ddb9c5151e5a89781e88d7a02b73814b16a766968047",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:bdd87f6b7d7ba9d12ed8ddb9c5151e5a89781e88d7a02b73814b16a766968047",
          "name": "federatorai-operator-bdd87f6b7d7ba9d12ed8ddb9c5151e5a89781e88d7a02b73814b16a766968047-annotation"
        },
        {
          "digest": "sha256:bdd87f6b7d7ba9d12ed8ddb9c5151e5a89781e88d7a02b73814b16a766968047",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:bdd87f6b7d7ba9d12ed8ddb9c5151e5a89781e88d7a02b73814b16a766968047",
          "name": "federatorai-operator"
        },
        {
          "digest": "sha256:bdd87f6b7d7ba9d12ed8ddb9c5151e5a89781e88d7a02b73814b16a766968047",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-operator@sha256:bdd87f6b7d7ba9d12ed8ddb9c5151e5a89781e88d7a02b73814b16a766968047",
          "name": "upgrader"
        },
        {
          "digest": "sha256:6e0dc1136b0f8e5971d92b95ce0d6dfac475044c073bada50f23b315f4478ae4",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai-dispatcher@sha256:6e0dc1136b0f8e5971d92b95ce0d6dfac475044c073bada50f23b315f4478ae4",
          "name": "ai_dispatcher"
        },
        {
          "digest": "sha256:9293298bb2a72d0b0764050b6f6d8da707b46a83363a3b6aa7be60f512e2ec61",
          "image": "registry.connect.redhat.com/prophetstor/alameda-ai@sha256:9293298bb2a72d0b0764050b6f6d8da707b46a83363a3b6aa7be60f512e2ec61",
          "name": "ai_engine"
        },
        {
          "digest": "sha256:6117ac4692793d49bc0204f13091dec119bdbc7b169e9deb86c243aca00ded27",
          "image": "registry.connect.redhat.com/prophetstor/alameda-analyzer-ubi@sha256:6117ac4692793d49bc0204f13091dec119bdbc7b169e9deb86c243aca00ded27",
          "name": "analyzer"
        },
        {
          "digest": "sha256:3819d6acce8d376dbe3b12469be2528d0ce9ac95c2a86507aeb76b6e3a5f5f38",
          "image": "registry.connect.redhat.com/prophetstor/alameda-datahub-ubi@sha256:3819d6acce8d376dbe3b12469be2528d0ce9ac95c2a86507aeb76b6e3a5f5f38",
          "name": "datahub"
        },
        {
          "digest": "sha256:4512e3be7a89d0ca9f120b68f6ab9766d000bf2b01b279cd55b2dbc433aacfb6",
          "image": "registry.connect.redhat.com/prophetstor/alameda-executor-ubi@sha256:4512e3be7a89d0ca9f120b68f6ab9766d000bf2b01b279cd55b2dbc433aacfb6",
          "name": "executor"
        },
        {
          "digest": "sha256:451456207fe8d16b9824b3f64d00645766dcccbc8d685b6942e6c00d0d0c627e",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-api-ubi@sha256:451456207fe8d16b9824b3f64d00645766dcccbc8d685b6942e6c00d0d0c627e",
          "name": "fedemeter_api"
        },
        {
          "digest": "sha256:36904f003e8e29d4a9fd738655f401fbe840d60158d7d820cda79a09858dc2c2",
          "image": "registry.connect.redhat.com/prophetstor/fedemeter-influxdb@sha256:36904f003e8e29d4a9fd738655f401fbe840d60158d7d820cda79a09858dc2c2",
          "name": "fedemeter_influxdb"
        },
        {
          "digest": "sha256:cfadc84f31f3776ded15d4d8dda92e00b7d9b1bce0ff5440277176292f9304d3",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-ubi@sha256:cfadc84f31f3776ded15d4d8dda92e00b7d9b1bce0ff5440277176292f9304d3",
          "name": "federatorai_agent"
        },
        {
          "digest": "sha256:66daea6193e399f8363df5ba42e1fcd643db6df3a9075dbcd8c3464fdc91e776",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-agent-preloader@sha256:66daea6193e399f8363df5ba42e1fcd643db6df3a9075dbcd8c3464fdc91e776",
          "name": "federatorai_agent_preloader"
        },
        {
          "digest": "sha256:1c1147425ca6302103363a1a3bcf27baeef13b10ec6780ef266b7f52fe27ffeb",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-frontend@sha256:1c1147425ca6302103363a1a3bcf27baeef13b10ec6780ef266b7f52fe27ffeb",
          "name": "federatorai_dashboard_frontend"
        },
        {
          "digest": "sha256:022dbf6696edb8eaf389fdbd1dff14c40a51c237c01f8a02a7ea65c60cd59f38",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-dashboard-backend@sha256:022dbf6696edb8eaf389fdbd1dff14c40a51c237c01f8a02a7ea65c60cd59f38",
          "name": "federatorai_dashboard_backend"
        },
        {
          "digest": "sha256:adf5d655fa030dc05133516d45642d7282fdd66e0aa8e7a7331ed614a41d3fe0",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-data-adapter@sha256:adf5d655fa030dc05133516d45642d7282fdd66e0aa8e7a7331ed614a41d3fe0",
          "name": "federatorai_data_adapter"
        },
        {
          "digest": "sha256:3e92528615543ea900bf38387c4eb8439b60759be5be2ac5311a9dbaafc7026b",
          "image": "registry.connect.redhat.com/prophetstor/federatorai-rest-ubi@sha256:3e92528615543ea900bf38387c4eb8439b60759be5be2ac5311a9dbaafc7026b",
          "name": "federatorai_restapi"
        },
        {
          "digest": "sha256:485c2119a6a56807e28ad03b2087129950118b55531126a66bb414063052ae76",
          "image": "registry.connect.redhat.com/prophetstor/alameda-influxdb@sha256:485c2119a6a56807e28ad03b2087129950118b55531126a66bb414063052ae76",
          "name": "influxdb"
        },
        {
          "digest": "sha256:1f75034fb78d62924a87cb4a5435661b4afa990d6960431e784029742fbae0da",
          "image": "registry.connect.redhat.com/prophetstor/alameda-notifier-ubi@sha256:1f75034fb78d62924a87cb4a5435661b4afa990d6960431e784029742fbae0da",
          "name": "notifier"
        },
        {
          "digest": "sha256:9a863394cb1c89228223b26addb0d12bb91a97233fe2d5d19ecd5998e0cfe0d6",
          "image": "registry.connect.redhat.com/prophetstor/alameda-operator-ubi@sha256:9a863394cb1c89228223b26addb0d12bb91a97233fe2d5d19ecd5998e0cfe0d6",
          "name": "operator"
        },
        {
          "digest": "sha256:b396d9aa0470e593a36f5799c04fc3c9e59b5723f703f4b019f7ef92528e6741",
          "image": "registry.connect.redhat.com/prophetstor/alameda-rabbitmq@sha256:b396d9aa0470e593a36f5799c04fc3c9e59b5723f703f4b019f7ef92528e6741",
          "name": "rabbitmq"
        },
        {
          "digest": "sha256:13e941df9252cea3024ecb5e2247a696b64928015c1a3a4a04ee4e362388b1e4",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:13e941df9252cea3024ecb5e2247a696b64928015c1a3a4a04ee4e362388b1e4",
          "name": "federatorai_recommend_dispatcher"
        },
        {
          "digest": "sha256:13e941df9252cea3024ecb5e2247a696b64928015c1a3a4a04ee4e362388b1e4",
          "image": "registry.connect.redhat.com/prophetstor/alameda-recommender-ubi@sha256:13e941df9252cea3024ecb5e2247a696b64928015c1a3a4a04ee4e362388b1e4",
          "name": "federatorai_recommend_worker"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "4.7.1-1",
      "version_original": "4.7.1-1"
    },
    {
      "_id": "61a57c82bfd4a5234d5960d7",
      "alm_examples": [],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/runai/runai-operator@sha256:c9379256b0ce19b686f999ec2f0cfac1e8c69c8fbb47d574d8ccf485cc5f920a",
      "bundle_path_digest": "sha256:c9379256b0ce19b686f999ec2f0cfac1e8c69c8fbb47d574d8ccf485cc5f920a",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "fast",
      "creation_date": "2021-11-30T01:21:06.138000+00:00",
      "csv_description": "Run:AI is a cloud-native compute management platform for the AI era. Run:AI gives data scientists access to all of the pooled compute power they need to accelerate AI development and deployment - whether on-premises or in the cloud. The platform provides IT and MLOps with real-time visibility and control over scheduling and dynamic provisioning of GPUs to deliver more than 2X gains in utilization of existing GPU infrastructure. Built on Kubernetes, Run:AI enables seamless integration with existing IT and data science workflows. More at www.run.ai.",
      "csv_display_name": "Run:AI",
      "csv_metadata_description": "",
      "csv_name": "installkit-customer.v2.0.15",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:01:23.154000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "installkit-customer",
      "provided_apis": [],
      "provider": "Run:AI Labs",
      "related_images": [
        {
          "digest": "sha256:75d3eaaa698a72b25fae2ebd414e1a49339517f3a75f752bb76704f673edeb08",
          "image": "gcr.io/runai-openshift/operator@sha256:75d3eaaa698a72b25fae2ebd414e1a49339517f3a75f752bb76704f673edeb08",
          "name": "operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.1.5",
      "version_original": "2.1.5"
    },
    {
      "_id": "61a57c8ac17162a20c1c688b",
      "alm_examples": [],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/runai/runai-operator@sha256:c9379256b0ce19b686f999ec2f0cfac1e8c69c8fbb47d574d8ccf485cc5f920a",
      "bundle_path_digest": "sha256:c9379256b0ce19b686f999ec2f0cfac1e8c69c8fbb47d574d8ccf485cc5f920a",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "preview",
      "creation_date": "2021-11-30T01:21:14.791000+00:00",
      "csv_description": "Run:AI is a cloud-native compute management platform for the AI era. Run:AI gives data scientists access to all of the pooled compute power they need to accelerate AI development and deployment - whether on-premises or in the cloud. The platform provides IT and MLOps with real-time visibility and control over scheduling and dynamic provisioning of GPUs to deliver more than 2X gains in utilization of existing GPU infrastructure. Built on Kubernetes, Run:AI enables seamless integration with existing IT and data science workflows. More at www.run.ai.",
      "csv_display_name": "Run:AI",
      "csv_metadata_description": "",
      "csv_name": "installkit-customer.v2.0.15",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:01:27.826000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "installkit-customer",
      "provided_apis": [],
      "provider": "Run:AI Labs",
      "related_images": [
        {
          "digest": "sha256:75d3eaaa698a72b25fae2ebd414e1a49339517f3a75f752bb76704f673edeb08",
          "image": "gcr.io/runai-openshift/operator@sha256:75d3eaaa698a72b25fae2ebd414e1a49339517f3a75f752bb76704f673edeb08",
          "name": "operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.1.5",
      "version_original": "2.1.5"
    },
    {
      "_id": "61a57c923e9240fca360f559",
      "alm_examples": [],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/runai/runai-operator@sha256:c9379256b0ce19b686f999ec2f0cfac1e8c69c8fbb47d574d8ccf485cc5f920a",
      "bundle_path_digest": "sha256:c9379256b0ce19b686f999ec2f0cfac1e8c69c8fbb47d574d8ccf485cc5f920a",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:21:22.949000+00:00",
      "csv_description": "Run:AI is a cloud-native compute management platform for the AI era. Run:AI gives data scientists access to all of the pooled compute power they need to accelerate AI development and deployment - whether on-premises or in the cloud. The platform provides IT and MLOps with real-time visibility and control over scheduling and dynamic provisioning of GPUs to deliver more than 2X gains in utilization of existing GPU infrastructure. Built on Kubernetes, Run:AI enables seamless integration with existing IT and data science workflows. More at www.run.ai.",
      "csv_display_name": "Run:AI",
      "csv_metadata_description": "",
      "csv_name": "installkit-customer.v2.0.15",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:01:31.993000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "installkit-customer",
      "provided_apis": [],
      "provider": "Run:AI Labs",
      "related_images": [
        {
          "digest": "sha256:75d3eaaa698a72b25fae2ebd414e1a49339517f3a75f752bb76704f673edeb08",
          "image": "gcr.io/runai-openshift/operator@sha256:75d3eaaa698a72b25fae2ebd414e1a49339517f3a75f752bb76704f673edeb08",
          "name": "operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.1.5",
      "version_original": "2.1.5"
    },
    {
      "_id": "61a57c9b27e166330707d965",
      "alm_examples": [],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/iomesh/iomesh@sha256:27c5d91d62371f3cf0dea4d50044d8a6e0a6015a453c4216a030683ea2474c64",
      "bundle_path_digest": "sha256:27c5d91d62371f3cf0dea4d50044d8a6e0a6015a453c4216a030683ea2474c64",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:21:31.836000+00:00",
      "csv_description": "IOMesh (https://www.iomesh.com/) is a cloud-native storage product specifically designed and developed for Kubernetes. It takes ZBS as its core, a \u201cproduction-ready\u201d distributed storage system developed independently by SmartX, to provide production-level high performance and reliable persistent storage for business-critical applications such as MySQL, Cassandra, MongoDB, etc., contributing to the containerized transformation of stateful applications.      \n## Pre-Requisites\n* According to https://docs.iomesh.com/deploy/prerequisites, make sure that your openshift cluster meets the \"Installation Requirements\" and set up the worker nodes correctly according to the \"Setup Worker Node\" chapter.\n* Run IOMesh Operator pre-installation script in an environment where oc or kubectl can be used to access the openshift cluster, the script will install the dependencies of IOMesh Operator and specific IOMesh settings for the openshift cluster:\n```shell\ncurl -sSL https://iomesh.run/iomesh-operator-pre-install-openshift.sh | sh -\n```\n## Install IOMesh Operator and IOMesh Cluster\n* Click install button on the current web page to install IOMesh Operator\n* On the **Installed Operators** -> **IOMesh Operator** -> **Create instance** -> **YAML view**, fill in an IOMesh Custom Resources according https://iomesh.run/iomesh.yaml, change the `spec.*.dataCIDR` to your own data network CIDR:\n## Post Install\n* Run IOMesh Operator post-installation script in an environment where oc or kubectl can be used to access the openshift cluster, the script will install IOMesh CSI Driver\n```shell\ncurl -sSL https://iomesh.run/iomesh-operator-post-install-openshift.sh | sh -\n```\n## Getting Started\n* Try to quickstart setup and use IOMesh: https://docs.iomesh.com/deploy/setup-iomesh\n",
      "csv_display_name": "IOMesh Operator",
      "csv_metadata_description": "",
      "csv_name": "iomesh-operator.0.10.1-rc4",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:01:53.311000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "iomesh-operator",
      "provided_apis": [
        {
          "group": "iomesh.com",
          "kind": "IOMeshCluster",
          "plural": "iomeshclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "SmartX",
      "related_images": [
        {
          "digest": "sha256:52b8718ce46fa764f802f7709f2ca39ebc78cf25e4af78a4c8011e4c0ff1d8f3",
          "image": "iomesh/operator@sha256:52b8718ce46fa764f802f7709f2ca39ebc78cf25e4af78a4c8011e4c0ff1d8f3",
          "name": "operator-52b8718ce46fa764f802f7709f2ca39ebc78cf25e4af78a4c8011e4c0ff1d8f3-annotation"
        },
        {
          "digest": "sha256:52b8718ce46fa764f802f7709f2ca39ebc78cf25e4af78a4c8011e4c0ff1d8f3",
          "image": "iomesh/operator@sha256:52b8718ce46fa764f802f7709f2ca39ebc78cf25e4af78a4c8011e4c0ff1d8f3",
          "name": "operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.10.1-rc4",
      "version_original": "0.10.1-rc4"
    },
    {
      "_id": "61a57ca427e166330707d966",
      "alm_examples": [
        {
          "api_version": "app.joget.com/v1alpha1",
          "kind": "JogetDX",
          "metadata": {
            "name": "example-joget"
          },
          "spec": {
            "size": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/joget/joget-dx-operator-bundle@sha256:b0e763b8e865c832348cc4a883a99af0be4b657f0b44b4419ca4d6066a3c7bed",
      "bundle_path_digest": "sha256:b0e763b8e865c832348cc4a883a99af0be4b657f0b44b4419ca4d6066a3c7bed",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:21:40.640000+00:00",
      "csv_description": "Joget DX is the next generation open source no-code / low-code application platform that combines the best of Rapid Application Development, Business Process Automation and Workflow Management. \nJoget DX empowers business users, non-coders or coders with a single platform to easily build, deliver, monitor and maintain enterprise applications.\n\nThis operator installs a Joget DX cluster running on JBoss EAP 7.\n\n### Features\n* Build full-fledged apps e.g. CRM, HR, Healthcare, etc\n* Drag and drop forms, lists, UI\n* Add workflow to automate processes\n* Extend via plugins\n* Apps are mobile optimized and cloud ready\n* Download ready-made apps from the Joget Marketplace\n\n### Before You Start\nDeploy a [MySQL](https://docs.openshift.com/online/pro/using_images/db_images/mysql.html) or [MariaDB](https://docs.openshift.com/online/pro/using_images/db_images/mariadb.html) database.\n\n### Post Deployment\nAccess the service URL and complete the one-time [Database Setup](https://dev.joget.org/community/display/DX7/Setting+Up+Database)\n\n### More Information\nMore information about Joget DX on JBoss EAP 7 is available in the [Joget Knowledge Base](https://dev.joget.org/community/display/DX7/Automated+Deployment+on+Red+Hat+OpenShift+with+the+Joget+Operator)\n",
      "csv_display_name": "Joget DX Operator",
      "csv_metadata_description": "No-code/low-code application platform to visually build, run and maintain apps",
      "csv_name": "joget-dx-openshift-operator.v0.0.20",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:01:58.289000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "joget-dx-operator",
      "provided_apis": [
        {
          "group": "app.joget.com",
          "kind": "JogetDX",
          "plural": "jogetdx",
          "version": "v1alpha1"
        }
      ],
      "provider": "Joget, Inc",
      "related_images": [
        {
          "digest": "sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "image": "registry.connect.redhat.com/joget/joget-dx-operator@sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "name": "joget-dx-operator-79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749-annotation"
        },
        {
          "digest": "sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "image": "registry.connect.redhat.com/joget/joget-dx-operator@sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "name": "operator"
        },
        {
          "digest": "sha256:dffc105b4cf03f0b4f15c90786505ba5d660bf703bf11e19e80c90d93fece559",
          "image": "registry.connect.redhat.com/joget/joget-dx7-eap7@sha256:dffc105b4cf03f0b4f15c90786505ba5d660bf703bf11e19e80c90d93fece559",
          "name": "joget"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.20",
      "version_original": "0.0.20"
    },
    {
      "_id": "61a57cae3e9240fca360f55a",
      "alm_examples": [
        {
          "api_version": "app.joget.com/v1alpha1",
          "kind": "JogetDX",
          "metadata": {
            "name": "example-joget"
          },
          "spec": {
            "size": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/joget/joget-dx-operator-bundle@sha256:58e3af46a8b343a8a899cea5c01061f9fb3530713d7786cca289b198d72bacf6",
      "bundle_path_digest": "sha256:58e3af46a8b343a8a899cea5c01061f9fb3530713d7786cca289b198d72bacf6",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:21:50.428000+00:00",
      "csv_description": "Joget DX is the next generation open source no-code / low-code application platform that combines the best of Rapid Application Development, Business Process Automation and Workflow Management. \nJoget DX empowers business users, non-coders or coders with a single platform to easily build, deliver, monitor and maintain enterprise applications.\n\nThis operator installs a Joget DX cluster running on JBoss EAP 7.\n\n### Features\n* Build full-fledged apps e.g. CRM, HR, Healthcare, etc\n* Drag and drop forms, lists, UI\n* Add workflow to automate processes\n* Extend via plugins\n* Apps are mobile optimized and cloud ready\n* Download ready-made apps from the Joget Marketplace\n\n### Before You Start\nDeploy a [MySQL](https://docs.openshift.com/online/pro/using_images/db_images/mysql.html) or [MariaDB](https://docs.openshift.com/online/pro/using_images/db_images/mariadb.html) database.\n\n### Post Deployment\nAccess the service URL and complete the one-time [Database Setup](https://dev.joget.org/community/display/DX7/Setting+Up+Database)\n\n### More Information\nMore information about Joget DX on JBoss EAP 7 is available in the [Joget Knowledge Base](https://dev.joget.org/community/display/DX7/Automated+Deployment+on+Red+Hat+OpenShift+with+the+Joget+Operator)\n",
      "csv_display_name": "Joget DX Operator",
      "csv_metadata_description": "No-code/low-code application platform to visually build, run and maintain apps",
      "csv_name": "joget-dx-openshift-operator.v0.0.21",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:02:03.547000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "joget-dx-operator",
      "provided_apis": [
        {
          "group": "app.joget.com",
          "kind": "JogetDX",
          "plural": "jogetdx",
          "version": "v1alpha1"
        }
      ],
      "provider": "Joget, Inc",
      "related_images": [
        {
          "digest": "sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "image": "registry.connect.redhat.com/joget/joget-dx-operator@sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "name": "joget-dx-operator-79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749-annotation"
        },
        {
          "digest": "sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "image": "registry.connect.redhat.com/joget/joget-dx-operator@sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "name": "operator"
        },
        {
          "digest": "sha256:326789849a178bdea0e57f1b4649a4e92a2590579902e899932c733bc24409d3",
          "image": "registry.connect.redhat.com/joget/joget-dx7-eap7@sha256:326789849a178bdea0e57f1b4649a4e92a2590579902e899932c733bc24409d3",
          "name": "joget"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.21",
      "version_original": "0.0.21"
    },
    {
      "_id": "61a57cb7c17162a20c1c688c",
      "alm_examples": [
        {
          "api_version": "app.joget.com/v1alpha1",
          "kind": "JogetDX",
          "metadata": {
            "name": "example-joget"
          },
          "spec": {
            "size": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/joget/joget-dx-operator-bundle@sha256:d778e1d70bee8e4a17cac2ea9b04c82c747fd1d1f3859e846626f581f58f1ae3",
      "bundle_path_digest": "sha256:d778e1d70bee8e4a17cac2ea9b04c82c747fd1d1f3859e846626f581f58f1ae3",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:21:59.698000+00:00",
      "csv_description": "Joget DX is the next generation open source no-code / low-code application platform that combines the best of Rapid Application Development, Business Process Automation and Workflow Management. \nJoget DX empowers business users, non-coders or coders with a single platform to easily build, deliver, monitor and maintain enterprise applications.\n\nThis operator installs a Joget DX cluster running on JBoss EAP 7.\n\n### Features\n* Build full-fledged apps e.g. CRM, HR, Healthcare, etc\n* Drag and drop forms, lists, UI\n* Add workflow to automate processes\n* Extend via plugins\n* Apps are mobile optimized and cloud ready\n* Download ready-made apps from the Joget Marketplace\n\n### Before You Start\nDeploy a [MySQL](https://docs.openshift.com/online/pro/using_images/db_images/mysql.html) or [MariaDB](https://docs.openshift.com/online/pro/using_images/db_images/mariadb.html) database.\n\n### Post Deployment\nAccess the service URL and complete the one-time [Database Setup](https://dev.joget.org/community/display/DX7/Setting+Up+Database)\n\n### More Information\nMore information about Joget DX on JBoss EAP 7 is available in the [Joget Knowledge Base](https://dev.joget.org/community/display/DX7/Automated+Deployment+on+Red+Hat+OpenShift+with+the+Joget+Operator)\n",
      "csv_display_name": "Joget DX Operator",
      "csv_metadata_description": "No-code/low-code application platform to visually build, run and maintain apps",
      "csv_name": "joget-dx-openshift-operator.v0.0.22",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:02:09.318000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "joget-dx-operator",
      "provided_apis": [
        {
          "group": "app.joget.com",
          "kind": "JogetDX",
          "plural": "jogetdx",
          "version": "v1alpha1"
        }
      ],
      "provider": "Joget, Inc",
      "related_images": [
        {
          "digest": "sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "image": "registry.connect.redhat.com/joget/joget-dx-operator@sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "name": "joget-dx-operator-79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749-annotation"
        },
        {
          "digest": "sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "image": "registry.connect.redhat.com/joget/joget-dx-operator@sha256:79856e88008da33fc0323e197819fec39fbd6b6bf2b03a0bf799b517bcf8e749",
          "name": "operator"
        },
        {
          "digest": "sha256:f839152251e021fe0ae1d4bd9e5374c2a2fb3c01da4381ba4c01afcbaadbf8bd",
          "image": "registry.connect.redhat.com/joget/joget-dx7-eap7@sha256:f839152251e021fe0ae1d4bd9e5374c2a2fb3c01da4381ba4c01afcbaadbf8bd",
          "name": "joget"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.22",
      "version_original": "0.0.22"
    },
    {
      "_id": "61a57ce1c17162a20c1c688f",
      "alm_examples": [
        {
          "api_version": "core.k8s.kubemq.io/v1beta1",
          "kind": "KubemqCluster",
          "metadata": {
            "name": "kubemq-cluster"
          },
          "spec": {
            "replicas": 3
          }
        },
        {
          "api_version": "core.k8s.kubemq.io/v1beta1",
          "kind": "KubemqDashboard",
          "metadata": {
            "name": "kubemq-dashboard"
          }
        },
        {
          "api_version": "core.k8s.kubemq.io/v1beta1",
          "kind": "KubemqConnector",
          "metadata": {
            "name": "kubemq-bridges"
          },
          "spec": {
            "config": "bindings: null",
            "type": "bridges"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/kubemq/kubemq-operator-bundle@sha256:9009198860c7a1e0de4f429261d442b75b5b2893a943bb77914b14d643db8829",
      "bundle_path_digest": "sha256:9009198860c7a1e0de4f429261d442b75b5b2893a943bb77914b14d643db8829",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:22:41.997000+00:00",
      "csv_description": "\n## Kubernetes Messaging Platform\nA message-based architecture for microservices providing flexible connectivity for hybrid environments: multi-cloud, on-premises, and at the edge. Powered by enterprise-grade message broker and message queue with ready to use connectors, bridges, and control center.\n\nMessaging platform components:\n  - **KubeMQ Cluster** - Enterprise-grade message broker and message queue, scalable, high available, and secured.\n  - **KubeMQ Targets Connector** - connects a KubeMQ cluster with external systems and cloud services.\n  - **KubeMQ Bridges Connector** - bridge, replicate, aggregate, and transform messages between KubeMQ clusters.\n  - **KubeMQ Sources Connector** - transform external systems and cloud services data to KubeMQ cluster messages.\n  - **KubeMQ Dashboard** - monitor KubeMQ cluster metrics.\n\n### Kubernetes Native\nInnovative and modern message queue and message broker in a lightweight container developed to run in Kubernetes, certified in the CNCF landscape, and connect natively to the cloud-native ecosystem.\n\n### Ease of use\n\nSimple deployment in Kubernetes in less than 1 minute. Developer friendly by simple to use SDKs and elimination of the many developers and DevOps-centered challenges to define exchanges, brokers, channels, routes, and predefined topics\n\n### All messaging patterns\n\nKubeMQ is available with all messaging patterns such as Queue, Stream, Pub/Sub, and RPC, Saving the need to maintain multiple messaging platforms for different use cases.\n\n### Hybrid Environments\n\nKubeMQ enables the microservices from multiple environments to communicate and build one hybrid infrastructure solution across clouds, on-prem, and at the edge.\n\n### KubeMQ Cluster key features\n\n- All-batteries included Messaging Queue Broker for the Kubernetes environment\n- Deployed with Operator for full life cycle operation\n- Blazing fast (written in Go), small and lightweight Docker container\n- Asynchronous and Synchronous messaging with support for  `At Most Once Delivery` and `At Least Once Delivery` models\n- Supports durable FIFO based Queue, Publish-Subscribe Events, Publish-Subscribe with Persistence (Events Store), RPC Command and Query messaging patterns\n- Supports gRPC, Rest and WebSocket Transport protocols with TLS support (both RPC and Stream modes)\n- Supports Access control Authorization and Authentication\n- Supports message masticating and smart routing\n- No Message broker configuration needed (i.e., queues, exchanges)\n- .Net, Java, Python, Go, and NodeJS SDKs\n\n### KubeMQ Targets Connector key features\n\n- Runs anywhere - Kubernetes, Cloud, on-prem, anywhere\n- Stand-alone - small docker container / binary\n- Single Interface - One interface all the services\n- Any Service - Support all major services types (databases, cache, messaging, serverless, HTTP, etc.)\n- Plug-in Architecture Easy to extend, easy to connect\n- Middleware Supports - Logs, Metrics, Retries, and Rate Limiters\n- Easy Configuration - simple yaml file builds your topology\n\n[Check out Github page](https://github.com/kubemq-io/kubemq-targets)\n\n### KubeMQ Bridges Connector key features\n\n- Runs anywhere - Kubernetes, Cloud, on-prem, anywhere\n- Stand-alone - small docker container / binary\n- Build Any Topology - connects KubeMQ clusters in 1:1, 1:n , n:1, n:n\n- Middleware Supports - Logs, Metrics, Retries, and Rate Limiters\n- Easy Configuration - simple yaml file builds your topology\n\n[Check out Github page](https://github.com/kubemq-io/kubemq-bridges)\n\n### KubeMQ Sources Connector key features\n\n- Runs anywhere - Kubernetes, Cloud, on-prem, anywhere\n- Stand-alone - small docker container / binary\n- Single Interface - One interface all the services\n- Any Service - Support all major messaging services such as Kafka, ActiveMQ, SQS, and more.\n- Plug-in Architecture Easy to extend, easy to connect\n- Middleware Supports - Logs, Metrics, Retries, and Rate Limiters\n- Easy Configuration - simple yaml file builds your topology\n\n[Check out Github page](https://github.com/kubemq-io/kubemq-sources)\n\n## Getting Started\n\n[Start with OpenShift](https://docs.kubemq.io/getting-started/create-cluster/openshift)\n\n## Get Enterprise Trial License\n\n[Register](https://account.kubemq.io/login/register)\n\n## Request a Demo\n\n[See KubeMQ in Action](https://kubemq.io/request-a-demo/)",
      "csv_display_name": "Kubemq Enterprise Operator",
      "csv_metadata_description": "Kubernetes Messaging Platform",
      "csv_name": "kubemq-operator.v1.7.8",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:03:22.784000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "kubemq-operator-marketplace",
      "provided_apis": [
        {
          "group": "core.k8s.kubemq.io",
          "kind": "KubemqDashboard",
          "plural": "kubemqdashboards",
          "version": "v1beta1"
        },
        {
          "group": "core.k8s.kubemq.io",
          "kind": "KubemqCluster",
          "plural": "kubemqclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.k8s.kubemq.io",
          "kind": "KubemqCluster",
          "plural": "kubemqclusters",
          "version": "v1beta1"
        },
        {
          "group": "core.k8s.kubemq.io",
          "kind": "KubemqConnector",
          "plural": "kubemqconnectors",
          "version": "v1alpha1"
        },
        {
          "group": "core.k8s.kubemq.io",
          "kind": "KubemqConnector",
          "plural": "kubemqconnectors",
          "version": "v1beta1"
        },
        {
          "group": "core.k8s.kubemq.io",
          "kind": "KubemqDashboard",
          "plural": "kubemqdashboards",
          "version": "v1alpha1"
        }
      ],
      "provider": "Kubemq.io",
      "related_images": [],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.7.8",
      "version_original": "1.7.8"
    },
    {
      "_id": "61a57cfec17162a20c1c6890",
      "alm_examples": [
        {
          "api_version": "game.marketplace.redhat.com/v1",
          "kind": "Arcade",
          "metadata": {
            "name": "arcade-sample"
          },
          "spec": {
            "size": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/rhm-labs/arcade-operator-bundle@sha256:f5f025c7f56643fab9148bb5de8ee34a84d02b78a6abb4b5592306cf54296654",
      "bundle_path_digest": "sha256:f5f025c7f56643fab9148bb5de8ee34a84d02b78a6abb4b5592306cf54296654",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:23:10.074000+00:00",
      "csv_description": "RHM Arcade Operator - a simple operator used to showcase how to build an operator around an existing web application that can can run on Openshift, Vanilla k8s, or on-boarded to Red Hat Marketplace.",
      "csv_display_name": "Arcade Operator",
      "csv_metadata_description": "",
      "csv_name": "marketplace-games-operator.v1.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:04:15.558000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "marketplace-games-operator",
      "provided_apis": [
        {
          "group": "game.marketplace.redhat.com",
          "kind": "Arcade",
          "plural": "arcades",
          "version": "v1"
        }
      ],
      "provider": "Red Hat Marketplace",
      "related_images": [
        {
          "digest": "sha256:e10d1d982dd653db74ca87a1d1ad017bc5ef1aeb651bdea089debf16485b080b",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:e10d1d982dd653db74ca87a1d1ad017bc5ef1aeb651bdea089debf16485b080b",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:d6959be6693728d2dc4cd38b69251551d23c5002cb52db2684df31a0a8f7b0ab",
          "image": "registry.connect.redhat.com/rhm-labs/arcade-operator@sha256:d6959be6693728d2dc4cd38b69251551d23c5002cb52db2684df31a0a8f7b0ab",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.0.0",
      "version_original": "1.0.0"
    },
    {
      "_id": "61a57d08c17162a20c1c6891",
      "alm_examples": [
        {
          "api_version": "cache.omarg.net/v1alpha1",
          "kind": "Memcached",
          "metadata": {
            "name": "memcached-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ogaye/ogaye@sha256:f35a21fb3936b259aabe27b453612616fca4e6327c9042361b4d00ef332905c0",
      "bundle_path_digest": "sha256:f35a21fb3936b259aabe27b453612616fca4e6327c9042361b4d00ef332905c0",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:23:20.029000+00:00",
      "csv_description": "Omar memcached operator",
      "csv_display_name": "memcached-operator-ogaye",
      "csv_metadata_description": "",
      "csv_name": "memcached-operator.v0.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:04:20.401000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "memcached-operator-ogaye",
      "provided_apis": [
        {
          "group": "cache.omarg.net",
          "kind": "Memcached",
          "plural": "memcacheds",
          "version": "v1alpha1"
        }
      ],
      "provider": "Omar Gaye IBM",
      "related_images": [
        {
          "digest": "sha256:9211b70edbb93d718428e1c9a992e5fc74a20cb213f8a0592ffe340c362890fe",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9211b70edbb93d718428e1c9a992e5fc74a20cb213f8a0592ffe340c362890fe",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:5340ac11ce676dd3204bf3807a4c2333a8dddcbcec918db0aeafbc977163c1c6",
          "image": "quay.io/ogaye/memcached-operator@sha256:5340ac11ce676dd3204bf3807a4c2333a8dddcbcec918db0aeafbc977163c1c6",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.1",
      "version_original": "0.0.1"
    },
    {
      "_id": "61a57d19c17162a20c1c6893",
      "alm_examples": [
        {
          "api_version": "apm.neuvector.com/v1alpha1",
          "kind": "Neuvector",
          "metadata": {
            "name": "neuvector"
          },
          "spec": {
            "admissionwebhook": {
              "type": "ClusterIP"
            },
            "bottlerocket": {
              "enabled": false,
              "runtimePath": "/run/dockershim.sock"
            },
            "containerd": {
              "enabled": false,
              "path": "/var/run/containerd/containerd.sock"
            },
            "controller": {
              "apisvc": {
                "annotations": {},
                "route": {
                  "enabled": false,
                  "host": "",
                  "termination": "passthrough"
                },
                "type": ""
              },
              "azureFileShare": {
                "enabled": false,
                "secretName": "",
                "shareName": ""
              },
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "configmap": {
                "data": "",
                "enabled": false
              },
              "disruptionbudget": 0,
              "enabled": true,
              "federation": {
                "managedsvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                },
                "mastersvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                }
              },
              "image": "registry.connect.redhat.com/neuvector/controller",
              "ingress": {
                "annotations": {
                  "ingress.kubernetes.io/protocol": "https"
                },
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "pvc": {
                "accessModes": [
                  "ReadWriteMany"
                ],
                "capacity": "",
                "enabled": false,
                "storageClass": ""
              },
              "replicas": 3,
              "resources": {},
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 1,
                  "maxUnavailable": 0
                },
                "type": "RollingUpdate"
              }
            },
            "crdwebhook": {
              "enabled": true,
              "type": "ClusterIP"
            },
            "crio": {
              "enabled": true,
              "path": "/var/run/crio/crio.sock"
            },
            "cve": {
              "scanner": {
                "dockerPath": "",
                "enabled": true,
                "image": "registry.connect.redhat.com/neuvector/scanner@sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
                "priorityClassName": "",
                "replicas": 3,
                "resources": {},
                "strategy": {
                  "rollingUpdate": {
                    "maxSurge": 1,
                    "maxUnavailable": 0
                  },
                  "type": "RollingUpdate"
                }
              },
              "updater": {
                "enabled": true,
                "image": "registry.access.redhat.com/ubi8@sha256:091ad37a5a638af2c21d01c2d3f4d489c2368070a6c43371e897013fb0987e49",
                "priorityClassName": "",
                "schedule": "0 0 * * *"
              }
            },
            "docker": {
              "enabled": false,
              "path": "/var/run/docker.sock"
            },
            "enforcer": {
              "enabled": true,
              "image": "registry.connect.redhat.com/neuvector/enforcer",
              "priorityClassName": "",
              "resources": {},
              "tolerations": [
                {
                  "effect": "NoSchedule",
                  "key": "node-role.kubernetes.io/master"
                }
              ]
            },
            "k3s": {
              "enabled": false,
              "runtimePath": "/run/k3s/containerd/containerd.sock"
            },
            "manager": {
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "enabled": true,
              "env": {
                "ssl": true
              },
              "image": "registry.connect.redhat.com/neuvector/manager",
              "ingress": {
                "annotations": {},
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "resources": {},
              "route": {
                "enabled": true,
                "host": "",
                "termination": "passthrough"
              },
              "svc": {
                "annotations": {},
                "loadBalancerIP": "",
                "type": "NodePort"
              }
            },
            "openshift": true,
            "psp": false,
            "resources": {},
            "serviceAccount": "default"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/neuvector/neuvector-operator-bundle@sha256:6f4ff463c67af42c1c3603e36e512a60dedb95775380a1a6b26c4cded86de5e1",
      "bundle_path_digest": "sha256:6f4ff463c67af42c1c3603e36e512a60dedb95775380a1a6b26c4cded86de5e1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "beta",
      "creation_date": "2021-11-30T01:23:37.745000+00:00",
      "csv_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.\n\nThe NeuVector Operator runs  in the openshift container platform to deploy and manage the NeuVector Security cluster components. The NeuVector operator contains all necessary information to deploy NeuVector using helm charts. You simply need to install the NeuVector operator from the OpenShift embeded operator hub and create NeuVector instance. You can modify the NeuVector installation configuration by modifying yaml while creating the NeuVector instance such as imagePullSecrets, tag version, etc. Please refer to [github link](https://github.com/neuvector/neuvector-helm/tree/master/charts/core) for the values that can be modifed during installation. To upgrade to a newer version of NeuVector, just reapply the NeuVector instance with desired tag , which in turn pulls the specified NeuVector image tags and upgrades as per upgrade plan configured on the helm chart.  NeuVector Operator versions are tied to NeuVector product versions. Version 1.2.8 of the NeuVector Certified Operator deploys version 4.3.1 of NeuVector.\n\n**Complete below steps to Grant Service Account Access to the Privileged SCC before installation.**\n\nCreate the NeuVector namespace\n\n         oc new-project  neuvector\nLogin as system:admin account\n\n         oc login -u system:admin\n\nGrant Service Account Access to the Privileged SCC\n\n         oc -n neuvector adm policy add-scc-to-user privileged -z default\n\nThe following info will be added in the Privileged SCC users:\n\n         - system:serviceaccount:neuvector:default\n\nIn OpenShift 4.6+ use the following to check:\n\n         oc get rolebinding system:openshift:scc:privileged -n neuvector -o wide\n         NAME                              ROLE                                          AGE     USERS   GROUPS   SERVICEACCOUNTS\n         system:openshift:scc:privileged   ClusterRole/system:openshift:scc:privileged   9m22s                    neuvector/default\n\n\n**Add NeuVector license from NeuVector WebUI->setting**\n\n\n#Deploying the NeuVector Operator#\n\n\nPlease refer to the instructions [here](https://github.com/neuvector/neuvector-operator/blob/master/README.md)\n\n\n",
      "csv_display_name": "NeuVector Operator",
      "csv_metadata_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.",
      "csv_name": "neuvector-operator.v1.2.8",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:05:07.998000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "neuvector-certified-operator",
      "provided_apis": [
        {
          "group": "apm.neuvector.com",
          "kind": "Neuvector",
          "plural": "neuvectors",
          "version": "v1alpha1"
        }
      ],
      "provider": "NeuVector",
      "related_images": [
        {
          "digest": "sha256:9d8ab5fc5e3122fe1332ccf624e6897277e2e935690f4b07ca1c491599daec72",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:9d8ab5fc5e3122fe1332ccf624e6897277e2e935690f4b07ca1c491599daec72",
          "name": "neuvector-operator-9d8ab5fc5e3122fe1332ccf624e6897277e2e935690f4b07ca1c491599daec72-annotation"
        },
        {
          "digest": "sha256:9d8ab5fc5e3122fe1332ccf624e6897277e2e935690f4b07ca1c491599daec72",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:9d8ab5fc5e3122fe1332ccf624e6897277e2e935690f4b07ca1c491599daec72",
          "name": "neuvector-operator"
        },
        {
          "digest": "sha256:55b3d9873846d0a8670b58e8a8a76c426d3aba74d4e5c4fca43d05c1dd296f10",
          "image": "registry.connect.redhat.com/neuvector/controller@sha256:55b3d9873846d0a8670b58e8a8a76c426d3aba74d4e5c4fca43d05c1dd296f10",
          "name": "controller"
        },
        {
          "digest": "sha256:fdd66288454dd01f4f618c8cf04c7da501d4362773266ec6f448d63e26e3a35c",
          "image": "registry.connect.redhat.com/neuvector/enforcer@sha256:fdd66288454dd01f4f618c8cf04c7da501d4362773266ec6f448d63e26e3a35c",
          "name": "enforcer"
        },
        {
          "digest": "sha256:73445c18ea18f131b6fa630a97623a3043d05758205ef93fc02fa920abbedaa6",
          "image": "registry.connect.redhat.com/neuvector/manager@sha256:73445c18ea18f131b6fa630a97623a3043d05758205ef93fc02fa920abbedaa6",
          "name": "manager"
        },
        {
          "digest": "sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "name": "scanner"
        },
        {
          "digest": "sha256:091ad37a5a638af2c21d01c2d3f4d489c2368070a6c43371e897013fb0987e49",
          "image": "registry.access.redhat.com/ubi8@sha256:091ad37a5a638af2c21d01c2d3f4d489c2368070a6c43371e897013fb0987e49",
          "name": "updater"
        },
        {
          "digest": "sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "name": "scanner-a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06-annotation"
        },
        {
          "digest": "sha256:091ad37a5a638af2c21d01c2d3f4d489c2368070a6c43371e897013fb0987e49",
          "image": "registry.access.redhat.com/ubi8@sha256:091ad37a5a638af2c21d01c2d3f4d489c2368070a6c43371e897013fb0987e49",
          "name": "ubi8-091ad37a5a638af2c21d01c2d3f4d489c2368070a6c43371e897013fb0987e49-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.2.8",
      "version_original": "1.2.8"
    },
    {
      "_id": "61a57d223e9240fca360f55e",
      "alm_examples": [
        {
          "api_version": "apm.neuvector.com/v1alpha1",
          "kind": "Neuvector",
          "metadata": {
            "name": "neuvector"
          },
          "spec": {
            "admissionwebhook": {
              "type": "ClusterIP"
            },
            "bottlerocket": {
              "enabled": false,
              "runtimePath": "/run/dockershim.sock"
            },
            "containerd": {
              "enabled": false,
              "path": "/var/run/containerd/containerd.sock"
            },
            "controller": {
              "apisvc": {
                "annotations": {},
                "route": {
                  "enabled": false,
                  "host": "",
                  "termination": "passthrough"
                },
                "type": ""
              },
              "azureFileShare": {
                "enabled": false,
                "secretName": "",
                "shareName": ""
              },
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "configmap": {
                "data": "",
                "enabled": false
              },
              "disruptionbudget": 0,
              "enabled": true,
              "federation": {
                "managedsvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                },
                "mastersvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                }
              },
              "image": "registry.connect.redhat.com/neuvector/controller",
              "ingress": {
                "annotations": {
                  "ingress.kubernetes.io/protocol": "https"
                },
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "pvc": {
                "accessModes": [
                  "ReadWriteMany"
                ],
                "capacity": "",
                "enabled": false,
                "storageClass": ""
              },
              "replicas": 3,
              "resources": {},
              "schedulerName": "",
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 1,
                  "maxUnavailable": 0
                },
                "type": "RollingUpdate"
              }
            },
            "crdwebhook": {
              "enabled": true,
              "type": "ClusterIP"
            },
            "crio": {
              "enabled": true,
              "path": "/var/run/crio/crio.sock"
            },
            "cve": {
              "scanner": {
                "dockerPath": "",
                "enabled": true,
                "image": "registry.connect.redhat.com/neuvector/scanner@sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
                "priorityClassName": "",
                "replicas": 3,
                "resources": {},
                "strategy": {
                  "rollingUpdate": {
                    "maxSurge": 1,
                    "maxUnavailable": 0
                  },
                  "type": "RollingUpdate"
                }
              },
              "updater": {
                "enabled": true,
                "image": "registry.access.redhat.com/ubi8@sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
                "priorityClassName": "",
                "schedule": "0 0 * * *",
                "secure": false
              }
            },
            "docker": {
              "enabled": false,
              "path": "/var/run/docker.sock"
            },
            "enforcer": {
              "enabled": true,
              "image": "registry.connect.redhat.com/neuvector/enforcer",
              "priorityClassName": "",
              "resources": {},
              "tolerations": [
                {
                  "effect": "NoSchedule",
                  "key": "node-role.kubernetes.io/master"
                }
              ]
            },
            "k3s": {
              "enabled": false,
              "runtimePath": "/run/k3s/containerd/containerd.sock"
            },
            "manager": {
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "enabled": true,
              "env": {
                "ssl": true
              },
              "image": "registry.connect.redhat.com/neuvector/manager",
              "ingress": {
                "annotations": {},
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "resources": {},
              "route": {
                "enabled": true,
                "host": "",
                "termination": "passthrough"
              },
              "svc": {
                "annotations": {},
                "loadBalancerIP": "",
                "type": "NodePort"
              }
            },
            "openshift": true,
            "psp": false,
            "resources": {},
            "serviceAccount": "default"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/neuvector/neuvector-operator-bundle@sha256:29996196f2eba8f7662bdf1efeaac3a0ccf56bdfb2e522b340d9a239f7ca51e4",
      "bundle_path_digest": "sha256:29996196f2eba8f7662bdf1efeaac3a0ccf56bdfb2e522b340d9a239f7ca51e4",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "beta",
      "creation_date": "2021-11-30T01:23:46.035000+00:00",
      "csv_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.\n\nThe NeuVector Operator runs  in the openshift container platform to deploy and manage the NeuVector Security cluster components. The NeuVector operator contains all necessary information to deploy NeuVector using helm charts. You simply need to install the NeuVector operator from the OpenShift embeded operator hub and create NeuVector instance. You can modify the NeuVector installation configuration by modifying yaml while creating the NeuVector instance such as imagePullSecrets, tag version, etc. Please refer to [github link](https://github.com/neuvector/neuvector-helm/tree/master/charts/core) for the values that can be modifed during installation. To upgrade to a newer version of NeuVector, just reapply the NeuVector instance with desired tag , which in turn pulls the specified NeuVector image tags and upgrades as per upgrade plan configured on the helm chart.  NeuVector Operator versions are tied to NeuVector product versions. Version 1.2.9 of the NeuVector Certified Operator deploys version 4.3.1 of NeuVector.\n\n**Complete below steps to Grant Service Account Access to the Privileged SCC before installation.**\n\nCreate the NeuVector namespace\n\n         oc new-project  neuvector\nLogin as system:admin account\n\n         oc login -u system:admin\n\nGrant Service Account Access to the Privileged SCC\n\n         oc -n neuvector adm policy add-scc-to-user privileged -z default\n\nThe following info will be added in the Privileged SCC users:\n\n         - system:serviceaccount:neuvector:default\n\nIn OpenShift 4.6+ use the following to check:\n\n         oc get rolebinding system:openshift:scc:privileged -n neuvector -o wide\n         NAME                              ROLE                                          AGE     USERS   GROUPS   SERVICEACCOUNTS\n         system:openshift:scc:privileged   ClusterRole/system:openshift:scc:privileged   9m22s                    neuvector/default\n\n\n**Add NeuVector license from NeuVector WebUI->setting**\n\n\n#Deploying the NeuVector Operator#\n\n\nPlease refer to the instructions [here](https://github.com/neuvector/neuvector-operator/blob/master/README.md)\n\n\n",
      "csv_display_name": "NeuVector Operator",
      "csv_metadata_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.",
      "csv_name": "neuvector-operator.v1.2.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:05:14.245000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "neuvector-certified-operator",
      "provided_apis": [
        {
          "group": "apm.neuvector.com",
          "kind": "Neuvector",
          "plural": "neuvectors",
          "version": "v1alpha1"
        }
      ],
      "provider": "NeuVector",
      "related_images": [
        {
          "digest": "sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "name": "neuvector-operator-487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1-annotation"
        },
        {
          "digest": "sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "name": "neuvector-operator"
        },
        {
          "digest": "sha256:55b3d9873846d0a8670b58e8a8a76c426d3aba74d4e5c4fca43d05c1dd296f10",
          "image": "registry.connect.redhat.com/neuvector/controller@sha256:55b3d9873846d0a8670b58e8a8a76c426d3aba74d4e5c4fca43d05c1dd296f10",
          "name": "controller"
        },
        {
          "digest": "sha256:fdd66288454dd01f4f618c8cf04c7da501d4362773266ec6f448d63e26e3a35c",
          "image": "registry.connect.redhat.com/neuvector/enforcer@sha256:fdd66288454dd01f4f618c8cf04c7da501d4362773266ec6f448d63e26e3a35c",
          "name": "enforcer"
        },
        {
          "digest": "sha256:73445c18ea18f131b6fa630a97623a3043d05758205ef93fc02fa920abbedaa6",
          "image": "registry.connect.redhat.com/neuvector/manager@sha256:73445c18ea18f131b6fa630a97623a3043d05758205ef93fc02fa920abbedaa6",
          "name": "manager"
        },
        {
          "digest": "sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "name": "scanner"
        },
        {
          "digest": "sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "image": "registry.access.redhat.com/ubi8@sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "name": "updater"
        },
        {
          "digest": "sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06",
          "name": "scanner-a802c012eee80444d9deea8c4402a1d977cf57d7b2b2044f90c9acc0e7ca3e06-annotation"
        },
        {
          "digest": "sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "image": "registry.access.redhat.com/ubi8@sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "name": "ubi8-910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.2.9",
      "version_original": "1.2.9"
    },
    {
      "_id": "61a57d29c17162a20c1c6894",
      "alm_examples": [
        {
          "api_version": "apm.neuvector.com/v1alpha1",
          "kind": "Neuvector",
          "metadata": {
            "name": "neuvector"
          },
          "spec": {
            "admissionwebhook": {
              "type": "ClusterIP"
            },
            "bottlerocket": {
              "enabled": false,
              "runtimePath": "/run/dockershim.sock"
            },
            "containerd": {
              "enabled": false,
              "path": "/var/run/containerd/containerd.sock"
            },
            "controller": {
              "apisvc": {
                "annotations": {},
                "route": {
                  "enabled": false,
                  "host": "",
                  "termination": "passthrough"
                },
                "type": ""
              },
              "azureFileShare": {
                "enabled": false,
                "secretName": "",
                "shareName": ""
              },
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "configmap": {
                "data": "",
                "enabled": false
              },
              "disruptionbudget": 0,
              "enabled": true,
              "federation": {
                "managedsvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                },
                "mastersvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                }
              },
              "image": "registry.connect.redhat.com/neuvector/controller",
              "ingress": {
                "annotations": {
                  "ingress.kubernetes.io/protocol": "https"
                },
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "pvc": {
                "accessModes": [
                  "ReadWriteMany"
                ],
                "capacity": "",
                "enabled": false,
                "storageClass": ""
              },
              "replicas": 3,
              "resources": {},
              "schedulerName": "",
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 1,
                  "maxUnavailable": 0
                },
                "type": "RollingUpdate"
              }
            },
            "crdwebhook": {
              "enabled": true,
              "type": "ClusterIP"
            },
            "crio": {
              "enabled": true,
              "path": "/var/run/crio/crio.sock"
            },
            "cve": {
              "scanner": {
                "dockerPath": "",
                "enabled": true,
                "image": "registry.connect.redhat.com/neuvector/scanner@sha256:5f2d23d20f9ea5d1d3bc56b758ddc3f3b4f57a9db47c7cc95e74f6d7a4072e00",
                "priorityClassName": "",
                "replicas": 3,
                "resources": {},
                "strategy": {
                  "rollingUpdate": {
                    "maxSurge": 1,
                    "maxUnavailable": 0
                  },
                  "type": "RollingUpdate"
                }
              },
              "updater": {
                "enabled": true,
                "image": "registry.access.redhat.com/ubi8@sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
                "priorityClassName": "",
                "schedule": "0 0 * * *",
                "secure": false
              }
            },
            "docker": {
              "enabled": false,
              "path": "/var/run/docker.sock"
            },
            "enforcer": {
              "enabled": true,
              "image": "registry.connect.redhat.com/neuvector/enforcer",
              "priorityClassName": "",
              "resources": {},
              "tolerations": [
                {
                  "effect": "NoSchedule",
                  "key": "node-role.kubernetes.io/master"
                }
              ]
            },
            "k3s": {
              "enabled": false,
              "runtimePath": "/run/k3s/containerd/containerd.sock"
            },
            "manager": {
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "enabled": true,
              "env": {
                "ssl": true
              },
              "image": "registry.connect.redhat.com/neuvector/manager",
              "ingress": {
                "annotations": {},
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "resources": {},
              "route": {
                "enabled": true,
                "host": "",
                "termination": "passthrough"
              },
              "svc": {
                "annotations": {},
                "loadBalancerIP": "",
                "type": "NodePort"
              }
            },
            "openshift": true,
            "psp": false,
            "resources": {},
            "serviceAccount": "default"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/neuvector/neuvector-operator-bundle@sha256:38e93c5f551f7ebfc1736a58cf2f07a793974fdd04f59af1c15df20e38e195da",
      "bundle_path_digest": "sha256:38e93c5f551f7ebfc1736a58cf2f07a793974fdd04f59af1c15df20e38e195da",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "beta",
      "creation_date": "2021-11-30T01:23:53.832000+00:00",
      "csv_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.\n\nThe NeuVector Operator runs  in the openshift container platform to deploy and manage the NeuVector Security cluster components. The NeuVector operator contains all necessary information to deploy NeuVector using helm charts. You simply need to install the NeuVector operator from the OpenShift embeded operator hub and create NeuVector instance. You can modify the NeuVector installation configuration by modifying yaml while creating the NeuVector instance such as imagePullSecrets, tag version, etc. Please refer to [github link](https://github.com/neuvector/neuvector-helm/tree/master/charts/core) for the values that can be modifed during installation. To upgrade to a newer version of NeuVector, just reapply the NeuVector instance with desired tag , which in turn pulls the specified NeuVector image tags and upgrades as per upgrade plan configured on the helm chart.  NeuVector Operator versions are tied to NeuVector product versions. Version 1.3.0 of the NeuVector Certified Operator deploys version 4.3.2 of NeuVector.\n\n**Complete below steps to Grant Service Account Access to the Privileged SCC before installation.**\n\nCreate the NeuVector namespace\n\n         oc new-project  neuvector\nLogin as system:admin account\n\n         oc login -u system:admin\n\nGrant Service Account Access to the Privileged SCC\n\n         oc -n neuvector adm policy add-scc-to-user privileged -z default\n\nThe following info will be added in the Privileged SCC users:\n\n         - system:serviceaccount:neuvector:default\n\nIn OpenShift 4.6+ use the following to check:\n\n         oc get rolebinding system:openshift:scc:privileged -n neuvector -o wide\n         system:openshift:scc:privileged   ClusterRole/system:openshift:scc:privileged   9m22s                    neuvector/default\n\n\n**Add NeuVector license from NeuVector WebUI->setting**\n\n\n#Deploying the NeuVector Operator#\n\n\nPlease refer to the instructions [here](https://github.com/neuvector/neuvector-operator/blob/master/README.md)\n\n\n",
      "csv_display_name": "NeuVector Operator",
      "csv_metadata_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.",
      "csv_name": "neuvector-operator.v1.3.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:05:20.616000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "neuvector-certified-operator",
      "provided_apis": [
        {
          "group": "apm.neuvector.com",
          "kind": "Neuvector",
          "plural": "neuvectors",
          "version": "v1alpha1"
        }
      ],
      "provider": "NeuVector",
      "related_images": [
        {
          "digest": "sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "name": "neuvector-operator-487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1-annotation"
        },
        {
          "digest": "sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "name": "neuvector-operator"
        },
        {
          "digest": "sha256:a748a22eff64576a89b15a0f70b0d50d781bc0bff809029e78cdcd19c105e6ff",
          "image": "registry.connect.redhat.com/neuvector/controller@sha256:a748a22eff64576a89b15a0f70b0d50d781bc0bff809029e78cdcd19c105e6ff",
          "name": "controller"
        },
        {
          "digest": "sha256:45c5e78ed5a72944dfdd3123623d71376fea8ef329e2980e162c633c58c049f2",
          "image": "registry.connect.redhat.com/neuvector/enforcer@sha256:45c5e78ed5a72944dfdd3123623d71376fea8ef329e2980e162c633c58c049f2",
          "name": "enforcer"
        },
        {
          "digest": "sha256:a7139cddaf9f7e53494cd9ad553331473466973f151489cb92bd6ffee864a56a",
          "image": "registry.connect.redhat.com/neuvector/manager@sha256:a7139cddaf9f7e53494cd9ad553331473466973f151489cb92bd6ffee864a56a",
          "name": "manager"
        },
        {
          "digest": "sha256:5f2d23d20f9ea5d1d3bc56b758ddc3f3b4f57a9db47c7cc95e74f6d7a4072e00",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:5f2d23d20f9ea5d1d3bc56b758ddc3f3b4f57a9db47c7cc95e74f6d7a4072e00",
          "name": "scanner"
        },
        {
          "digest": "sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "image": "registry.access.redhat.com/ubi8@sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "name": "updater"
        },
        {
          "digest": "sha256:5f2d23d20f9ea5d1d3bc56b758ddc3f3b4f57a9db47c7cc95e74f6d7a4072e00",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:5f2d23d20f9ea5d1d3bc56b758ddc3f3b4f57a9db47c7cc95e74f6d7a4072e00",
          "name": "scanner-5f2d23d20f9ea5d1d3bc56b758ddc3f3b4f57a9db47c7cc95e74f6d7a4072e00-annotation"
        },
        {
          "digest": "sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "image": "registry.access.redhat.com/ubi8@sha256:910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7",
          "name": "ubi8-910f6bc0b5ae9b555eb91b88d28d568099b060088616eba2867b07ab6ea457c7-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.3.0",
      "version_original": "1.3.0"
    },
    {
      "_id": "61a57d32c17162a20c1c6895",
      "alm_examples": [
        {
          "api_version": "apm.neuvector.com/v1alpha1",
          "kind": "Neuvector",
          "metadata": {
            "name": "neuvector"
          },
          "spec": {
            "admissionwebhook": {
              "type": "ClusterIP"
            },
            "bottlerocket": {
              "enabled": false,
              "runtimePath": "/run/dockershim.sock"
            },
            "containerd": {
              "enabled": false,
              "path": "/var/run/containerd/containerd.sock"
            },
            "controller": {
              "apisvc": {
                "annotations": {},
                "route": {
                  "enabled": false,
                  "host": "",
                  "termination": "passthrough"
                },
                "type": ""
              },
              "azureFileShare": {
                "enabled": false,
                "secretName": "",
                "shareName": ""
              },
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "configmap": {
                "data": "",
                "enabled": false
              },
              "disruptionbudget": 0,
              "enabled": true,
              "federation": {
                "managedsvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                },
                "mastersvc": {
                  "ingress": {
                    "annotations": {
                      "ingress.kubernetes.io/protocol": "https"
                    },
                    "enabled": false,
                    "host": "",
                    "path": "/",
                    "secretName": "",
                    "tls": false
                  },
                  "route": {
                    "enabled": false,
                    "host": "",
                    "termination": "passthrough"
                  },
                  "type": ""
                }
              },
              "image": "registry.connect.redhat.com/neuvector/controller",
              "ingress": {
                "annotations": {
                  "ingress.kubernetes.io/protocol": "https"
                },
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "pvc": {
                "accessModes": [
                  "ReadWriteMany"
                ],
                "capacity": "",
                "enabled": false,
                "storageClass": ""
              },
              "replicas": 3,
              "resources": {},
              "schedulerName": "",
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 1,
                  "maxUnavailable": 0
                },
                "type": "RollingUpdate"
              }
            },
            "crdwebhook": {
              "enabled": true,
              "type": "ClusterIP"
            },
            "crio": {
              "enabled": true,
              "path": "/var/run/crio/crio.sock"
            },
            "cve": {
              "scanner": {
                "dockerPath": "",
                "enabled": true,
                "image": "registry.connect.redhat.com/neuvector/scanner@sha256:c0c7095bcb36e93a4c074e5c97d652db5f0133022fd2ab6838a092e8959f2041",
                "priorityClassName": "",
                "replicas": 3,
                "resources": {},
                "strategy": {
                  "rollingUpdate": {
                    "maxSurge": 1,
                    "maxUnavailable": 0
                  },
                  "type": "RollingUpdate"
                }
              },
              "updater": {
                "enabled": true,
                "image": "registry.access.redhat.com/ubi8@sha256:060d7d6827b34949cc0fc58a50f72a5dccf00a4cc594406bdf5982f41dfe6118",
                "priorityClassName": "",
                "schedule": "0 0 * * *",
                "secure": false
              }
            },
            "docker": {
              "enabled": false,
              "path": "/var/run/docker.sock"
            },
            "enforcer": {
              "enabled": true,
              "image": "registry.connect.redhat.com/neuvector/enforcer",
              "priorityClassName": "",
              "resources": {},
              "tolerations": [
                {
                  "effect": "NoSchedule",
                  "key": "node-role.kubernetes.io/master"
                }
              ]
            },
            "k3s": {
              "enabled": false,
              "runtimePath": "/run/k3s/containerd/containerd.sock"
            },
            "manager": {
              "certificate": {
                "keyFile": "tls.key",
                "pemFile": "tls.pem",
                "secret": ""
              },
              "enabled": true,
              "env": {
                "ssl": true
              },
              "image": "registry.connect.redhat.com/neuvector/manager",
              "ingress": {
                "annotations": {},
                "enabled": false,
                "host": "",
                "path": "/",
                "secretName": "",
                "tls": false
              },
              "priorityClassName": "",
              "resources": {},
              "route": {
                "enabled": true,
                "host": "",
                "termination": "passthrough"
              },
              "svc": {
                "annotations": {},
                "loadBalancerIP": "",
                "type": "NodePort"
              }
            },
            "openshift": true,
            "psp": false,
            "resources": {},
            "serviceAccount": "default"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/neuvector/neuvector-operator-bundle@sha256:bd5db9f3403eee933627d3a1ef0c534cac8c7b53eda247589d546c1f6cfed71b",
      "bundle_path_digest": "sha256:bd5db9f3403eee933627d3a1ef0c534cac8c7b53eda247589d546c1f6cfed71b",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "beta",
      "creation_date": "2021-11-30T01:24:02.035000+00:00",
      "csv_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.\n\nThe NeuVector Operator runs  in the openshift container platform to deploy and manage the NeuVector Security cluster components. The NeuVector operator contains all necessary information to deploy NeuVector using helm charts. You simply need to install the NeuVector operator from the OpenShift embeded operator hub and create NeuVector instance. You can modify the NeuVector installation configuration by modifying yaml while creating the NeuVector instance such as imagePullSecrets, tag version, etc. Please refer to [github link](https://github.com/neuvector/neuvector-helm/tree/master/charts/core) for the values that can be modifed during installation. To upgrade to a newer version of NeuVector, just reapply the NeuVector instance with desired tag , which in turn pulls the specified NeuVector image tags and upgrades as per upgrade plan configured on the helm chart.  NeuVector Operator versions are tied to NeuVector product versions. Version 1.3.1 of the NeuVector Certified Operator deploys version 4.3.2-s1 of NeuVector.\n\n**Complete below steps to Grant Service Account Access to the Privileged SCC before installation.**\n\nCreate the NeuVector namespace\n\n         oc new-project  neuvector\nLogin as system:admin account\n\n         oc login -u system:admin\n\nGrant Service Account Access to the Privileged SCC\n\n         oc -n neuvector adm policy add-scc-to-user privileged -z default\n\nThe following info will be added in the Privileged SCC users:\n\n         - system:serviceaccount:neuvector:default\n\nIn OpenShift 4.6+ use the following to check:\n\n         oc get rolebinding system:openshift:scc:privileged -n neuvector -o wide\n         system:openshift:scc:privileged   ClusterRole/system:openshift:scc:privileged   9m22s                    neuvector/default\n\n\n**Add NeuVector license from NeuVector WebUI->setting**\n\n\n#Deploying the NeuVector Operator#\n\n\nPlease refer to the instructions [here](https://github.com/neuvector/neuvector-operator/blob/master/README.md)\n\n\n",
      "csv_display_name": "NeuVector Operator",
      "csv_metadata_description": "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.",
      "csv_name": "neuvector-operator.v1.3.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:05:28.038000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "neuvector-certified-operator",
      "provided_apis": [
        {
          "group": "apm.neuvector.com",
          "kind": "Neuvector",
          "plural": "neuvectors",
          "version": "v1alpha1"
        }
      ],
      "provider": "NeuVector",
      "related_images": [
        {
          "digest": "sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "name": "neuvector-operator-487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1-annotation"
        },
        {
          "digest": "sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "image": "registry.connect.redhat.com/neuvector/neuvector-operator@sha256:487e2d6e817b7e006fb90cf1d5da2964de665424acada7bc63b4fa7b642b64f1",
          "name": "neuvector-operator"
        },
        {
          "digest": "sha256:afa454d7a22de6161e6ff6b6f859ce15fa0bfc4e9d4e5e191b61125dfc5cad6b",
          "image": "registry.connect.redhat.com/neuvector/controller@sha256:afa454d7a22de6161e6ff6b6f859ce15fa0bfc4e9d4e5e191b61125dfc5cad6b",
          "name": "controller"
        },
        {
          "digest": "sha256:f9543cdf9bb338161a3f84a81381f26cbf724a23f6363583417c9da682e91cf8",
          "image": "registry.connect.redhat.com/neuvector/enforcer@sha256:f9543cdf9bb338161a3f84a81381f26cbf724a23f6363583417c9da682e91cf8",
          "name": "enforcer"
        },
        {
          "digest": "sha256:085bd24dadcd9d023c6600227ca088ed8d03ab83a70b62401477d10272450952",
          "image": "registry.connect.redhat.com/neuvector/manager@sha256:085bd24dadcd9d023c6600227ca088ed8d03ab83a70b62401477d10272450952",
          "name": "manager"
        },
        {
          "digest": "sha256:c0c7095bcb36e93a4c074e5c97d652db5f0133022fd2ab6838a092e8959f2041",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:c0c7095bcb36e93a4c074e5c97d652db5f0133022fd2ab6838a092e8959f2041",
          "name": "scanner"
        },
        {
          "digest": "sha256:060d7d6827b34949cc0fc58a50f72a5dccf00a4cc594406bdf5982f41dfe6118",
          "image": "registry.access.redhat.com/ubi8@sha256:060d7d6827b34949cc0fc58a50f72a5dccf00a4cc594406bdf5982f41dfe6118",
          "name": "updater"
        },
        {
          "digest": "sha256:c0c7095bcb36e93a4c074e5c97d652db5f0133022fd2ab6838a092e8959f2041",
          "image": "registry.connect.redhat.com/neuvector/scanner@sha256:c0c7095bcb36e93a4c074e5c97d652db5f0133022fd2ab6838a092e8959f2041",
          "name": "scanner-c0c7095bcb36e93a4c074e5c97d652db5f0133022fd2ab6838a092e8959f2041-annotation"
        },
        {
          "digest": "sha256:060d7d6827b34949cc0fc58a50f72a5dccf00a4cc594406bdf5982f41dfe6118",
          "image": "registry.access.redhat.com/ubi8@sha256:060d7d6827b34949cc0fc58a50f72a5dccf00a4cc594406bdf5982f41dfe6118",
          "name": "ubi8-060d7d6827b34949cc0fc58a50f72a5dccf00a4cc594406bdf5982f41dfe6118-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.3.1",
      "version_original": "1.3.1"
    },
    {
      "_id": "61a57d50c17162a20c1c689c",
      "alm_examples": [
        {
          "api_version": "pmem-csi.intel.com/v1beta1",
          "kind": "PmemCSIDeployment",
          "metadata": {
            "name": "pmem-csi.intel.com"
          },
          "spec": {
            "deviceMode": "lvm",
            "nodeSelector": {
              "feature.node.kubernetes.io/memory-nv.dax": "true"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/pmem-csi-operator-os@sha256:72c1ec043ba8bba57e710d1cabac54374612a18cbce05caca9b14310942faa8d",
      "bundle_path_digest": "sha256:72c1ec043ba8bba57e710d1cabac54374612a18cbce05caca9b14310942faa8d",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:24:32.229000+00:00",
      "csv_description": "\nIntel PMEM-CSI is a [CSI](https://github.com/container-storage-interface/spec)\nstorage driver for container orchestrators like Kubernetes. It makes local\npersistent memory ([PMEM](https://pmem.io/)) available as a filesystem volume to\ncontainer applications. This is the operator to deploy and manage the\n[PMEM-CSI](https://intel.github.io/pmem-csi/1.0/README.html)\ndriver on a Kubernetes cluster.\n\nRefer to the [PMEM-CSI documentation](https://intel.github.io/pmem-csi/1.0/README.html)\nfor more details on deploying and using the PMEM-CSI driver.\n",
      "csv_display_name": "Operator for PMEM-CSI driver",
      "csv_metadata_description": "An operator for deploying and managing the PMEM-CSI driver",
      "csv_name": "pmem-csi-operator.v1.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:07:23.919000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "pmem-csi-operator-os",
      "provided_apis": [
        {
          "group": "pmem-csi.intel.com",
          "kind": "PmemCSIDeployment",
          "plural": "pmemcsideployments",
          "version": "v1beta1"
        }
      ],
      "provider": "Intel\u00ae Corporation",
      "related_images": [
        {
          "digest": "sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "image": "registry.connect.redhat.com/intel/pmem-csi-driver-os@sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "name": "pmem-csi-driver-os-09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a-annotation"
        },
        {
          "digest": "sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "image": "registry.connect.redhat.com/intel/pmem-csi-driver-os@sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "name": "pmem-csi-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.0.0",
      "version_original": "1.0.0"
    },
    {
      "_id": "61a57d5827e166330707d96a",
      "alm_examples": [
        {
          "api_version": "pmem-csi.intel.com/v1beta1",
          "kind": "PmemCSIDeployment",
          "metadata": {
            "name": "pmem-csi.intel.com"
          },
          "spec": {
            "deviceMode": "lvm",
            "nodeSelector": {
              "feature.node.kubernetes.io/memory-nv.dax": "true"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/pmem-csi-operator-os@sha256:72c1ec043ba8bba57e710d1cabac54374612a18cbce05caca9b14310942faa8d",
      "bundle_path_digest": "sha256:72c1ec043ba8bba57e710d1cabac54374612a18cbce05caca9b14310942faa8d",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:24:40.141000+00:00",
      "csv_description": "\nIntel PMEM-CSI is a [CSI](https://github.com/container-storage-interface/spec)\nstorage driver for container orchestrators like Kubernetes. It makes local\npersistent memory ([PMEM](https://pmem.io/)) available as a filesystem volume to\ncontainer applications. This is the operator to deploy and manage the\n[PMEM-CSI](https://intel.github.io/pmem-csi/1.0/README.html)\ndriver on a Kubernetes cluster.\n\nRefer to the [PMEM-CSI documentation](https://intel.github.io/pmem-csi/1.0/README.html)\nfor more details on deploying and using the PMEM-CSI driver.\n",
      "csv_display_name": "Operator for PMEM-CSI driver",
      "csv_metadata_description": "An operator for deploying and managing the PMEM-CSI driver",
      "csv_name": "pmem-csi-operator.v1.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:07:30.336000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "pmem-csi-operator-os",
      "provided_apis": [
        {
          "group": "pmem-csi.intel.com",
          "kind": "PmemCSIDeployment",
          "plural": "pmemcsideployments",
          "version": "v1beta1"
        }
      ],
      "provider": "Intel\u00ae Corporation",
      "related_images": [
        {
          "digest": "sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "image": "registry.connect.redhat.com/intel/pmem-csi-driver-os@sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "name": "pmem-csi-driver-os-09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a-annotation"
        },
        {
          "digest": "sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "image": "registry.connect.redhat.com/intel/pmem-csi-driver-os@sha256:09c98a6588f3d9227f8ae8fc175b533b38590048b79cbdf367eeaa140926010a",
          "name": "pmem-csi-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.0.0",
      "version_original": "1.0.0"
    },
    {
      "_id": "61a57d60c17162a20c1c68a1",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:45853a8612cc9da123094499ac975eb2bc943346a0092fe9d892c5942170e77f",
      "bundle_path_digest": "sha256:45853a8612cc9da123094499ac975eb2bc943346a0092fe9d892c5942170e77f",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:24:48.340000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.6.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:07:36.877000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "name": "openstorage-operator-5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47-annotation"
        },
        {
          "digest": "sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": "<1.6.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.6.1",
      "version_original": "1.6.1"
    },
    {
      "_id": "61a57d68bfd4a5234d5960dc",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:45853a8612cc9da123094499ac975eb2bc943346a0092fe9d892c5942170e77f",
      "bundle_path_digest": "sha256:45853a8612cc9da123094499ac975eb2bc943346a0092fe9d892c5942170e77f",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:24:56.920000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.6.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:07:41.191000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "name": "openstorage-operator-5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47-annotation"
        },
        {
          "digest": "sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:5d156a64d4ba9aba18cbd6b3c717049e903aac65b6db32189500d50898ca2b47",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": "<1.6.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.6.1",
      "version_original": "1.6.1"
    },
    {
      "_id": "61a57d833e9240fca360f564",
      "alm_examples": [
        {
          "api_version": "rc.app.stacks/v1beta2",
          "kind": "RuntimeComponent",
          "metadata": {
            "name": "runtimecomponent-sample"
          },
          "spec": {
            "applicationImage": "registry.connect.redhat.com/ibm/open-liberty-samples@sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
            "expose": true,
            "replicas": 1,
            "service": {
              "port": 9080
            }
          }
        },
        {
          "api_version": "rc.app.stacks/v1beta2",
          "kind": "RuntimeOperation",
          "metadata": {
            "name": "runtimeoperation-sample"
          },
          "spec": {
            "command": [
              "./your_script.sh"
            ],
            "containerName": "app",
            "podName": "Specify_Pod_Name_Here"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ibm/runtime-component-operator-bundle@sha256:65cc8aa40608b76956ff8c19316b63f805d7a28e8d7697b9ea1d427888a2ccdf",
      "bundle_path_digest": "sha256:65cc8aa40608b76956ff8c19316b63f805d7a28e8d7697b9ea1d427888a2ccdf",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "beta2",
      "creation_date": "2021-11-30T01:25:23.246000+00:00",
      "csv_description": "This advanced Operator is capable of deploying any runtime component image with consistent, production-grade QoS. It enables enterprise architects to govern the way their applications get deployed & managed in the cluster, while dramatically reducing the learning curve for developers to deploy into Kubernetes - allowing them to focus on writing the code!\nHere are some key features:\n\n#### Application Lifecyle\nYou can deploy your runtime component container by either pointing to a container image, or an OpenShift ImageStream. When using an ImageStream the Operator will watch for any updates and will re-deploy the modified image.\n\n#### Custom RBAC\nThis Operator is capable of using a custom ServiceAccount from the caller, allowing it to follow RBAC restrictions. By default it creates a ServiceAccount if one is not specified, which can also be bound with specific roles.\n\n#### Environment Configuration\nYou can configure a variety of artifacts with your deployment, such as: labels, annotations, and environment variables from a ConfigMap, a Secret or a value.\n\n#### Routing\nExpose your application to external users via a single toggle to create a Route on OpenShift or an Ingress on other Kubernetes environments. Advanced configuration, such as TLS settings, are also easily enabled.  Expiring Route certificates are re-issued.\n\n#### High Availability via Horizontal Pod Autoscaling\nRun multiple instances of your application for high availability. Either specify a static number of replicas or easily configure horizontal auto scaling to create (and delete) instances based on resource consumption.\n\n#### Persistence and advanced storage\nEnable persistence for your application by specifying simple requirements: just tell us the size of the storage and where you would like it to be mounted and We will create and manage that storage for you.\nThis toggles a StatefulSet resource instead of a Deployment resource, so your container can recover transactions and state upon a pod restart.\nWe offer an advanced mode where the user specifies a built-in PersistentVolumeClaim, allowing them to configure many details of the persistent volume, such as its storage class and access mode.\n\n#### Service Binding\nEasily bind to available services in your cluster.  Your runtime components can expose and consume other services by simply specifying the target endpoinds: we take care of the heavy lifting such as creating k8s Secrets, injecting them into your container and watching for any changes in configuration!  This way your applications can dynamically reconnect to its required services without any intervention or interruption.\n\n#### Exposing metrics to Prometheus\nThe Runtime Component Operator exposes the runtime container's metrics via the [Prometheus Operator](https://operatorhub.io/operator/prometheus).\nUsers can pick between a basic mode, where they simply specify the label that Prometheus is watching to scrape the metrics from the container, or they can specify the full `ServiceMonitor` spec embedded into the RuntimeComponent's `spec.monitoring` key controlling things like the poll internal and security credentials.\n\n#### Easily mount logs and transaction directories\nIf you need to mount the logs and transaction data from your runtime component to an external volume such as NFS (or any storage supported in your cluster), simply add the following (customizing the folder location and size) to your RuntimeComponent CR:\n``` storage: size: 2Gi mountPath: \"/logs\" ```\n\n#### Integration with OpenShift Serverless\nDeploy your serverless runtime component using a single toggle.  The Operator will convert all of its generated resources into [Knative](https://knative.dev) resources, allowing your pod to automatically scale to 0 when it is idle.\n\n#### Integration with OpenShift's Topology UI\nWe set the corresponding labels to support OpenShift's Developer Topology UI, which allows you to visualize your entire set of deployments and how they are connected.\n\nSee our [**documentation**](https://github.com/application-stacks/runtime-component-operator/tree/main/doc/) for more information.\n",
      "csv_display_name": "Runtime Component",
      "csv_metadata_description": "Deploys any runtime component with dynamic and auto-tuning configuration",
      "csv_name": "runtime-component.v0.8.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:10:49.667000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "runtime-component-operator-certified",
      "provided_apis": [
        {
          "group": "rc.app.stacks",
          "kind": "RuntimeComponent",
          "plural": "runtimecomponents",
          "version": "v1beta2"
        },
        {
          "group": "rc.app.stacks",
          "kind": "RuntimeOperation",
          "plural": "runtimeoperations",
          "version": "v1beta2"
        }
      ],
      "provider": "Community",
      "related_images": [
        {
          "digest": "sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "image": "registry.connect.redhat.com/ibm/runtime-component-operator@sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "name": "runtime-component-operator-febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b-annotation"
        },
        {
          "digest": "sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "image": "registry.connect.redhat.com/ibm/runtime-component-operator@sha256:febfbe4a75018bfdb1f3cb13caaa3e5e321bf9f8ac5ca1405dae96f9798bde2b",
          "name": "manager"
        },
        {
          "digest": "sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
          "image": "registry.connect.redhat.com/ibm/open-liberty-samples@sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
          "name": "open-liberty-samples-8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.8.0",
      "version_original": "0.8.0"
    },
    {
      "_id": "61a57d8bbfd4a5234d5960e0",
      "alm_examples": [
        {
          "api_version": "csi.nec.com/v1",
          "kind": "SANStorageCSI",
          "metadata": {
            "name": "sanstoragecsi"
          },
          "spec": {
            "driverName": "san.csi.nec.com",
            "images": {
              "csiDriver": "",
              "externalAttacher": "registry.redhat.io/openshift4/ose-csi-external-attacher@sha256:92cb1a244497e71cfc27437f07b95645753f64f7f994db20bf9e5cbfb89ae083",
              "externalProvisioner": "registry.redhat.io/openshift4/ose-csi-external-provisioner@sha256:faefca15575552112c8463ade19ebf5f6ce27a65b9e7286ea74fd6a31a2f2715",
              "livenessProbe": "registry.redhat.io/openshift4/ose-csi-livenessprobe@sha256:241e288cf83443304834af837f9f71a6216c038dd27196748184aa95790b75fe",
              "nodeRegistrar": "registry.redhat.io/openshift4/ose-csi-node-driver-registrar@sha256:dcba3ce367bd546c84d412f57589cd6d2fcde6a882791048ed13f1438b6453c0"
            },
            "parameters": {
              "controller": {
                "logLevel": 5
              },
              "node": {
                "livenessProbePort": 9808,
                "logLevel": 5,
                "maxVolumesPerNode": 1024
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/nec/sanstoragecsi-operator-bundle@sha256:a547f2b1018aebda3dadf2599d082dd7cfebc3e255571634d97b3b3f6161436e",
      "bundle_path_digest": "sha256:a547f2b1018aebda3dadf2599d082dd7cfebc3e255571634d97b3b3f6161436e",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T01:25:31.457000+00:00",
      "csv_description": "This operator deploys the NEC Storage M Series CSI Driver on OpenShift Container Platform.\n\nNEC Storage M Series CSI Driver provides persistent storage for stateful applications using NEC Storage M Series.\nPlease refer to the documentation of the NEC Storage M Series CSI Driver for detail information about supported NEC Storage Platforms and supported CSI features.\n",
      "csv_display_name": "NEC Storage M Series CSI Operator",
      "csv_metadata_description": "An operator for managing the NEC Storage M Series CSI Driver",
      "csv_name": "sanstoragecsi-operator-bundle.v1.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:11:01.190000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "sanstoragecsi-operator-bundle",
      "provided_apis": [
        {
          "group": "csi.nec.com",
          "kind": "SANStorageCSI",
          "plural": "sanstoragecsis",
          "version": "v1"
        }
      ],
      "provider": "NEC",
      "related_images": [
        {
          "digest": "sha256:1e385777c7ce4bfd48902fbbb8023a6eba3f5dff4dc08e200450bc6f0bcb595c",
          "image": "registry.connect.redhat.com/nec/sanstoragecsi-operator@sha256:1e385777c7ce4bfd48902fbbb8023a6eba3f5dff4dc08e200450bc6f0bcb595c",
          "name": "sanstoragecsi-operator-bundle"
        },
        {
          "digest": "sha256:dcba3ce367bd546c84d412f57589cd6d2fcde6a882791048ed13f1438b6453c0",
          "image": "registry.redhat.io/openshift4/ose-csi-node-driver-registrar@sha256:dcba3ce367bd546c84d412f57589cd6d2fcde6a882791048ed13f1438b6453c0",
          "name": "ose-csi-node-driver-registrar-dcba3ce367bd546c84d412f57589cd6d2fcde6a882791048ed13f1438b6453c0-annotation"
        },
        {
          "digest": "sha256:241e288cf83443304834af837f9f71a6216c038dd27196748184aa95790b75fe",
          "image": "registry.redhat.io/openshift4/ose-csi-livenessprobe@sha256:241e288cf83443304834af837f9f71a6216c038dd27196748184aa95790b75fe",
          "name": "ose-csi-livenessprobe-241e288cf83443304834af837f9f71a6216c038dd27196748184aa95790b75fe-annotation"
        },
        {
          "digest": "sha256:faefca15575552112c8463ade19ebf5f6ce27a65b9e7286ea74fd6a31a2f2715",
          "image": "registry.redhat.io/openshift4/ose-csi-external-provisioner@sha256:faefca15575552112c8463ade19ebf5f6ce27a65b9e7286ea74fd6a31a2f2715",
          "name": "ose-csi-external-provisioner-faefca15575552112c8463ade19ebf5f6ce27a65b9e7286ea74fd6a31a2f2715-annotation"
        },
        {
          "digest": "sha256:92cb1a244497e71cfc27437f07b95645753f64f7f994db20bf9e5cbfb89ae083",
          "image": "registry.redhat.io/openshift4/ose-csi-external-attacher@sha256:92cb1a244497e71cfc27437f07b95645753f64f7f994db20bf9e5cbfb89ae083",
          "name": "ose-csi-external-attacher-92cb1a244497e71cfc27437f07b95645753f64f7f994db20bf9e5cbfb89ae083-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.0.0",
      "version_original": "1.0.0"
    },
    {
      "_id": "61a57d93bfd4a5234d5960e2",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:e12119fa5cca31b75f9be94ea70e1980b7fe5da1783475a073ac7ade2fbb360b",
      "bundle_path_digest": "sha256:e12119fa5cca31b75f9be94ea70e1980b7fe5da1783475a073ac7ade2fbb360b",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.20",
      "creation_date": "2021-11-30T01:25:39.409000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.20.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:13.968000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:379efe0c2541e1080aae564eb0ebb697b0995fc447623c037a37b8bcfb3a4e9a",
          "image": "quay.io/tigera/operator@sha256:379efe0c2541e1080aae564eb0ebb697b0995fc447623c037a37b8bcfb3a4e9a",
          "name": "operator-379efe0c2541e1080aae564eb0ebb697b0995fc447623c037a37b8bcfb3a4e9a-annotation"
        },
        {
          "digest": "sha256:379efe0c2541e1080aae564eb0ebb697b0995fc447623c037a37b8bcfb3a4e9a",
          "image": "quay.io/tigera/operator@sha256:379efe0c2541e1080aae564eb0ebb697b0995fc447623c037a37b8bcfb3a4e9a",
          "name": "tigera-operator"
        }
      ],
      "replaces": null,
      "skip_range": "<1.20.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.20.1",
      "version_original": "1.20.1"
    },
    {
      "_id": "61a57d9bc17162a20c1c68a7",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:953d43c1d576ca70a0856d9f0cf8bd2a2e98e7fcb9e2fbff8cf5a214eae220aa",
      "bundle_path_digest": "sha256:953d43c1d576ca70a0856d9f0cf8bd2a2e98e7fcb9e2fbff8cf5a214eae220aa",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.20",
      "creation_date": "2021-11-30T01:25:47.799000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.20.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:19.773000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:078961af067649277ecfb6473a0ab9f098847b73821fd6b7fd87cc31cd733c98",
          "image": "quay.io/tigera/operator@sha256:078961af067649277ecfb6473a0ab9f098847b73821fd6b7fd87cc31cd733c98",
          "name": "operator-078961af067649277ecfb6473a0ab9f098847b73821fd6b7fd87cc31cd733c98-annotation"
        },
        {
          "digest": "sha256:078961af067649277ecfb6473a0ab9f098847b73821fd6b7fd87cc31cd733c98",
          "image": "quay.io/tigera/operator@sha256:078961af067649277ecfb6473a0ab9f098847b73821fd6b7fd87cc31cd733c98",
          "name": "tigera-operator"
        }
      ],
      "replaces": null,
      "skip_range": "<1.20.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.20.2",
      "version_original": "1.20.2"
    },
    {
      "_id": "61a57da33e9240fca360f568",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:af132b6324918a5acfd1523acce674552d62035314bbb55f92ef11ea3081a09d",
      "bundle_path_digest": "sha256:af132b6324918a5acfd1523acce674552d62035314bbb55f92ef11ea3081a09d",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.20",
      "creation_date": "2021-11-30T01:25:55.818000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.20.3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:24.742000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:b9c32848a367986af987793cef0ca7b656d235f689d57270027225f8a0dee068",
          "image": "quay.io/tigera/operator@sha256:b9c32848a367986af987793cef0ca7b656d235f689d57270027225f8a0dee068",
          "name": "operator-b9c32848a367986af987793cef0ca7b656d235f689d57270027225f8a0dee068-annotation"
        },
        {
          "digest": "sha256:b9c32848a367986af987793cef0ca7b656d235f689d57270027225f8a0dee068",
          "image": "quay.io/tigera/operator@sha256:b9c32848a367986af987793cef0ca7b656d235f689d57270027225f8a0dee068",
          "name": "tigera-operator"
        }
      ],
      "replaces": null,
      "skip_range": "<1.20.3",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.20.3",
      "version_original": "1.20.3"
    },
    {
      "_id": "61a57dac3e9240fca360f569",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:4d0d814fcfeb628aae8a05cb7a0a416ae85395197950085c907b6cdcf2fb4317",
      "bundle_path_digest": "sha256:4d0d814fcfeb628aae8a05cb7a0a416ae85395197950085c907b6cdcf2fb4317",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.20",
      "creation_date": "2021-11-30T01:26:04.448000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.20.4",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:30.179000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:bd93e66be5cfbc123fe4e8c3f6e8ddf7654217bf26136f06dcf23f28b53063d2",
          "image": "quay.io/tigera/operator@sha256:bd93e66be5cfbc123fe4e8c3f6e8ddf7654217bf26136f06dcf23f28b53063d2",
          "name": "operator-bd93e66be5cfbc123fe4e8c3f6e8ddf7654217bf26136f06dcf23f28b53063d2-annotation"
        },
        {
          "digest": "sha256:bd93e66be5cfbc123fe4e8c3f6e8ddf7654217bf26136f06dcf23f28b53063d2",
          "image": "quay.io/tigera/operator@sha256:bd93e66be5cfbc123fe4e8c3f6e8ddf7654217bf26136f06dcf23f28b53063d2",
          "name": "tigera-operator"
        }
      ],
      "replaces": null,
      "skip_range": "<1.20.4",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.20.4",
      "version_original": "1.20.4"
    },
    {
      "_id": "61a57dbc3e9240fca360f56d",
      "alm_examples": [
        {
          "api_version": "charts.helm.k8s.io/v1",
          "kind": "OpenshiftXray",
          "metadata": {
            "name": "openshiftxray"
          },
          "spec": {
            "xray": {
              "analysis": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/xray-analysis"
                },
                "name": "xray-analysis",
                "podManagementPolicy": "Parallel",
                "updateStrategy": "RollingUpdate"
              },
              "common": {
                "xrayGroupId": "1000721035",
                "xrayUserId": "1000721035",
                "xrayVersion": "3.33.3-1"
              },
              "database": {
                "password": "OVERRIDE",
                "url": "OVERRIDE",
                "user": "OVERRIDE"
              },
              "global": {},
              "indexer": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/xray-indexer"
                },
                "name": "xray-indexer",
                "podManagementPolicy": "Parallel",
                "updateStrategy": "RollingUpdate"
              },
              "initContainerImage": "registry.connect.redhat.com/jfrog/init@sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
              "persist": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/xray-persist"
                },
                "name": "xray-persist",
                "persistence": {
                  "size": "10Gi"
                },
                "podManagementPolicy": "Parallel",
                "updateStrategy": "RollingUpdate"
              },
              "postgresql": {
                "enabled": false
              },
              "rabbitmq": {
                "auth": {
                  "erlangCookie": "XRAYRABBITMQCLUSTER",
                  "password": "xray",
                  "tls": {
                    "caCertificate": "",
                    "enabled": false,
                    "failIfNoPeerCert": true,
                    "serverCertificate": "",
                    "serverKey": "",
                    "sslOptionsVerify": "verify_peer"
                  },
                  "username": "xray"
                },
                "enabled": true,
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/xray-rabbitmq",
                  "tag": "3.33.3-1"
                },
                "podSecurityContext": {
                  "fsGroup": 1000721001,
                  "runAsUser": 1000721001
                },
                "rbac": {
                  "create": true
                },
                "replicaCount": 1
              },
              "rabbitmq-ha": {
                "enabled": false,
                "image": {
                  "repository": "registry.connect.redhat.com/jfrog/xray-rabbitmq",
                  "tag": "3.33.3-1"
                },
                "initContainer": {
                  "enabled": false
                },
                "managementPassword": "guest",
                "managementUsername": "guest",
                "rabbitmqPassword": "guest",
                "rabbitmqUsername": "guest",
                "replicaCount": 1,
                "securityContext": {
                  "fsGroup": 1000721035,
                  "runAsGroup": 1000721035,
                  "runAsUser": 1000721035
                }
              },
              "replicaCount": 1,
              "router": {
                "image": {
                  "imagePullPolicy": "IfNotPresent",
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/xray-router",
                  "tag": "3.33.3-1"
                },
                "name": "router"
              },
              "server": {
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/xray-server"
                },
                "name": "xray-server",
                "podManagementPolicy": "Parallel",
                "replicaCount": 1,
                "updateStrategy": "RollingUpdate"
              },
              "unifiedUpgradeAllowed": "true",
              "xray": {
                "consoleLog": false,
                "jfrogUrl": "OVERRIDE",
                "joinKey": "OVERRIDE",
                "masterKey": "OVERRIDE"
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/jfrog/xray-operator-bundle@sha256:57874a477ec87a6f1b54d45c821f42cde38291c7f8a412263a6a8a40832cbb16",
      "bundle_path_digest": "sha256:57874a477ec87a6f1b54d45c821f42cde38291c7f8a412263a6a8a40832cbb16",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:26:20.956000+00:00",
      "csv_description": "## Overview\nOpenshift Operator to deploy JFrog Xray Continuous Security scanner into your Openshift cluster.\nNOTE: Artifactory is required for JFrog Xray to connect with and scan artifacts against.\n### Major version v2.0.4 Breaking change notification !!!\nThis release has major bug fix for Rabbitmq Pod.\nPlease update to version 2.0.4 of the operator.\n### Major version v2.0.0 Breaking change notification !!!\nXray is dependent upon Rabbitmq. The version of Rabbitmq that this chart uses has significantly changed from version 1.1.8 of the operator.\nFor full details on how to migrate please visit:\n`https://github.com/jfrog/charts/blob/master/stable/xray/RABBITMQ_MIGRATION_NOTES.md`\n### Security Context Constraints\nTo deploy this helm chart you will need to be a cluster admin w/ access to the anyuid scc and add the operator service account to the anyuid scc.\n\n```\noc adm policy add-scc-to-user anyuid -z xray-operator\n```\n```\noc adm policy add-scc-to-user anyuid -z openshiftxray\n```\n```\noc adm policy add-scc-to-user anyuid -z openshiftxray-rabbitmq-ha\n```\n\n## Usage\n\nAn external DB is required. The operator will not deploy a DB but will require you to specify the configuration values to connect to it.\n\nSearch for JFrog and click JFrog Xray Operator to install.\n\nGo to the Installed Operators.\n\nWait for the JFrog Xray Operator to complete the installation.\n\nOpen the Operator and click on the provided API: Xray\n\nClick Create New Instance and provide the following parameters for your DB configuration:\n\n```\nJFROG_URL\nDATABASE_URL\nDATABASE_USER\nDATABASE_PASSWORD\n```\n\nJFROG_URL is the external ip or DNS of your Artifactory to connect Xray to. Artifactory is required to use this operator.\nYou can set your JFROG_URL to the service name of your Artifactory Nginx:\n``` oc get svc -n my_namespace | grep nginx ```\nDATABASE_URL must be a Postgresql URL in the format:\n``\npostgres://postgres-postgresql:5432/xraydb?sslmode=disable\n``\nDATABASE_USER and DATABASE_PASSWORD must supply a valid user on Postgresql.\n\nClick Create for Xray to deploy into OpenShift.\n\nOpen Artifactory in a web browser to complete the onboarding wizard for Xray!\n\n### Air gap environments\n\nTo use Xray Operator in an air gap environment you will need to download the images as image streams into your Openshift air gap cluster manually.\n\nUse the image overrides to then specify the image stream locations that are local to your cluster.\n\nNext you will need to setup the database of index data for xray to use when scanning artifacts.\n\nFollow the link below for instructions on setup:\n\nhttps://www.jfrog.com/confluence/display/JFROG/Configuring+Xray#ConfiguringXray-SynchronizingtheDatabase\n\n",
      "csv_display_name": "JFrog Xray Continuous Security Operator",
      "csv_metadata_description": "JFrog Xray Enterprise deploys Xray continuous security scanner into Openshift (Requires Jfrog Artifactory)",
      "csv_name": "xray-operator.v2.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:13:36.759000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "openshiftxray-operator",
      "provided_apis": [
        {
          "group": "charts.helm.k8s.io",
          "kind": "OpenshiftXray",
          "plural": "openshiftxrays",
          "version": "v1"
        }
      ],
      "provider": "JFrog",
      "related_images": [
        {
          "digest": "sha256:79fcd178d5f5f0d69daf714edd9fbf8f1bebb784513cf5d45ccbd7fd8c3a3a2c",
          "image": "registry.connect.redhat.com/jfrog/xray-operator@sha256:79fcd178d5f5f0d69daf714edd9fbf8f1bebb784513cf5d45ccbd7fd8c3a3a2c",
          "name": "xray-operator-79fcd178d5f5f0d69daf714edd9fbf8f1bebb784513cf5d45ccbd7fd8c3a3a2c-annotation"
        },
        {
          "digest": "sha256:79fcd178d5f5f0d69daf714edd9fbf8f1bebb784513cf5d45ccbd7fd8c3a3a2c",
          "image": "registry.connect.redhat.com/jfrog/xray-operator@sha256:79fcd178d5f5f0d69daf714edd9fbf8f1bebb784513cf5d45ccbd7fd8c3a3a2c",
          "name": "xray-operator"
        },
        {
          "digest": "sha256:8321f4971e7f65f8eb39cda6b6fde2e504cbdbce2139849593d8d8431484cba0",
          "image": "registry.connect.redhat.com/jfrog/xray-server@sha256:8321f4971e7f65f8eb39cda6b6fde2e504cbdbce2139849593d8d8431484cba0",
          "name": "xray_server_image_repository"
        },
        {
          "digest": "sha256:c96159770e67caa4004444361549292732d7a080d3ffe44900c148e387ae5f85",
          "image": "registry.connect.redhat.com/jfrog/xray-analysis@sha256:c96159770e67caa4004444361549292732d7a080d3ffe44900c148e387ae5f85",
          "name": "xray_analysis_image_repository"
        },
        {
          "digest": "sha256:ddf1b7980fcc690947c5385141725b20af250cf0e332ededc50babb217840265",
          "image": "registry.connect.redhat.com/jfrog/xray-persist@sha256:ddf1b7980fcc690947c5385141725b20af250cf0e332ededc50babb217840265",
          "name": "xray_persist_image_repository"
        },
        {
          "digest": "sha256:68f5d645dcdfeeb8d3364e176012518faaa995e5a585113fe7904fdf04f9adfc",
          "image": "registry.connect.redhat.com/jfrog/xray-indexer@sha256:68f5d645dcdfeeb8d3364e176012518faaa995e5a585113fe7904fdf04f9adfc",
          "name": "xray_indexer_image_repository"
        },
        {
          "digest": "sha256:1bf671848a06330b350ffeb0c2e90c1591cce5930d1398126377c01c70841319",
          "image": "registry.connect.redhat.com/jfrog/xray-router@sha256:1bf671848a06330b350ffeb0c2e90c1591cce5930d1398126377c01c70841319",
          "name": "xray_router_image_repository"
        },
        {
          "digest": "sha256:65a95da372693c96bdf9b7bcf21e757dc09569cf2eb66afd9bca4c552ad78f01",
          "image": "registry.connect.redhat.com/jfrog/xray-rabbitmq@sha256:65a95da372693c96bdf9b7bcf21e757dc09569cf2eb66afd9bca4c552ad78f01",
          "name": "xray_rabbitmq_image_repository"
        },
        {
          "digest": "sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
          "image": "registry.connect.redhat.com/jfrog/init@sha256:164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8",
          "name": "init-164b41720a37f75c6129c8a28d05cc56f821022313d44ff918cce4a2146d93e8-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.0.9",
      "version_original": "2.0.9"
    },
    {
      "_id": "61a57dc4bfd4a5234d5960e5",
      "alm_examples": [
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAgent",
          "metadata": {
            "labels": {
              "app": "agent",
              "vendor": "zabbix"
            },
            "name": "zabbix-agent"
          },
          "spec": {
            "active_allow": true,
            "activeservers": "",
            "allow_key": "",
            "allow_privileged": true,
            "buffer#": 100,
            "buffer_send": 5,
            "debug_level": 3,
            "deny_key": "system.run[*]",
            "host_interface": "",
            "host_interface_item": "",
            "hostname": "",
            "hostname_item": "system.hostname",
            "load_module": "",
            "log_remote_commands": true,
            "max_lines_per_second": 20,
            "metadata": "",
            "metadata_item": "",
            "passive_allow": true,
            "passive_servers": "",
            "refresh_active_checks": 120,
            "server_host": "zabbix-server",
            "start_agents": 3,
            "timeout": 3,
            "tls_accept": "unencrypted",
            "tls_ca_file_name": "",
            "tls_cert_file_name": "",
            "tls_cipher_all": "",
            "tls_cipher_cert_13": "",
            "tls_cipher_psk": "",
            "tls_cipherall_13": "",
            "tls_connect": "unencrypted",
            "tls_crl_file_name": "",
            "tls_key_file_name": "",
            "tls_psk_file_name": "",
            "tls_psk_identity": "",
            "tls_server_cert_issuer": "",
            "tls_server_cert_subject": "",
            "tlsciphercert": "",
            "tlscipherpsk13": "",
            "unsafe_user_parameters": false
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAppliance",
          "metadata": {
            "labels": {
              "app": "appliance",
              "vendor": "zabbix"
            },
            "name": "zabbix-appliance"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_double_ieee754": true,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixFull",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-full"
          },
          "spec": {
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlsciphercert": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxyMysql",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-mysql"
          },
          "spec": {
            "db_server_port": 3306,
            "internal_db": true,
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix_proxy",
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxySqlite",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-sqlite"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "proxy#": 1
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixServer",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-server"
          },
          "spec": {
            "db_server_host": "mysql-server",
            "db_server_port": 3306,
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix",
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAgent",
          "metadata": {
            "labels": {
              "app": "agent",
              "vendor": "zabbix"
            },
            "name": "zabbix-agent"
          },
          "spec": {
            "active_allow": true,
            "activeservers": "",
            "allow_key": "",
            "allow_privileged": true,
            "buffer#": 100,
            "buffer_send": 5,
            "debug_level": 3,
            "deny_key": "system.run[*]",
            "host_interface": "",
            "host_interface_item": "",
            "hostname": "",
            "hostname_item": "system.hostname",
            "load_module": "",
            "log_remote_commands": true,
            "max_lines_per_second": 20,
            "metadata": "",
            "metadata_item": "",
            "passive_allow": true,
            "passive_servers": "",
            "refresh_active_checks": 120,
            "server_host": "zabbix-server",
            "start_agents": 3,
            "timeout": 3,
            "tls_accept": "unencrypted",
            "tls_ca_file_name": "",
            "tls_cert_file_name": "",
            "tls_cipher_all": "",
            "tls_cipher_cert_13": "",
            "tls_cipher_psk": "",
            "tls_cipherall_13": "",
            "tls_connect": "unencrypted",
            "tls_crl_file_name": "",
            "tls_key_file_name": "",
            "tls_psk_file_name": "",
            "tls_psk_identity": "",
            "tls_server_cert_issuer": "",
            "tls_server_cert_subject": "",
            "tlsciphercert": "",
            "tlscipherpsk13": "",
            "unsafe_user_parameters": false
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixServer",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-server"
          },
          "spec": {
            "db_server_host": "mysql-server",
            "db_server_port": 3306,
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix",
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysqlsecret": "mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxySqlite",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-sqlite"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "proxy#": 1
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxyMysql",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-mysql"
          },
          "spec": {
            "db_server_port": 3306,
            "internal_db": true,
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix_proxy",
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixFull",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-full"
          },
          "spec": {
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlsciphercert": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAppliance",
          "metadata": {
            "labels": {
              "app": "appliance",
              "vendor": "zabbix"
            },
            "name": "zabbix-appliance"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_double_ieee754": true,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "mysql-secrets"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/zabbix/zabbixoperator-certified-bundle@sha256:236d7cc772634f20540dc153f9a7fc66357d7d4852962c5c7b5daff61c99e5c8",
      "bundle_path_digest": "sha256:236d7cc772634f20540dc153f9a7fc66357d7d4852962c5c7b5daff61c99e5c8",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "lts",
      "creation_date": "2021-11-30T01:26:28.907000+00:00",
      "csv_description": "## About this Operator\n\nZabbix helps you to real-time monitoring of millions of metrics collected from tens of thousands of servers, virtual machines and network devices.\nThe Zabbix Operator allows users to easily deploy, manage, and maintain Zabbix deployments on OpenShift. By installing this integration you will be able to deploy Zabbix server / proxies and other components with a single command.\n## Supported Features\n* **Zabbix Server** - Simple Zabbix installation with included Zabbix server, Zabbix web-interface and Zabbix Java Gateway with MySQL database support. The feature does not provide MySQL service and requires an external MySQL database. \n* **Zabbix Server (Full)** - Zabbix installation with included Zabbix server, Zabbix web-interface, Zabbix Java Gateway and MySQL server instance.\n* **Zabbix proxy (SQLite3)** - Very simple way to gain power of Zabbix proxy. The feature has  SQLite3 support for Zabbix proxies and allow to specify amount of proxies. \n* **Zabbix proxy (MySQL)** - Another option of Zabbix proxy. The option support and deliver MySQL database.\n* **Zabbix agent** - Zabbix agent can be deployed on each available node for stability and performance monitoring on remote nodes. It allows to gather metrics with full automation!\n* **Zabbix Appliance** - Zabbix appliance very simple way to test and check Zabbix features. The option provides all core components in one solution. It includes Zabbix server, Zabbix Java Gateway, Zabbix web-interface and MySQL server in deployment. It is very useful for testing Zabbix features!\n## Prerequisites\nAll deployment options are require additional information during deployment. Please, check the following instructions and provide required configuration:\n* **Zabbix Server** - MySQL database host information and MySQL database credentials in specially formatted *Secret*. Additionally it is possible to specify SSL certificates for HTTPS support in *Secret*.\n* **Zabbix Server (Full)** - MySQL database credentials in specially formatted *Secret*. MySQL database volume name information. Additionally it is possible to specify SSL certificates for HTTPS support in *Secret*.\n* **Zabbix proxy (SQLite3)** - Zabbix server host information only.\n* **Zabbix proxy (MySQL)** - MySQL database credentials in specially formatted *Secrets* and Zabbix server host information.\n* **Zabbix agent** - Zabbix server host information only for outgoing and incoming connections. Zabbix agent uses \"privileged\" mode to monitor node resources! For example, running processes.\n* **Zabbix Appliance** - MySQL database credentials in specially formatted *Secret*. MySQL database volume name information. Additionally it is possible to specify SSL certificates for HTTPS support in *Secret*.\n### MySQL credentials\n```\nkind: Secret\napiVersion: v1\nmetadata:\n  name: zabbix-full-secrets\ndata:\n  mysql_root_password: emFiYml4X3N1cGVyX3Jvb3Q= [1]\n  mysql_zabbix_password: emFiYml4X3VzZXJfcGFzc3dvcmQ= [2]\n  mysql_zabbix_username: emFiYml4 [3]\ntype: Opaque\n```\nUsing MySQL root password (*mysqlrootpassword* [1]) Zabbix server / proxy will try to create MySQL database schema with grant permissions to *mysqlzabbixusername* [2] and *mysqlzabbixpassword* [3].\n### SSL certificates for HTTPS\n```\nkind: Secret\napiVersion: v1\nmetadata:\n  name: zabbix-web-sslsecret\ndata:\n  ssl.crt: >-\n   < ssl.crt data>\n  ssl.key: >-\n\t < ssl.key data >\n  dhparam.pem: >-\n   <  dhparam.pem data >\n```\nFiles *ssl.crt*, *ssl.key* and *dhparam.perm* are required for Zabbix web-interface for SSL support.\n",
      "csv_display_name": "Zabbix Operator",
      "csv_metadata_description": "Zabbix operator with multiple deployment variants and different components",
      "csv_name": "zabbix-operator-certified.v0.0.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:13:42.217000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "zabbix-operator-certified",
      "provided_apis": [
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixProxyMysql",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixProxySqlite",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixServer",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixAgent",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixAppliance",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixFull",
          "version": "v1alpha1"
        }
      ],
      "provider": "Zabbix LLC",
      "related_images": [
        {
          "digest": "sha256:c2dee633a667191d3272bf1652412ac1077455f18b90168ddcaa2ac8882f0c66",
          "image": "registry.connect.redhat.com/zabbix/zabbixoperator-certified@sha256:c2dee633a667191d3272bf1652412ac1077455f18b90168ddcaa2ac8882f0c66",
          "name": "zabbixoperator-certified-c2dee633a667191d3272bf1652412ac1077455f18b90168ddcaa2ac8882f0c66-annotation"
        },
        {
          "digest": "sha256:c2dee633a667191d3272bf1652412ac1077455f18b90168ddcaa2ac8882f0c66",
          "image": "registry.connect.redhat.com/zabbix/zabbixoperator-certified@sha256:c2dee633a667191d3272bf1652412ac1077455f18b90168ddcaa2ac8882f0c66",
          "name": "ansible"
        },
        {
          "digest": "sha256:c2dee633a667191d3272bf1652412ac1077455f18b90168ddcaa2ac8882f0c66",
          "image": "registry.connect.redhat.com/zabbix/zabbixoperator-certified@sha256:c2dee633a667191d3272bf1652412ac1077455f18b90168ddcaa2ac8882f0c66",
          "name": "operator"
        },
        {
          "digest": "sha256:2f76e7cbece9d9366b613bcb1079b030ddbcc5e97b2f133b73bd0131f0869725",
          "image": "registry.connect.redhat.com/zabbix/zabbix-server-mysql-50@sha256:2f76e7cbece9d9366b613bcb1079b030ddbcc5e97b2f133b73bd0131f0869725",
          "name": "zbx_server_mysql"
        },
        {
          "digest": "sha256:9f3ba82445ea3d9754f016e21b2ea1c99c1958da928f49aee1b18377af78d365",
          "image": "registry.connect.redhat.com/zabbix/zabbix-web-mysql-50@sha256:9f3ba82445ea3d9754f016e21b2ea1c99c1958da928f49aee1b18377af78d365",
          "name": "zbx_web_mysql"
        },
        {
          "digest": "sha256:a216de448dc10b2797a70f4fc6664c2bd611840b7b6c26f066635d48c606bf06",
          "image": "registry.connect.redhat.com/zabbix/zabbix-java-gateway-50@sha256:a216de448dc10b2797a70f4fc6664c2bd611840b7b6c26f066635d48c606bf06",
          "name": "zbx_java_gateway"
        },
        {
          "digest": "sha256:054ad28ade616642fb50fd38a48df2d00a9c0c6a57df1e367caeceb6469f6c42",
          "image": "registry.connect.redhat.com/zabbix/zabbix-proxy-mysql-50@sha256:054ad28ade616642fb50fd38a48df2d00a9c0c6a57df1e367caeceb6469f6c42",
          "name": "zbx_proxy_mysql"
        },
        {
          "digest": "sha256:713a6223a01ee57efb719d6f491ef779d74104a1bc1b8599eade8b3f4a3318ed",
          "image": "registry.connect.redhat.com/zabbix/zabbix-proxy-sqlite-50@sha256:713a6223a01ee57efb719d6f491ef779d74104a1bc1b8599eade8b3f4a3318ed",
          "name": "zbx_proxy_sqlite"
        },
        {
          "digest": "sha256:229562a27ed45319ef17397fe81cac81129c84eccd2c14f6085531a86ef9b87d",
          "image": "registry.connect.redhat.com/zabbix/zabbix-agent-50@sha256:229562a27ed45319ef17397fe81cac81129c84eccd2c14f6085531a86ef9b87d",
          "name": "zbx_agent"
        },
        {
          "digest": "sha256:7236c68c494f572edf64ced85c3a083b7eafff1c6562e95bdc50e50c37e3e3bf",
          "image": "registry.connect.redhat.com/zabbix/zabbix-appliance-50@sha256:7236c68c494f572edf64ced85c3a083b7eafff1c6562e95bdc50e50c37e3e3bf",
          "name": "zbx_appliance"
        },
        {
          "digest": "sha256:e7541d9fbcb7a71ac8a68cc4efc1806bab74023961c7d3fb562ded320df90c43",
          "image": "registry.redhat.io/rhel8/mysql-80@sha256:e7541d9fbcb7a71ac8a68cc4efc1806bab74023961c7d3fb562ded320df90c43",
          "name": "db_mysql"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.2",
      "version_original": "0.0.2"
    },
    {
      "_id": "61a57dccbfd4a5234d5960e6",
      "alm_examples": [
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAgent",
          "metadata": {
            "labels": {
              "app": "agent",
              "vendor": "zabbix"
            },
            "name": "zabbix-agent"
          },
          "spec": {
            "active_allow": true,
            "activeservers": "",
            "allow_key": "",
            "allow_privileged": true,
            "buffer#": 100,
            "buffer_send": 5,
            "debug_level": 3,
            "deny_key": "system.run[*]",
            "host_interface": "",
            "host_interface_item": "",
            "hostname": "",
            "hostname_item": "system.hostname",
            "load_module": "",
            "log_remote_commands": true,
            "max_lines_per_second": 20,
            "metadata": "",
            "metadata_item": "",
            "passive_allow": true,
            "passive_servers": "",
            "refresh_active_checks": 120,
            "server_host": "zabbix-server",
            "start_agents": 3,
            "timeout": 3,
            "tls_accept": "unencrypted",
            "tls_ca_file_name": "",
            "tls_cert_file_name": "",
            "tls_cipher_all": "",
            "tls_cipher_cert_13": "",
            "tls_cipher_psk": "",
            "tls_cipherall_13": "",
            "tls_connect": "unencrypted",
            "tls_crl_file_name": "",
            "tls_key_file_name": "",
            "tls_psk_file_name": "",
            "tls_psk_identity": "",
            "tls_server_cert_issuer": "",
            "tls_server_cert_subject": "",
            "tlsciphercert": "",
            "tlscipherpsk13": "",
            "unsafe_user_parameters": false
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAppliance",
          "metadata": {
            "labels": {
              "app": "appliance",
              "vendor": "zabbix"
            },
            "name": "zabbix-appliance"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_double_ieee754": true,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixFull",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-full"
          },
          "spec": {
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlsciphercert": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxyMysql",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-mysql"
          },
          "spec": {
            "db_server_port": 3306,
            "internal_db": true,
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix_proxy",
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxySqlite",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-sqlite"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "proxy#": 1
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixServer",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-server"
          },
          "spec": {
            "db_server_host": "mysql-server",
            "db_server_port": 3306,
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix",
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAgent",
          "metadata": {
            "labels": {
              "app": "agent",
              "vendor": "zabbix"
            },
            "name": "zabbix-agent"
          },
          "spec": {
            "active_allow": true,
            "activeservers": "",
            "allow_key": "",
            "allow_privileged": true,
            "buffer#": 100,
            "buffer_send": 5,
            "debug_level": 3,
            "deny_key": "system.run[*]",
            "host_interface": "",
            "host_interface_item": "",
            "hostname": "",
            "hostname_item": "system.hostname",
            "load_module": "",
            "log_remote_commands": true,
            "max_lines_per_second": 20,
            "metadata": "",
            "metadata_item": "",
            "passive_allow": true,
            "passive_servers": "",
            "refresh_active_checks": 120,
            "server_host": "zabbix-server",
            "start_agents": 3,
            "timeout": 3,
            "tls_accept": "unencrypted",
            "tls_ca_file_name": "",
            "tls_cert_file_name": "",
            "tls_cipher_all": "",
            "tls_cipher_cert_13": "",
            "tls_cipher_psk": "",
            "tls_cipherall_13": "",
            "tls_connect": "unencrypted",
            "tls_crl_file_name": "",
            "tls_key_file_name": "",
            "tls_psk_file_name": "",
            "tls_psk_identity": "",
            "tls_server_cert_issuer": "",
            "tls_server_cert_subject": "",
            "tlsciphercert": "",
            "tlscipherpsk13": "",
            "unsafe_user_parameters": false
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixServer",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-server"
          },
          "spec": {
            "db_server_host": "mysql-server",
            "db_server_port": 3306,
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix",
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysqlsecret": "mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxySqlite",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-sqlite"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "proxy#": 1
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixProxyMysql",
          "metadata": {
            "labels": {
              "app": "proxy",
              "vendor": "zabbix"
            },
            "name": "zabbix-proxy-mysql"
          },
          "spec": {
            "db_server_port": 3306,
            "internal_db": true,
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "mysql_database": "zabbix_proxy",
            "proxy": {
              "cache#": "8M",
              "config_frequency": 3600,
              "data_sender_frequency": 1,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "enable_remote_commands": false,
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "hostname": "",
              "hostname_item": "system.hostname",
              "housekeeping_frequency": 1,
              "log_remote_commands": true,
              "log_slow_queries": 0,
              "proxy_heartbeat_frequency": 60,
              "proxy_local_buffer": 0,
              "proxy_mode": 0,
              "proxy_offline_buffer": 1,
              "server_host": "zabbix-server",
              "server_port": 10051,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "timeout": 4,
              "tls_accept": "unencrypted",
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_connect": "unencrypted",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tls_psk_file_name": "",
              "tls_psk_identity": "",
              "tls_server_cert_issuer": "",
              "tls_server_cert_subject": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "zabbix-mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixFull",
          "metadata": {
            "labels": {
              "app": "server",
              "vendor": "zabbix"
            },
            "name": "zabbix-full"
          },
          "spec": {
            "history_storage_url": "",
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "java_gateway#": 1,
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_cipher_all": "",
              "tls_cipher_cert_13": "",
              "tls_cipher_psk": "",
              "tls_cipherall_13": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlsciphercert": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_cipher_list": "",
              "db_double_ieee754": true,
              "db_encryption": false,
              "db_verify_host": false,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web#": 2,
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "mysql-secrets"
          }
        },
        {
          "api_version": "kubernetes.zabbix.com/v1alpha1",
          "kind": "ZabbixAppliance",
          "metadata": {
            "labels": {
              "app": "appliance",
              "vendor": "zabbix"
            },
            "name": "zabbix-appliance"
          },
          "spec": {
            "java_gateway": {
              "debug_level": "info",
              "start_pollers": 5,
              "timeout": 3
            },
            "server": {
              "cache#": "8M",
              "cache_update_frequency": 60,
              "db_tls_cipher": "",
              "db_tls_cipher13": "",
              "db_tls_cipher_13": "",
              "db_tls_connect": "",
              "debug_level": 3,
              "export_file#": "",
              "history_cache#": "16M",
              "history_index_cache#": "4M",
              "history_storage_date_index": true,
              "history_storage_types": "",
              "housekeeping_frequency": 1,
              "load_module": "",
              "log_slow_queries": 0,
              "max_housekeeper_delete": 5000,
              "proxy_config_frequency": 3600,
              "proxy_data_frequency": 1,
              "start_alerters": 3,
              "start_db_syncers": 4,
              "start_discoverers": 1,
              "start_escalators": 1,
              "start_http_pollers": 1,
              "start_ipmi_pollers": 0,
              "start_java_pollers": 5,
              "start_lld_processors": 2,
              "start_pingers": 1,
              "start_pollers": 5,
              "start_pollers_unreachable": 1,
              "start_preprocessors": 3,
              "start_proxy_pollers": 0,
              "start_timers": 1,
              "start_trappers": 5,
              "start_vmware_collectors": 0,
              "stats_allowed_ip": "",
              "timeout": 4,
              "tls_ca_file_name": "",
              "tls_cert_file_name": "",
              "tls_crl_file_name": "",
              "tls_key_file_name": "",
              "tlscipherall": "",
              "tlscipherall13": "",
              "tlsciphercert": "",
              "tlsciphercert13": "",
              "tlscipherpsk": "",
              "tlscipherpsk13": "",
              "trapper_timeout": 300,
              "trend_cache#": "4M",
              "unavailable_delay": 60,
              "unreachable_delay": 15,
              "unreachable_period": 45,
              "value_cache#": "8M",
              "vmware_cache#": "8M",
              "vmware_frequency": 60,
              "vmware_perf_frequency": 60,
              "vmware_timeout": 10
            },
            "web": {
              "db_double_ieee754": true,
              "deny_gui_access": false,
              "enable_web_access_log": true,
              "gui_access_ip_range": "",
              "gui_warning_msg": "Zabbix is under maintenance.",
              "history_storage_types": "",
              "max_execution_time": 300,
              "max_input_time": 300,
              "memory_limit": "128M",
              "post_max#": "16M",
              "server_name": "Kubernetes installation",
              "session_name": "zbx_sessionid",
              "sso_settings": "",
              "timezone": "Europe/Riga",
              "upload_max_filesize": "2M"
            },
            "web_enable_route": true,
            "zabbix_mysql_volumeclaim": "mysql-volume-claim",
            "zabbix_mysqlsecret": "mysql-secrets"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/zabbix/zabbixoperator-certified-bundle@sha256:3351d4e9f8ddf2b4498852335ebd7197188ff3f167919c603c5dc77b08774091",
      "bundle_path_digest": "sha256:3351d4e9f8ddf2b4498852335ebd7197188ff3f167919c603c5dc77b08774091",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "lts",
      "creation_date": "2021-11-30T01:26:36.803000+00:00",
      "csv_description": "## About this Operator\n\nZabbix helps you to real-time monitoring of millions of metrics collected from tens of thousands of servers, virtual machines and network devices.\nThe Zabbix Operator allows users to easily deploy, manage, and maintain Zabbix deployments on OpenShift. By installing this integration you will be able to deploy Zabbix server / proxies and other components with a single command.\n## Supported Features\n* **Zabbix Server** - Simple Zabbix installation with included Zabbix server, Zabbix web-interface and Zabbix Java Gateway with MySQL database support. The feature does not provide MySQL service and requires an external MySQL database. \n* **Zabbix Server (Full)** - Zabbix installation with included Zabbix server, Zabbix web-interface, Zabbix Java Gateway and MySQL server instance.\n* **Zabbix proxy (SQLite3)** - Very simple way to gain power of Zabbix proxy. The feature has  SQLite3 support for Zabbix proxies and allow to specify amount of proxies. \n* **Zabbix proxy (MySQL)** - Another option of Zabbix proxy. The option support and deliver MySQL database.\n* **Zabbix agent** - Zabbix agent can be deployed on each available node for stability and performance monitoring on remote nodes. It allows to gather metrics with full automation!\n* **Zabbix Appliance** - Zabbix appliance very simple way to test and check Zabbix features. The option provides all core components in one solution. It includes Zabbix server, Zabbix Java Gateway, Zabbix web-interface and MySQL server in deployment. It is very useful for testing Zabbix features!\n## Prerequisites\nAll deployment options are require additional information during deployment. Please, check the following instructions and provide required configuration:\n* **Zabbix Server** - MySQL database host information and MySQL database credentials in specially formatted *Secret*. Additionally it is possible to specify SSL certificates for HTTPS support in *Secret*.\n* **Zabbix Server (Full)** - MySQL database credentials in specially formatted *Secret*. MySQL database volume name information. Additionally it is possible to specify SSL certificates for HTTPS support in *Secret*.\n* **Zabbix proxy (SQLite3)** - Zabbix server host information only.\n* **Zabbix proxy (MySQL)** - MySQL database credentials in specially formatted *Secrets* and Zabbix server host information.\n* **Zabbix agent** - Zabbix server host information only for outgoing and incoming connections. Zabbix agent uses \"privileged\" mode to monitor node resources! For example, running processes.\n* **Zabbix Appliance** - MySQL database credentials in specially formatted *Secret*. MySQL database volume name information. Additionally it is possible to specify SSL certificates for HTTPS support in *Secret*.\n### MySQL credentials\n```\nkind: Secret\napiVersion: v1\nmetadata:\n  name: zabbix-full-secrets\ndata:\n  mysql_root_password: emFiYml4X3N1cGVyX3Jvb3Q= [1]\n  mysql_zabbix_password: emFiYml4X3VzZXJfcGFzc3dvcmQ= [2]\n  mysql_zabbix_username: emFiYml4 [3]\ntype: Opaque\n```\nUsing MySQL root password (*mysqlrootpassword* [1]) Zabbix server / proxy will try to create MySQL database schema with grant permissions to *mysqlzabbixusername* [2] and *mysqlzabbixpassword* [3].\n### SSL certificates for HTTPS\n```\nkind: Secret\napiVersion: v1\nmetadata:\n  name: zabbix-web-sslsecret\ndata:\n  ssl.crt: >-\n   < ssl.crt data>\n  ssl.key: >-\n\t < ssl.key data >\n  dhparam.pem: >-\n   <  dhparam.pem data >\n```\nFiles *ssl.crt*, *ssl.key* and *dhparam.perm* are required for Zabbix web-interface for SSL support.\n",
      "csv_display_name": "Zabbix Operator",
      "csv_metadata_description": "Zabbix operator with multiple deployment variants and different components",
      "csv_name": "zabbix-operator-certified.v0.0.3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:13:48.170000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "zabbix-operator-certified",
      "provided_apis": [
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixAgent",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixAppliance",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixFull",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixProxyMysql",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixProxySqlite",
          "version": "v1alpha1"
        },
        {
          "group": "kubernetes.zabbix.com",
          "kind": "ZabbixServer",
          "version": "v1alpha1"
        }
      ],
      "provider": "Zabbix LLC",
      "related_images": [],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.3",
      "version_original": "0.0.3"
    },
    {
      "_id": "61a57dd4c17162a20c1c68aa",
      "alm_examples": [
        {
          "api_version": "xcrypt.zettaset.com/v1alpha1",
          "kind": "XCrypt",
          "metadata": {
            "name": "zts-masterset"
          },
          "spec": {
            "status": {
              "podNames": "zts-ca",
              "replicas": "1,"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/zts/xcrypt-operator-1-bundle@sha256:c3913778f986ae4f3a7d94da2a9d0157233dbb676e3c1eecacbdbc02a864685a",
      "bundle_path_digest": "sha256:c3913778f986ae4f3a7d94da2a9d0157233dbb676e3c1eecacbdbc02a864685a",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-11-30T01:26:44.838000+00:00",
      "csv_description": "Zettaset\u2019s RedHat Certified XCrypt Operator allows users to deploy multiple XCrypt components on OpenShift with just a few simple commands. The XCrypt Operator deployment provides software-defined encryption that transparently protects container data throughout your OpenShift environment.\n\n## Core Features\n* **Automated XCrypt provisioning** - Deploying a Zettaset XCrypt has never been easier. Adjust cluster specific configuration and let the Zettaset Operator take care of provisioning XCrypt services and setting up the XCrypt encryption to your exact specification. \n* **CSI Driver deployment**: Zettaset XCrypt Operator automatically deploys Zettaset XCrypt CSI Driver in order to provide automated and transparent data-at-rest  encryption functionality compatible with Openshift and any other container orchestrator. Once the Operator is provisioned, the driver runs fine tuned and ready to work with other XCrypt components.\n* **Multi-node topology**: Encrypt as many nodes and volumes as you need to. XCrypt components can be installed on multiple nodes across the cluster. This is defined by two labels: zts-master and zts-worker. Normally zts-master node is a single node that runs Zettaset XCrypt major services required for the product operation. Multiple nodes can be marked as zts-worker and those are the nodes that can have encrypted volumes.\n* **Seamless Encrypted Volume mount**: Volumes are not only being encrypted, but also are mounted/unmounted to containers with Persistent Volume Claims. This happens as seamlessly as regular volumes provision and mount/unmount.\n* **Robust failover**: A node failure doesn\u2019t affect XCrypt operations on other nodes of the cluster. Encryption on a restarted/recovered node gets back to normal functioning if the node stays healthy and data hasn\u2019t been corrupted during the restart\n\n## About Zettaset XCrypt Kubernetes Encryption for OpenShift\nXCrypt Kubernetes Encryption for OpenShift is a software-only solution that enables encryption of data at rest stored in Red Hat OpenShift container environments without slowing down the DevSecOps process. In addition to providing a transparent and high-performance layer of security that flexibly protects container data across on-premise, in hybrid, and multi-cloud environments, it also helps your organization efficiently transition from DevOps to DevSecOps.  \n\nMore information about Zettaset XCrypt Kubernetes Encryption for OpenShift can be found in the [Deployment and Administration Guide](https://1f2aca073706bb52f501-133f3466c38fdb0417539cdf095d8336.ssl.cf1.rackcdn.com/ZettasetXCryptContainerEncryption.8.5.0.Final.pdf)\n\n## RedHat OpenShift + Zettaset: The next generation of secure enterprise infrastructure for DevSecOps  \nBy combining RedHat\u2019s Container Platform with Zettaset\u2019s certified software-defined encryption, you can create the next generation of secure enterprise infrastructure that DevSecOps requires. Together they create the stable, consistent, and supported base that your organization needs to develop applications faster, simplify updates, drive innovation, and reduce the risk of potential security breaches and data theft.\n### Core Features\n* Software-only for simple and scalable deployments \n* Negligible performance impact\n* Transparent to developers and administrators \n* Works with AWS, Google, and Azure \n* Unique encryption key per container volume \n* Encrypted volumes are only available when in use\n* Direct integration with OpenShift \n* Automated encryption policy management Secure erase of volumes\n* Ability to securely decommission a node\n\n## How does XCrypt Kubernetes Encryption fit into OpenShift? \nXCrypt XCrypt Kubernetes Encryption for OpenShift Encryption makes it incredibly easy to protect container data in your OpenShift environment. \n### Use cases include:\n* Transitioning from DevOps to DevSecOps \n* Ensuring data protection in OpenShift container environments with negligible performance impact \n* Achieving compliance in regulated industries like healthcare and finance\n\n## Other Information\nRole-based access control needs to be configured prior to the Operator installation. Please find details in the [Deployment and Administration Guide](https://1f2aca073706bb52f501-133f3466c38fdb0417539cdf095d8336.ssl.cf1.rackcdn.com/ZettasetXCryptContainerEncryption.8.5.0.Final.pdf)    ",
      "csv_display_name": "Zettaset XCrypt Operator",
      "csv_metadata_description": "XCrypt Operator deploys Zettaset XCrypt Container Encryption  - the only software-defined solution that offers transparent high performance data-at-rest encryption of critical data in container environments.",
      "csv_name": "zts-xcrypt-operator.v0.0.17",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:14:11.438000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "xcrypt-operator",
      "provided_apis": [
        {
          "group": "xcrypt.zettaset.com",
          "kind": "XCrypt",
          "plural": "xcrypts",
          "version": "v1alpha1"
        }
      ],
      "provider": "Zettaset",
      "related_images": [
        {
          "digest": "sha256:7e6316a6c41dd71c4d9025bd958a475929369284eee1a02d9e870e883acfd9ac",
          "image": "registry.connect.redhat.com/zts/xcrypt-operator-1@sha256:7e6316a6c41dd71c4d9025bd958a475929369284eee1a02d9e870e883acfd9ac",
          "name": "xcrypt-operator-1-7e6316a6c41dd71c4d9025bd958a475929369284eee1a02d9e870e883acfd9ac-annotation"
        },
        {
          "digest": "sha256:7e6316a6c41dd71c4d9025bd958a475929369284eee1a02d9e870e883acfd9ac",
          "image": "registry.connect.redhat.com/zts/xcrypt-operator-1@sha256:7e6316a6c41dd71c4d9025bd958a475929369284eee1a02d9e870e883acfd9ac",
          "name": "zts-xcrypt-operator"
        },
        {
          "digest": "sha256:9f1015dfb459b69f5dbf449efa0517452095a6cf4f20826ebae278f9f800ffe7",
          "image": "registry.connect.redhat.com/zts/xcrypt-ca-1@sha256:9f1015dfb459b69f5dbf449efa0517452095a6cf4f20826ebae278f9f800ffe7",
          "name": "ca"
        },
        {
          "digest": "sha256:9af5d21dd748dfbf4e107f27a5f10fa3c0ba928ade9b989a744b620ce34ec757",
          "image": "registry.connect.redhat.com/zts/xcrypt-kmip-server-1@sha256:9af5d21dd748dfbf4e107f27a5f10fa3c0ba928ade9b989a744b620ce34ec757",
          "name": "kmip"
        },
        {
          "digest": "sha256:bc5486892a41e70f5dc4c4e1d82fca8db2149598fb8b5950ba5da1ee2d9d245d",
          "image": "registry.connect.redhat.com/zts/xcrypt-license-server-1@sha256:bc5486892a41e70f5dc4c4e1d82fca8db2149598fb8b5950ba5da1ee2d9d245d",
          "name": "ls"
        },
        {
          "digest": "sha256:9faa4b597eb74df412761dffa057b64fb69dbf9fa016414962eb2099a343e734",
          "image": "registry.connect.redhat.com/zts/xcrypt-host-manager-1@sha256:9faa4b597eb74df412761dffa057b64fb69dbf9fa016414962eb2099a343e734",
          "name": "hm"
        },
        {
          "digest": "sha256:c15fa9a7cc40891103f426206663dcebe1210c8ee3ab6037cbf64e1f86b9c7e5",
          "image": "registry.connect.redhat.com/zts/zts-csi-driver-1@sha256:c15fa9a7cc40891103f426206663dcebe1210c8ee3ab6037cbf64e1f86b9c7e5",
          "name": "csi_driver"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.17",
      "version_original": "0.0.17"
    },
    {
      "_id": "61a6b905bfd4a5234d5963a9",
      "alm_examples": [
        {
          "api_version": "operator.ionir.com/v1",
          "kind": "System",
          "metadata": {
            "name": "ionir"
          },
          "spec": {
            "imageRegistry": "quay.io/ionir",
            "profile": "minimal",
            "tag": "v2.5"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ionir/ionir-operator-bundle@sha256:79319e01b6f760d6a494bae31e8dfad3adfddc5d63f4c4d03424618b742b0279",
      "bundle_path_digest": "sha256:79319e01b6f760d6a494bae31e8dfad3adfddc5d63f4c4d03424618b742b0279",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-11-30T23:51:33.094000+00:00",
      "csv_description": "Ionir is a container-native data platform for Kubernetes.\nIonir virtualizes all available storage in a Kubernetes cluster to create a single pool of highly scalable storage.\nHaving a Container Storage Interface (CSI) plugin, Ionir storage can be provisioned and managed by Kubernetes,\nthe common control plane in the environment. In addition to providing resilient, high-performance storage, Ionir\nalso provides end-to-end data management capabilities. The Ionir architecture separates the metadata from the data,\nwhich enables unique data management capabilities such as instant clones. The microservices architecture provides\na unified data platform that is elastic, scalable, and agile, which is critical for containerized deployments.\n### Instant Data Mobility\nIonir gives K8s application data wings. Persistent volumes move at the speed of applications, in any direction, to and from anywhere - on-prem, cloud, public, private - in seconds!\nWhat\u2019s more, ionir transparently delivers everything you\u2019ve come to expect from enterprise storage \u2013 performance and scalability, data protection, replication, deduplication and more - built to run natively on Kubernetes clusters.\n### Enterprise-Class Data Protection\nOffering instant point-in-time restore with one second granularity, ionir\u2019s highly efficient data protection capabilities exceed even traditional monolithic arrays, and are unrivaled in K8s native storage.\n### Simple. Converged. Native.\nOne comprehensive platform \u2015 orchestrated by Kubernetes \u2015 serves, stores and manages all your K8s application data. All based on RESTful APIs for easy automation.\n### Aligned to Applications\nAdvanced machine learning ensures data is mapped to the optimal storage resource based on performance, density, cost, location, and other key factors.\n### How to install Ionir\n### Prerequisites\n* See details in [Ionir Deployment Requirements - OCP](https://github.com/ionir-cloud/deployments/blob/main/documents/Ionir%20Deployment%20Requirements%20-%20OCP.pdf)\n* Review Ionir [EULA] (https://ionir.com/legal/eula/)\n\n### Uninstall\nFirst remove all applications consuming Ionir storage prior to deleting Ionir system custom resource.<br>\nNote: Storage classes with Ionir provisioner should be deleted manually\n> :warning: This action uninstalls Ionir completely and wipes the entire data. This action can not be reversed.\n",
      "csv_display_name": "Ionir",
      "csv_metadata_description": "Ionir is a container-native data platform built in Kubernetes",
      "csv_name": "ionir-operator.v1.0.7",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:38:41.645000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "ionir-operator",
      "provided_apis": [
        {
          "group": "operator.ionir.com",
          "kind": "System",
          "plural": "systems",
          "version": "v1"
        }
      ],
      "provider": "Ionir",
      "related_images": [
        {
          "digest": "sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "name": "ionir-operator-5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525-annotation"
        },
        {
          "digest": "sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.0.7",
      "version_original": "1.0.7"
    },
    {
      "_id": "61a6bc42bfd4a5234d5963ab",
      "alm_examples": [
        {
          "api_version": "operator.ionir.com/v1",
          "kind": "System",
          "metadata": {
            "name": "ionir"
          },
          "spec": {
            "imageRegistry": "quay.io/ionir",
            "profile": "minimal",
            "tag": "ilan-certification-test"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ionir/ionir-operator-bundle@sha256:f54f915f843f9372f447cec692d4076a963668cecacf11f66fd85439b069558e",
      "bundle_path_digest": "sha256:f54f915f843f9372f447cec692d4076a963668cecacf11f66fd85439b069558e",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-01T00:05:22.643000+00:00",
      "csv_description": "Ionir is a container-native data platform for Kubernetes.\nIonir virtualizes all available storage in a Kubernetes cluster to create a single pool of highly scalable storage.\nHaving a Container Storage Interface (CSI) plugin, Ionir storage can be provisioned and managed by Kubernetes,\nthe common control plane in the environment. In addition to providing resilient, high-performance storage, Ionir\nalso provides end-to-end data management capabilities. The Ionir architecture separates the metadata from the data,\nwhich enables unique data management capabilities such as instant clones. The microservices architecture provides\na unified data platform that is elastic, scalable, and agile, which is critical for containerized deployments.\n### Instant Data Mobility\nIonir gives K8s application data wings. Persistent volumes move at the speed of applications, in any direction, to and from anywhere - on-prem, cloud, public, private - in seconds!\nWhat\u2019s more, ionir transparently delivers everything you\u2019ve come to expect from enterprise storage \u2013 performance and scalability, data protection, replication, deduplication and more - built to run natively on Kubernetes clusters.\n### Enterprise-Class Data Protection\nOffering instant point-in-time restore with one second granularity, ionir\u2019s highly efficient data protection capabilities exceed even traditional monolithic arrays, and are unrivaled in K8s native storage.\n### Simple. Converged. Native.\nOne comprehensive platform \u2015 orchestrated by Kubernetes \u2015 serves, stores and manages all your K8s application data. All based on RESTful APIs for easy automation.\n### Aligned to Applications\nAdvanced machine learning ensures data is mapped to the optimal storage resource based on performance, density, cost, location, and other key factors.\n### How to install Ionir\n### Prerequisites\n* See details in [Ionir Deployment Requirements - OCP](https://github.com/ionir-cloud/deployments/blob/main/documents/Ionir%20Deployment%20Requirements%20-%20OCP.pdf)\n* Review Ionir [EULA] (https://ionir.com/legal/eula/)\n\n### Uninstall\nFirst remove all applications consuming Ionir storage prior to deleting Ionir system custom resource.<br>\nNote: Storage classes with Ionir provisioner should be deleted manually\n> :warning: This action uninstalls Ionir completely and wipes the entire data. This action can not be reversed.\n",
      "csv_display_name": "Ionir",
      "csv_metadata_description": "Ionir is a container-native data platform built in Kubernetes",
      "csv_name": "ionir-operator.v1.0.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:50:13.870000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "ionir-operator",
      "provided_apis": [
        {
          "group": "operator.ionir.com",
          "kind": "System",
          "plural": "systems",
          "version": "v1"
        }
      ],
      "provider": "Ionir",
      "related_images": [
        {
          "digest": "sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "name": "ionir-operator-3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1-annotation"
        },
        {
          "digest": "sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.0.6",
      "version_original": "1.0.6"
    },
    {
      "_id": "61a762cc27e166330707dc78",
      "alm_examples": [
        {
          "api_version": "operator.ionir.com/v1",
          "kind": "System",
          "metadata": {
            "name": "ionir"
          },
          "spec": {
            "imageRegistry": "quay.io/ionir",
            "profile": "minimal",
            "tag": "v2.5"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ionir/ionir-operator-bundle@sha256:79319e01b6f760d6a494bae31e8dfad3adfddc5d63f4c4d03424618b742b0279",
      "bundle_path_digest": "sha256:79319e01b6f760d6a494bae31e8dfad3adfddc5d63f4c4d03424618b742b0279",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-01T11:55:56.591000+00:00",
      "csv_description": "Ionir is a container-native data platform for Kubernetes.\nIonir virtualizes all available storage in a Kubernetes cluster to create a single pool of highly scalable storage.\nHaving a Container Storage Interface (CSI) plugin, Ionir storage can be provisioned and managed by Kubernetes,\nthe common control plane in the environment. In addition to providing resilient, high-performance storage, Ionir\nalso provides end-to-end data management capabilities. The Ionir architecture separates the metadata from the data,\nwhich enables unique data management capabilities such as instant clones. The microservices architecture provides\na unified data platform that is elastic, scalable, and agile, which is critical for containerized deployments.\n### Instant Data Mobility\nIonir gives K8s application data wings. Persistent volumes move at the speed of applications, in any direction, to and from anywhere - on-prem, cloud, public, private - in seconds!\nWhat\u2019s more, ionir transparently delivers everything you\u2019ve come to expect from enterprise storage \u2013 performance and scalability, data protection, replication, deduplication and more - built to run natively on Kubernetes clusters.\n### Enterprise-Class Data Protection\nOffering instant point-in-time restore with one second granularity, ionir\u2019s highly efficient data protection capabilities exceed even traditional monolithic arrays, and are unrivaled in K8s native storage.\n### Simple. Converged. Native.\nOne comprehensive platform \u2015 orchestrated by Kubernetes \u2015 serves, stores and manages all your K8s application data. All based on RESTful APIs for easy automation.\n### Aligned to Applications\nAdvanced machine learning ensures data is mapped to the optimal storage resource based on performance, density, cost, location, and other key factors.\n### How to install Ionir\n### Prerequisites\n* See details in [Ionir Deployment Requirements - OCP](https://github.com/ionir-cloud/deployments/blob/main/documents/Ionir%20Deployment%20Requirements%20-%20OCP.pdf)\n* Review Ionir [EULA] (https://ionir.com/legal/eula/)\n\n### Uninstall\nFirst remove all applications consuming Ionir storage prior to deleting Ionir system custom resource.<br>\nNote: Storage classes with Ionir provisioner should be deleted manually\n> :warning: This action uninstalls Ionir completely and wipes the entire data. This action can not be reversed.\n",
      "csv_display_name": "Ionir",
      "csv_metadata_description": "Ionir is a container-native data platform built in Kubernetes",
      "csv_name": "ionir-operator.v1.0.7",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:22:35.952000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "ionir-operator",
      "provided_apis": [
        {
          "group": "operator.ionir.com",
          "kind": "System",
          "plural": "systems",
          "version": "v1"
        }
      ],
      "provider": "Ionir",
      "related_images": [
        {
          "digest": "sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "name": "ionir-operator-5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525-annotation"
        },
        {
          "digest": "sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:5b28c9559e65d15fdeb13c62e893e05e8090de7658c10e06feb18c69fd8a5525",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.0.7",
      "version_original": "1.0.7"
    },
    {
      "_id": "61a762f53e9240fca360f976",
      "alm_examples": [
        {
          "api_version": "operator.ionir.com/v1",
          "kind": "System",
          "metadata": {
            "name": "ionir"
          },
          "spec": {
            "imageRegistry": "quay.io/ionir",
            "profile": "minimal",
            "tag": "ilan-certification-test"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ionir/ionir-operator-bundle@sha256:f54f915f843f9372f447cec692d4076a963668cecacf11f66fd85439b069558e",
      "bundle_path_digest": "sha256:f54f915f843f9372f447cec692d4076a963668cecacf11f66fd85439b069558e",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-01T11:56:37.123000+00:00",
      "csv_description": "Ionir is a container-native data platform for Kubernetes.\nIonir virtualizes all available storage in a Kubernetes cluster to create a single pool of highly scalable storage.\nHaving a Container Storage Interface (CSI) plugin, Ionir storage can be provisioned and managed by Kubernetes,\nthe common control plane in the environment. In addition to providing resilient, high-performance storage, Ionir\nalso provides end-to-end data management capabilities. The Ionir architecture separates the metadata from the data,\nwhich enables unique data management capabilities such as instant clones. The microservices architecture provides\na unified data platform that is elastic, scalable, and agile, which is critical for containerized deployments.\n### Instant Data Mobility\nIonir gives K8s application data wings. Persistent volumes move at the speed of applications, in any direction, to and from anywhere - on-prem, cloud, public, private - in seconds!\nWhat\u2019s more, ionir transparently delivers everything you\u2019ve come to expect from enterprise storage \u2013 performance and scalability, data protection, replication, deduplication and more - built to run natively on Kubernetes clusters.\n### Enterprise-Class Data Protection\nOffering instant point-in-time restore with one second granularity, ionir\u2019s highly efficient data protection capabilities exceed even traditional monolithic arrays, and are unrivaled in K8s native storage.\n### Simple. Converged. Native.\nOne comprehensive platform \u2015 orchestrated by Kubernetes \u2015 serves, stores and manages all your K8s application data. All based on RESTful APIs for easy automation.\n### Aligned to Applications\nAdvanced machine learning ensures data is mapped to the optimal storage resource based on performance, density, cost, location, and other key factors.\n### How to install Ionir\n### Prerequisites\n* See details in [Ionir Deployment Requirements - OCP](https://github.com/ionir-cloud/deployments/blob/main/documents/Ionir%20Deployment%20Requirements%20-%20OCP.pdf)\n* Review Ionir [EULA] (https://ionir.com/legal/eula/)\n\n### Uninstall\nFirst remove all applications consuming Ionir storage prior to deleting Ionir system custom resource.<br>\nNote: Storage classes with Ionir provisioner should be deleted manually\n> :warning: This action uninstalls Ionir completely and wipes the entire data. This action can not be reversed.\n",
      "csv_display_name": "Ionir",
      "csv_metadata_description": "Ionir is a container-native data platform built in Kubernetes",
      "csv_name": "ionir-operator.v1.0.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:54:14.263000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "ionir-operator",
      "provided_apis": [
        {
          "group": "operator.ionir.com",
          "kind": "System",
          "plural": "systems",
          "version": "v1"
        }
      ],
      "provider": "Ionir",
      "related_images": [
        {
          "digest": "sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "name": "ionir-operator-3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1-annotation"
        },
        {
          "digest": "sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "image": "registry.connect.redhat.com/ionir/ionir-operator@sha256:3c6c05ea8feb356bb9f90c652bd05a94edeb33248be09eedf4f9f21e80de6ef1",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.0.6",
      "version_original": "1.0.6"
    },
    {
      "_id": "61a877703e9240fca360fa84",
      "alm_examples": [
        {
          "api_version": "amcop.aarnanetworks.com/v1alpha1",
          "kind": "Installer",
          "metadata": {
            "name": "installer-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/aarna/amcop-k8s-operator-bundle@sha256:8cb7a9b39361707719f0dfc5589bbb55432e65941136d6034551003bd37c7f39",
      "bundle_path_digest": "sha256:8cb7a9b39361707719f0dfc5589bbb55432e65941136d6034551003bd37c7f39",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-12-02T07:36:16.951000+00:00",
      "csv_description": "LifeCycle Manager for Aarna Networks Multi Cluster Orchestration Platform (AMCOP)",
      "csv_display_name": "amcop-k8s-operator",
      "csv_metadata_description": "",
      "csv_name": "amcop-operator.v0.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:38:49.835000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "amcop-operator",
      "provided_apis": [
        {
          "group": "amcop.aarnanetworks.com",
          "kind": "Installer",
          "plural": "installers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Aarna Networks",
      "related_images": [
        {
          "digest": "sha256:bb3b5ba76e7ce94441d0395dc5a66f7bb6fff59bd37d5328e418072b3bb174ab",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:bb3b5ba76e7ce94441d0395dc5a66f7bb6fff59bd37d5328e418072b3bb174ab",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:2cf47405d836adb9ec50ac39cbf3ee5550a41033865a77cec3ecece1c37d840c",
          "image": "registry.connect.redhat.com/aarna/amcop-k8s-operator@sha256:2cf47405d836adb9ec50ac39cbf3ee5550a41033865a77cec3ecece1c37d840c",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.0.1",
      "version_original": "0.0.1"
    },
    {
      "_id": "61a8795c27e166330707dd67",
      "alm_examples": [
        {
          "api_version": "amcop.aarnanetworks.com/v1alpha1",
          "kind": "Installer",
          "metadata": {
            "name": "installer-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/aarna/amcop-k8s-operator-bundle@sha256:8cb7a9b39361707719f0dfc5589bbb55432e65941136d6034551003bd37c7f39",
      "bundle_path_digest": "sha256:8cb7a9b39361707719f0dfc5589bbb55432e65941136d6034551003bd37c7f39",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-12-02T07:44:28.599000+00:00",
      "csv_description": "LifeCycle Manager for Aarna Networks Multi Cluster Orchestration Platform (AMCOP)",
      "csv_display_name": "amcop-k8s-operator",
      "csv_metadata_description": "",
      "csv_name": "amcop-operator.v0.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:20:32.559000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "amcop-operator",
      "provided_apis": [
        {
          "group": "amcop.aarnanetworks.com",
          "kind": "Installer",
          "plural": "installers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Aarna Networks",
      "related_images": [
        {
          "digest": "sha256:bb3b5ba76e7ce94441d0395dc5a66f7bb6fff59bd37d5328e418072b3bb174ab",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:bb3b5ba76e7ce94441d0395dc5a66f7bb6fff59bd37d5328e418072b3bb174ab",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:2cf47405d836adb9ec50ac39cbf3ee5550a41033865a77cec3ecece1c37d840c",
          "image": "registry.connect.redhat.com/aarna/amcop-k8s-operator@sha256:2cf47405d836adb9ec50ac39cbf3ee5550a41033865a77cec3ecece1c37d840c",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "0.0.1",
      "version_original": "0.0.1"
    },
    {
      "_id": "61a89ab9c17162a20c1c6e33",
      "alm_examples": [
        {
          "api_version": "amcop.aarnanetworks.com/v1alpha1",
          "kind": "Installer",
          "metadata": {
            "name": "installer-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/aarna/amcop-k8s-operator-bundle@sha256:8cb7a9b39361707719f0dfc5589bbb55432e65941136d6034551003bd37c7f39",
      "bundle_path_digest": "sha256:8cb7a9b39361707719f0dfc5589bbb55432e65941136d6034551003bd37c7f39",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-12-02T10:06:49.093000+00:00",
      "csv_description": "LifeCycle Manager for Aarna Networks Multi Cluster Orchestration Platform (AMCOP)",
      "csv_display_name": "amcop-k8s-operator",
      "csv_metadata_description": "",
      "csv_name": "amcop-operator.v0.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:56:15.911000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "amcop-operator",
      "provided_apis": [
        {
          "group": "amcop.aarnanetworks.com",
          "kind": "Installer",
          "plural": "installers",
          "version": "v1alpha1"
        }
      ],
      "provider": "Aarna Networks",
      "related_images": [
        {
          "digest": "sha256:bb3b5ba76e7ce94441d0395dc5a66f7bb6fff59bd37d5328e418072b3bb174ab",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:bb3b5ba76e7ce94441d0395dc5a66f7bb6fff59bd37d5328e418072b3bb174ab",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:2cf47405d836adb9ec50ac39cbf3ee5550a41033865a77cec3ecece1c37d840c",
          "image": "registry.connect.redhat.com/aarna/amcop-k8s-operator@sha256:2cf47405d836adb9ec50ac39cbf3ee5550a41033865a77cec3ecece1c37d840c",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.0.1",
      "version_original": "0.0.1"
    },
    {
      "_id": "61a8c596bfd4a5234d596591",
      "alm_examples": [
        {
          "api_version": "odf.ibm.com/v1alpha1",
          "kind": "FlashSystemCluster",
          "metadata": {
            "name": "flashsystemcluster-sample",
            "namespace": "openshift-storage"
          },
          "spec": {
            "defaultPool": {
              "fsType": "ext4",
              "poolName": "Pool0",
              "spaceEfficiency": "thick",
              "storageclassName": "odf-flashsystemcluster-sample",
              "volumeNamePrefix": "odf"
            },
            "insecureSkipVerify": true,
            "name": "flashsystem-xxx",
            "secret": {
              "name": "fs-secrets-example",
              "namespace": "openshift-storage"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ibm/ibm-storage-odf-operator-bundle@sha256:905efe96fa1145c90b540289d9582ed789082c9b269a9beccb72f00a343eb22b",
      "bundle_path_digest": "sha256:905efe96fa1145c90b540289d9582ed789082c9b269a9beccb72f00a343eb22b",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable-v1",
      "creation_date": "2021-12-02T13:09:42.981000+00:00",
      "csv_description": "IBM Storage ODF operator provides basic storage capabilities and extended management functions through OpenShift data foundation framework for applications.",
      "csv_display_name": "IBM Storage ODF operator",
      "csv_metadata_description": "",
      "csv_name": "ibm-storage-odf-operator.v1.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:58:34.711000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "ibm-storage-odf-operator",
      "provided_apis": [
        {
          "group": "odf.ibm.com",
          "kind": "FlashSystemCluster",
          "plural": "flashsystemclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "IBM",
      "related_images": [
        {
          "digest": "sha256:8b4f814c112d7b91dc5e7904d4f3c684f3d77227344d2b553a84d4a1bc2829d3",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:8b4f814c112d7b91dc5e7904d4f3c684f3d77227344d2b553a84d4a1bc2829d3",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:c34e32465c0f2c6aea4381de958d753433b4da454795fddb5048809ed67f654f",
          "image": "docker.io/ibmcom/ibm-storage-odf-operator@sha256:c34e32465c0f2c6aea4381de958d753433b4da454795fddb5048809ed67f654f",
          "name": "manager"
        },
        {
          "digest": "sha256:d49baf989ad004408b7fcaf3f421c90777fa78c8029ecd203d495e17e99f832d",
          "image": "docker.io/ibmcom/ibm-storage-odf-plugin@sha256:d49baf989ad004408b7fcaf3f421c90777fa78c8029ecd203d495e17e99f832d",
          "name": "ibm-odf-console"
        }
      ],
      "replaces": null,
      "skip_range": ">=0.0.1 <1.0.0",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.0.0",
      "version_original": "1.0.0"
    },
    {
      "_id": "61a920383e9240fca360fd38",
      "alm_examples": [
        {
          "api_version": "nvidia.com/v1",
          "kind": "ClusterPolicy",
          "metadata": {
            "name": "gpu-cluster-policy"
          },
          "spec": {
            "daemonsets": {},
            "dcgm": {
              "enabled": true
            },
            "dcgmExporter": {
              "config": {
                "name": ""
              }
            },
            "devicePlugin": {},
            "driver": {
              "certConfig": {
                "name": ""
              },
              "enabled": true,
              "licensingConfig": {
                "configMapName": "",
                "nlsEnabled": false
              },
              "repoConfig": {
                "configMapName": ""
              },
              "use_ocp_driver_toolkit": true,
              "virtualTopology": {
                "config": ""
              }
            },
            "gfd": {},
            "mig": {
              "strategy": "single"
            },
            "migManager": {
              "enabled": true
            },
            "nodeStatusExporter": {
              "enabled": true
            },
            "operator": {
              "defaultRuntime": "crio",
              "deployGFD": true,
              "initContainer": {}
            },
            "toolkit": {
              "enabled": true
            },
            "validator": {
              "plugin": {
                "env": [
                  {
                    "name": "WITH_WORKLOAD",
                    "value": "true"
                  }
                ]
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/nvidia/gpu-operator-bundle@sha256:311c0af18755aa941fca8e319f2bcf183f107897742ea4c4c85a08c75b31111d",
      "bundle_path_digest": "sha256:311c0af18755aa941fca8e319f2bcf183f107897742ea4c4c85a08c75b31111d",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "v1.9.0",
      "creation_date": "2021-12-02T19:36:24.232000+00:00",
      "csv_description": "Kubernetes provides access to special hardware resources such as NVIDIA GPUs, NICs, Infiniband adapters and other devices through the [device plugin framework](https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/). However, configuring and managing nodes with these hardware resources requires configuration of multiple software components such as drivers, container runtimes or other libraries which are difficult and prone to errors.\nThe NVIDIA GPU Operator uses the [operator framework](https://coreos.com/blog/introducing-operator-framework) within Kubernetes to automate the management of all NVIDIA software components needed to provision and monitor GPUs. These components include the NVIDIA drivers (to enable CUDA), Kubernetes device plugin for GPUs, the NVIDIA Container Runtime, automatic node labelling and NVIDIA DCGM exporter.\nVisit the official site of the [GPU Operator](https://github.com/NVIDIA/gpu-operator) for more information. For getting started with using the GPU Operator with OpenShift, see the instructions [here](https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/openshift/contents.html).\n",
      "csv_display_name": "NVIDIA GPU Operator",
      "csv_metadata_description": "Automate the management and monitoring of NVIDIA GPUs.",
      "csv_name": "gpu-operator-certified.v1.9.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:57:15.401000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "gpu-operator-certified",
      "provided_apis": [
        {
          "group": "nvidia.com",
          "kind": "ClusterPolicy",
          "plural": "clusterpolicies",
          "version": "v1"
        }
      ],
      "provider": "NVIDIA Corporation",
      "related_images": [
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator-image"
        },
        {
          "digest": "sha256:5f0d3af074c92dfe0ce36899a1545bb5a408f2ad59878d43045e9ca302b82a41",
          "image": "nvcr.io/nvidia/k8s/dcgm-exporter@sha256:5f0d3af074c92dfe0ce36899a1545bb5a408f2ad59878d43045e9ca302b82a41",
          "name": "dcgm-exporter-image"
        },
        {
          "digest": "sha256:f4c4de8d66b2fef8cebaee6fec2fb2d15d01e835de2654df6dfd4a0ce0baec6b",
          "image": "nvcr.io/nvidia/cloud-native/dcgm@sha256:f4c4de8d66b2fef8cebaee6fec2fb2d15d01e835de2654df6dfd4a0ce0baec6b",
          "name": "dcgm-image"
        },
        {
          "digest": "sha256:5f826e306d093332a86afa7d1e96218b5bdda8d33067931cff7914f6bb2994ee",
          "image": "nvcr.io/nvidia/k8s/container-toolkit@sha256:5f826e306d093332a86afa7d1e96218b5bdda8d33067931cff7914f6bb2994ee",
          "name": "container-toolkit-image"
        },
        {
          "digest": "sha256:35c8231e28e572b148699d52a5f5c9745556fd32ab4160da68d0fc84234c1309",
          "image": "nvcr.io/nvidia/driver@sha256:35c8231e28e572b148699d52a5f5c9745556fd32ab4160da68d0fc84234c1309",
          "name": "driver-image"
        },
        {
          "digest": "sha256:69171f906efe4bbabe31688343e59feea08a7e0ef8b0d9efb466abfa153aec16",
          "image": "nvcr.io/nvidia/k8s-device-plugin@sha256:69171f906efe4bbabe31688343e59feea08a7e0ef8b0d9efb466abfa153aec16",
          "name": "device-plugin-image"
        },
        {
          "digest": "sha256:bfc39d23568458dfd50c0c5323b6d42bdcd038c420fb2a2becd513a3ed3be27f",
          "image": "nvcr.io/nvidia/gpu-feature-discovery@sha256:bfc39d23568458dfd50c0c5323b6d42bdcd038c420fb2a2becd513a3ed3be27f",
          "name": "gpu-feature-discovery-image"
        },
        {
          "digest": "sha256:d718dda2f9c9f0a465240772ed1ca6db44789d37255172e00637a092bdd1ba31",
          "image": "nvcr.io/nvidia/cloud-native/k8s-mig-manager@sha256:d718dda2f9c9f0a465240772ed1ca6db44789d37255172e00637a092bdd1ba31",
          "name": "mig-manager-image"
        },
        {
          "digest": "sha256:e137c897256501537e0986963889a91ec90cac029b5263fc4b229b278f5b1a02",
          "image": "nvcr.io/nvidia/cuda@sha256:e137c897256501537e0986963889a91ec90cac029b5263fc4b229b278f5b1a02",
          "name": "init-container-image"
        },
        {
          "digest": "sha256:7b3509daf52c333c28da40d90586efa514ed9c14473f5ca495de7b65567ce4c2",
          "image": "nvcr.io/nvidia/cloud-native/gpu-operator-validator@sha256:7b3509daf52c333c28da40d90586efa514ed9c14473f5ca495de7b65567ce4c2",
          "name": "gpu-operator-validator-image"
        },
        {
          "digest": "sha256:54233ebccbc3d2b388b237031907d58c3719d0e6f3ecb874349c91e8145225d2",
          "image": "nvcr.io/nvidia/cloud-native/k8s-driver-manager@sha256:54233ebccbc3d2b388b237031907d58c3719d0e6f3ecb874349c91e8145225d2",
          "name": "k8s-driver-manager-image"
        },
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator-57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395-annotation"
        },
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.9.0",
      "version_original": "1.9.0"
    },
    {
      "_id": "61a9229e3e9240fca360fd40",
      "alm_examples": [
        {
          "api_version": "nvidia.com/v1",
          "kind": "ClusterPolicy",
          "metadata": {
            "name": "gpu-cluster-policy"
          },
          "spec": {
            "daemonsets": {},
            "dcgm": {
              "enabled": true
            },
            "dcgmExporter": {
              "config": {
                "name": ""
              }
            },
            "devicePlugin": {},
            "driver": {
              "certConfig": {
                "name": ""
              },
              "enabled": true,
              "licensingConfig": {
                "configMapName": "",
                "nlsEnabled": false
              },
              "repoConfig": {
                "configMapName": ""
              },
              "use_ocp_driver_toolkit": true,
              "virtualTopology": {
                "config": ""
              }
            },
            "gfd": {},
            "mig": {
              "strategy": "single"
            },
            "migManager": {
              "enabled": true
            },
            "nodeStatusExporter": {
              "enabled": true
            },
            "operator": {
              "defaultRuntime": "crio",
              "deployGFD": true,
              "initContainer": {}
            },
            "toolkit": {
              "enabled": true
            },
            "validator": {
              "plugin": {
                "env": [
                  {
                    "name": "WITH_WORKLOAD",
                    "value": "true"
                  }
                ]
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/nvidia/gpu-operator-bundle@sha256:311c0af18755aa941fca8e319f2bcf183f107897742ea4c4c85a08c75b31111d",
      "bundle_path_digest": "sha256:311c0af18755aa941fca8e319f2bcf183f107897742ea4c4c85a08c75b31111d",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-02T19:46:38.993000+00:00",
      "csv_description": "Kubernetes provides access to special hardware resources such as NVIDIA GPUs, NICs, Infiniband adapters and other devices through the [device plugin framework](https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/). However, configuring and managing nodes with these hardware resources requires configuration of multiple software components such as drivers, container runtimes or other libraries which are difficult and prone to errors.\nThe NVIDIA GPU Operator uses the [operator framework](https://coreos.com/blog/introducing-operator-framework) within Kubernetes to automate the management of all NVIDIA software components needed to provision and monitor GPUs. These components include the NVIDIA drivers (to enable CUDA), Kubernetes device plugin for GPUs, the NVIDIA Container Runtime, automatic node labelling and NVIDIA DCGM exporter.\nVisit the official site of the [GPU Operator](https://github.com/NVIDIA/gpu-operator) for more information. For getting started with using the GPU Operator with OpenShift, see the instructions [here](https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/openshift/contents.html).\n",
      "csv_display_name": "NVIDIA GPU Operator",
      "csv_metadata_description": "Automate the management and monitoring of NVIDIA GPUs.",
      "csv_name": "gpu-operator-certified.v1.9.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:24:15.806000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "gpu-operator-certified",
      "provided_apis": [
        {
          "group": "nvidia.com",
          "kind": "ClusterPolicy",
          "plural": "clusterpolicies",
          "version": "v1"
        }
      ],
      "provider": "NVIDIA Corporation",
      "related_images": [
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator-image"
        },
        {
          "digest": "sha256:5f0d3af074c92dfe0ce36899a1545bb5a408f2ad59878d43045e9ca302b82a41",
          "image": "nvcr.io/nvidia/k8s/dcgm-exporter@sha256:5f0d3af074c92dfe0ce36899a1545bb5a408f2ad59878d43045e9ca302b82a41",
          "name": "dcgm-exporter-image"
        },
        {
          "digest": "sha256:f4c4de8d66b2fef8cebaee6fec2fb2d15d01e835de2654df6dfd4a0ce0baec6b",
          "image": "nvcr.io/nvidia/cloud-native/dcgm@sha256:f4c4de8d66b2fef8cebaee6fec2fb2d15d01e835de2654df6dfd4a0ce0baec6b",
          "name": "dcgm-image"
        },
        {
          "digest": "sha256:5f826e306d093332a86afa7d1e96218b5bdda8d33067931cff7914f6bb2994ee",
          "image": "nvcr.io/nvidia/k8s/container-toolkit@sha256:5f826e306d093332a86afa7d1e96218b5bdda8d33067931cff7914f6bb2994ee",
          "name": "container-toolkit-image"
        },
        {
          "digest": "sha256:35c8231e28e572b148699d52a5f5c9745556fd32ab4160da68d0fc84234c1309",
          "image": "nvcr.io/nvidia/driver@sha256:35c8231e28e572b148699d52a5f5c9745556fd32ab4160da68d0fc84234c1309",
          "name": "driver-image"
        },
        {
          "digest": "sha256:69171f906efe4bbabe31688343e59feea08a7e0ef8b0d9efb466abfa153aec16",
          "image": "nvcr.io/nvidia/k8s-device-plugin@sha256:69171f906efe4bbabe31688343e59feea08a7e0ef8b0d9efb466abfa153aec16",
          "name": "device-plugin-image"
        },
        {
          "digest": "sha256:bfc39d23568458dfd50c0c5323b6d42bdcd038c420fb2a2becd513a3ed3be27f",
          "image": "nvcr.io/nvidia/gpu-feature-discovery@sha256:bfc39d23568458dfd50c0c5323b6d42bdcd038c420fb2a2becd513a3ed3be27f",
          "name": "gpu-feature-discovery-image"
        },
        {
          "digest": "sha256:d718dda2f9c9f0a465240772ed1ca6db44789d37255172e00637a092bdd1ba31",
          "image": "nvcr.io/nvidia/cloud-native/k8s-mig-manager@sha256:d718dda2f9c9f0a465240772ed1ca6db44789d37255172e00637a092bdd1ba31",
          "name": "mig-manager-image"
        },
        {
          "digest": "sha256:e137c897256501537e0986963889a91ec90cac029b5263fc4b229b278f5b1a02",
          "image": "nvcr.io/nvidia/cuda@sha256:e137c897256501537e0986963889a91ec90cac029b5263fc4b229b278f5b1a02",
          "name": "init-container-image"
        },
        {
          "digest": "sha256:7b3509daf52c333c28da40d90586efa514ed9c14473f5ca495de7b65567ce4c2",
          "image": "nvcr.io/nvidia/cloud-native/gpu-operator-validator@sha256:7b3509daf52c333c28da40d90586efa514ed9c14473f5ca495de7b65567ce4c2",
          "name": "gpu-operator-validator-image"
        },
        {
          "digest": "sha256:54233ebccbc3d2b388b237031907d58c3719d0e6f3ecb874349c91e8145225d2",
          "image": "nvcr.io/nvidia/cloud-native/k8s-driver-manager@sha256:54233ebccbc3d2b388b237031907d58c3719d0e6f3ecb874349c91e8145225d2",
          "name": "k8s-driver-manager-image"
        },
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator-57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395-annotation"
        },
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.9.0",
      "version_original": "1.9.0"
    },
    {
      "_id": "61a922a1c17162a20c1c71ad",
      "alm_examples": [
        {
          "api_version": "nvidia.com/v1",
          "kind": "ClusterPolicy",
          "metadata": {
            "name": "gpu-cluster-policy"
          },
          "spec": {
            "daemonsets": {},
            "dcgm": {
              "enabled": true
            },
            "dcgmExporter": {
              "config": {
                "name": ""
              }
            },
            "devicePlugin": {},
            "driver": {
              "certConfig": {
                "name": ""
              },
              "enabled": true,
              "licensingConfig": {
                "configMapName": "",
                "nlsEnabled": false
              },
              "repoConfig": {
                "configMapName": ""
              },
              "use_ocp_driver_toolkit": true,
              "virtualTopology": {
                "config": ""
              }
            },
            "gfd": {},
            "mig": {
              "strategy": "single"
            },
            "migManager": {
              "enabled": true
            },
            "nodeStatusExporter": {
              "enabled": true
            },
            "operator": {
              "defaultRuntime": "crio",
              "deployGFD": true,
              "initContainer": {}
            },
            "toolkit": {
              "enabled": true
            },
            "validator": {
              "plugin": {
                "env": [
                  {
                    "name": "WITH_WORKLOAD",
                    "value": "true"
                  }
                ]
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/nvidia/gpu-operator-bundle@sha256:311c0af18755aa941fca8e319f2bcf183f107897742ea4c4c85a08c75b31111d",
      "bundle_path_digest": "sha256:311c0af18755aa941fca8e319f2bcf183f107897742ea4c4c85a08c75b31111d",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "v1.9.0",
      "creation_date": "2021-12-02T19:46:41.494000+00:00",
      "csv_description": "Kubernetes provides access to special hardware resources such as NVIDIA GPUs, NICs, Infiniband adapters and other devices through the [device plugin framework](https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/). However, configuring and managing nodes with these hardware resources requires configuration of multiple software components such as drivers, container runtimes or other libraries which are difficult and prone to errors.\nThe NVIDIA GPU Operator uses the [operator framework](https://coreos.com/blog/introducing-operator-framework) within Kubernetes to automate the management of all NVIDIA software components needed to provision and monitor GPUs. These components include the NVIDIA drivers (to enable CUDA), Kubernetes device plugin for GPUs, the NVIDIA Container Runtime, automatic node labelling and NVIDIA DCGM exporter.\nVisit the official site of the [GPU Operator](https://github.com/NVIDIA/gpu-operator) for more information. For getting started with using the GPU Operator with OpenShift, see the instructions [here](https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/openshift/contents.html).\n",
      "csv_display_name": "NVIDIA GPU Operator",
      "csv_metadata_description": "Automate the management and monitoring of NVIDIA GPUs.",
      "csv_name": "gpu-operator-certified.v1.9.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:23:49.518000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "gpu-operator-certified",
      "provided_apis": [
        {
          "group": "nvidia.com",
          "kind": "ClusterPolicy",
          "plural": "clusterpolicies",
          "version": "v1"
        }
      ],
      "provider": "NVIDIA Corporation",
      "related_images": [
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator-image"
        },
        {
          "digest": "sha256:5f0d3af074c92dfe0ce36899a1545bb5a408f2ad59878d43045e9ca302b82a41",
          "image": "nvcr.io/nvidia/k8s/dcgm-exporter@sha256:5f0d3af074c92dfe0ce36899a1545bb5a408f2ad59878d43045e9ca302b82a41",
          "name": "dcgm-exporter-image"
        },
        {
          "digest": "sha256:f4c4de8d66b2fef8cebaee6fec2fb2d15d01e835de2654df6dfd4a0ce0baec6b",
          "image": "nvcr.io/nvidia/cloud-native/dcgm@sha256:f4c4de8d66b2fef8cebaee6fec2fb2d15d01e835de2654df6dfd4a0ce0baec6b",
          "name": "dcgm-image"
        },
        {
          "digest": "sha256:5f826e306d093332a86afa7d1e96218b5bdda8d33067931cff7914f6bb2994ee",
          "image": "nvcr.io/nvidia/k8s/container-toolkit@sha256:5f826e306d093332a86afa7d1e96218b5bdda8d33067931cff7914f6bb2994ee",
          "name": "container-toolkit-image"
        },
        {
          "digest": "sha256:35c8231e28e572b148699d52a5f5c9745556fd32ab4160da68d0fc84234c1309",
          "image": "nvcr.io/nvidia/driver@sha256:35c8231e28e572b148699d52a5f5c9745556fd32ab4160da68d0fc84234c1309",
          "name": "driver-image"
        },
        {
          "digest": "sha256:69171f906efe4bbabe31688343e59feea08a7e0ef8b0d9efb466abfa153aec16",
          "image": "nvcr.io/nvidia/k8s-device-plugin@sha256:69171f906efe4bbabe31688343e59feea08a7e0ef8b0d9efb466abfa153aec16",
          "name": "device-plugin-image"
        },
        {
          "digest": "sha256:bfc39d23568458dfd50c0c5323b6d42bdcd038c420fb2a2becd513a3ed3be27f",
          "image": "nvcr.io/nvidia/gpu-feature-discovery@sha256:bfc39d23568458dfd50c0c5323b6d42bdcd038c420fb2a2becd513a3ed3be27f",
          "name": "gpu-feature-discovery-image"
        },
        {
          "digest": "sha256:d718dda2f9c9f0a465240772ed1ca6db44789d37255172e00637a092bdd1ba31",
          "image": "nvcr.io/nvidia/cloud-native/k8s-mig-manager@sha256:d718dda2f9c9f0a465240772ed1ca6db44789d37255172e00637a092bdd1ba31",
          "name": "mig-manager-image"
        },
        {
          "digest": "sha256:e137c897256501537e0986963889a91ec90cac029b5263fc4b229b278f5b1a02",
          "image": "nvcr.io/nvidia/cuda@sha256:e137c897256501537e0986963889a91ec90cac029b5263fc4b229b278f5b1a02",
          "name": "init-container-image"
        },
        {
          "digest": "sha256:7b3509daf52c333c28da40d90586efa514ed9c14473f5ca495de7b65567ce4c2",
          "image": "nvcr.io/nvidia/cloud-native/gpu-operator-validator@sha256:7b3509daf52c333c28da40d90586efa514ed9c14473f5ca495de7b65567ce4c2",
          "name": "gpu-operator-validator-image"
        },
        {
          "digest": "sha256:54233ebccbc3d2b388b237031907d58c3719d0e6f3ecb874349c91e8145225d2",
          "image": "nvcr.io/nvidia/cloud-native/k8s-driver-manager@sha256:54233ebccbc3d2b388b237031907d58c3719d0e6f3ecb874349c91e8145225d2",
          "name": "k8s-driver-manager-image"
        },
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator-57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395-annotation"
        },
        {
          "digest": "sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "image": "nvcr.io/nvidia/gpu-operator@sha256:57e7be259af342ccdf281d23d79e15d474e2e6f506f84c0cdae3db2a199b3395",
          "name": "gpu-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.9.0",
      "version_original": "1.9.0"
    },
    {
      "_id": "61a947e0c17162a20c1c71ff",
      "alm_examples": [
        {
          "api_version": "instana.io/v1",
          "kind": "InstanaAgent",
          "metadata": {
            "name": "instana-agent",
            "namespace": "instana-agent"
          },
          "spec": {
            "agent": {
              "configuration_yaml": "# You can leave this empty, or use this to configure your instana agent.\n# See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n",
              "endpointHost": "ingress-red-saas.instana.io",
              "endpointPort": "443",
              "env": {},
              "key": "replace-key"
            },
            "cluster": {
              "name": "my-cluster"
            },
            "zone": {
              "name": "edited-zone"
            }
          }
        },
        {
          "api_version": "instana.io/v1beta1",
          "kind": "InstanaAgent",
          "metadata": {
            "name": "instana-agent",
            "namespace": "instana-agent"
          },
          "spec": {
            "agent.endpoint.host": "ingress-red-saas.instana.io",
            "agent.endpoint.port": 443,
            "agent.env": {
              "INSTANA_AGENT_TAGS": "example"
            },
            "agent.key": "replace-me",
            "agent.zone.name": "my-zone",
            "cluster.name": "replace-me",
            "config.files": {
              "configuration.yaml": "# You can leave this empty, or use this to configure your instana agent.\n# See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/instana/instana-agent-operator-bundle@sha256:70821638936b353d5f06e3ed030d1d58b1eb14196e9b4238531cd67868df6570",
      "bundle_path_digest": "sha256:70821638936b353d5f06e3ed030d1d58b1eb14196e9b4238531cd67868df6570",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-02T22:25:36.110000+00:00",
      "csv_description": "# Instana\n\nInstana is an [APM solution](https://www.instana.com/product-overview/) built for microservices that enables IT Ops to build applications faster and deliver higher quality services by automating monitoring, tracing and root cause analysis. The solution is optimized for [Kubernetes](https://www.instana.com/automatic-kubernetes-monitoring/) and [OpenShift](https://www.instana.com/blog/automatic-root-cause-analysis-for-openshift-applications/).\n\n## Instana Agent Operator\n\nThis is the Kubernetes Operator for installing the Instana Agent on Kubernetes or OpenShift.\n\n## Prerequisites for OpenShift\n\nBefore the agent will be able to run in OpenShift, you need to perform a couple of extra configuration steps.\n\nYou need to set up a project for the Instana Agent and configure it's permissions.\n\nThe project you create here needs to be the namespace where you create the Instana Agent custom resource that the operator will use to deploy the agent.\n\nFor example, create the `instana-agent` project:\n\n    oc new-project instana-agent\n\nThen, ensure the `instana-agent` service account is in the privileged security context:\n\n    oc adm policy add-scc-to-user privileged -z instana-agent\n\nThis service account will be created by the operator.\n\nNow you can proceed with installing the operator for the Instana agent.\n\n## Installation and Configuration\n\nFirst, install this operator from [OperatorHub.io](https://operatorhub.io/), [OpenShift Container Platform](https://www.openshift.com/), or [OKD](https://www.okd.io/).\n\nSecond, create the target namespace where the Instana agent should be installed. The agent does not need to run in the same namespace as the operator. Most users create a new namespace `instana-agent` for running the agents.\n\nThird, create a custom resource with the agent configuration in the target namespace. The operator will pick up the custom resource and install the Instana agent accordingly.\n\nThe following is a minimal template of the custom resource:\n\n```yaml\napiVersion: instana.io/v1beta1\nkind: InstanaAgent\nmetadata:\n  name: instana-agent\n  namespace: instana-agent\nspec:\n  agent.zone.name: my-zone # (optional) name of the zone of the host\n  agent.key: replace-me # replace with your Instana agent key\n  agent.endpoint.host: ingress-red-saas.instana.io # the monitoring ingress endpoint\n  agent.endpoint.port: 443 # the monitoring ingress endpoint port, wrapped in quotes\n  agent.env:\n    INSTANA_AGENT_TAGS: example\n  cluster.name: replace-me # replace with the name of your Kubernetes cluster\n  config.files:\n    configuration.yaml: |\n      # You can leave this empty, or use this to configure your instana agent.\n      # See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n```\n\nSave the template in a file `instana-agent.yaml` and edit the following values:\n\n* If your target namespace is not `instana-agent`, replace the `namespace:` accordingly.\n* `agent.key` must be set with your Instana agent key.\n* `agent.endpoint` must be set with the monitoring ingress endpoint, generally either `saas-us-west-2.instana.io` or `saas-eu-west-1.instana.io`.\n* `agent.endpoint.port` must be set with the monitoring ingress port, generally \"443\" (wrapped in quotes).\n* `agent.zone.name` should be set with the name of the Kubernetes cluster that is be displayed in Instana.\n\nFor advanced configuration, you can edit the contents of the `configuration.yaml` file. View documentation [here](https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/).\n\nApply the custom resource with `kubectl apply -f instana-agent.yaml`. After some time, you should see `instana-agent` Pods being created on each node of your cluster, and your cluster should show on the infrastructure map on your Instana Web interface.\n\n## Uninstalling\n\nIn order to uninstall the Instana agent, simply remove the custom resource with `kubectl delete -f instana-agent.yaml`.\n\n## Source Code\n\nThe Instana agent operator is an open source project hosted on [https://github.com/instana/instana-agent-operator](https://github.com/instana/instana-agent-operator/).\n",
      "csv_display_name": "Instana Agent Operator",
      "csv_metadata_description": "Fully automated Application Performance Monitoring (APM) for microservices.",
      "csv_name": "instana-agent-operator.v2.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:54:23.623000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.5",
      "organization": "certified-operators",
      "package": "instana-agent-operator",
      "provided_apis": [
        {
          "group": "instana.io",
          "kind": "InstanaAgent",
          "plural": "agents",
          "version": "v1"
        },
        {
          "group": "instana.io",
          "kind": "InstanaAgent",
          "plural": "agents",
          "version": "v1beta1"
        }
      ],
      "provider": "Instana",
      "related_images": [
        {
          "digest": "sha256:73cf53ca24ffe758a1c37db088a16be0da46c261436e9fef2ac0ccd6ed19e423",
          "image": "instana/instana-agent-operator@sha256:73cf53ca24ffe758a1c37db088a16be0da46c261436e9fef2ac0ccd6ed19e423",
          "name": "instana-agent-operator"
        },
        {
          "digest": "sha256:de42da5d3a955bfccfdcde86e8159ab4e0a20b8fe799c7e8a82878e971f3ec95",
          "image": "instana/agent@sha256:de42da5d3a955bfccfdcde86e8159ab4e0a20b8fe799c7e8a82878e971f3ec95",
          "name": "instana-agent"
        },
        {
          "digest": "sha256:73cf53ca24ffe758a1c37db088a16be0da46c261436e9fef2ac0ccd6ed19e423",
          "image": "instana/instana-agent-operator@sha256:73cf53ca24ffe758a1c37db088a16be0da46c261436e9fef2ac0ccd6ed19e423",
          "name": "instana-agent-operator-73cf53ca24ffe758a1c37db088a16be0da46c261436e9fef2ac0ccd6ed19e423-annotation"
        },
        {
          "digest": "sha256:73cf53ca24ffe758a1c37db088a16be0da46c261436e9fef2ac0ccd6ed19e423",
          "image": "instana/instana-agent-operator@sha256:73cf53ca24ffe758a1c37db088a16be0da46c261436e9fef2ac0ccd6ed19e423",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": "<2.0.0",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.5",
      "version": "2.0.0",
      "version_original": "2.0.0"
    },
    {
      "_id": "61af62c13e9240fca361089c",
      "alm_examples": [
        {
          "api_version": "instana.io/v1",
          "kind": "InstanaAgent",
          "metadata": {
            "name": "instana-agent",
            "namespace": "instana-agent"
          },
          "spec": {
            "agent": {
              "configuration_yaml": "# You can leave this empty, or use this to configure your instana agent.\n# See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n",
              "endpointHost": "ingress-red-saas.instana.io",
              "endpointPort": "443",
              "env": {},
              "key": "replace-key"
            },
            "cluster": {
              "name": "my-cluster"
            },
            "zone": {
              "name": "edited-zone"
            }
          }
        },
        {
          "api_version": "instana.io/v1beta1",
          "kind": "InstanaAgent",
          "metadata": {
            "name": "instana-agent",
            "namespace": "instana-agent"
          },
          "spec": {
            "agent.endpoint.host": "ingress-red-saas.instana.io",
            "agent.endpoint.port": 443,
            "agent.env": {
              "INSTANA_AGENT_TAGS": "example"
            },
            "agent.key": "replace-me",
            "agent.zone.name": "my-zone",
            "cluster.name": "replace-me",
            "config.files": {
              "configuration.yaml": "# You can leave this empty, or use this to configure your instana agent.\n# See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/instana/instana-agent-operator-bundle@sha256:d72b299e1344da4c81ad10f853facba47fd60a4554a79b0137da6646318428c0",
      "bundle_path_digest": "sha256:d72b299e1344da4c81ad10f853facba47fd60a4554a79b0137da6646318428c0",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-07T13:33:53.535000+00:00",
      "csv_description": "# Instana\n\nInstana is an [APM solution](https://www.instana.com/product-overview/) built for microservices that enables IT Ops to build applications faster and deliver higher quality services by automating monitoring, tracing and root cause analysis. The solution is optimized for [Kubernetes](https://www.instana.com/automatic-kubernetes-monitoring/) and [OpenShift](https://www.instana.com/blog/automatic-root-cause-analysis-for-openshift-applications/).\n\n## Instana Agent Operator\n\nThis is the Kubernetes Operator for installing the Instana Agent on Kubernetes or OpenShift.\n\n## Prerequisites for OpenShift\n\nBefore the agent will be able to run in OpenShift, you need to perform a couple of extra configuration steps.\n\nYou need to set up a project for the Instana Agent and configure it's permissions.\n\nThe project you create here needs to be the namespace where you create the Instana Agent custom resource that the operator will use to deploy the agent.\n\nFor example, create the `instana-agent` project:\n\n    oc new-project instana-agent\n\nThen, ensure the `instana-agent` service account is in the privileged security context:\n\n    oc adm policy add-scc-to-user privileged -z instana-agent\n\nThis service account will be created by the operator.\n\nNow you can proceed with installing the operator for the Instana agent.\n\n## Installation and Configuration\n\nFirst, install this operator from [OperatorHub.io](https://operatorhub.io/), [OpenShift Container Platform](https://www.openshift.com/), or [OKD](https://www.okd.io/).\n\nSecond, create a custom resource with the agent configuration in the target namespace (for now, this MUST always be the `instana-agent` namespace). The operator will pick up the custom resource and install the Instana agent accordingly.\n\nThe following is a minimal template of the custom resource:\n\n```yaml\napiVersion: instana.io/v1\nkind: InstanaAgent\nmetadata:\n  name: instana-agent\n  namespace: instana-agent\nspec:\n  zone:\n    name: my-zone # (optional) name of the zone of the host\n  cluster:\n    name: replace-me # replace with the name of your Kubernetes cluster\n  agent:\n    key: replace-me # replace with your Instana agent key\n    endpointHost: ingress-red-saas.instana.io # the monitoring ingress endpoint\n    endpointPort: \"443\" # the monitoring ingress endpoint port, wrapped in quotes\n    env:\n      INSTANA_AGENT_TAGS: example\n    configuration_yaml: |\n      # You can leave this empty, or use this to configure your instana agent.\n      # See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n```\n\nSave the template in a file `instana-agent.yaml` and edit the following values:\n\n* If your target namespace is not `instana-agent`, replace the `namespace:` accordingly.\n* `agent.key` must be set with your Instana agent key.\n* `agent.endpointHost` must be set with the monitoring ingress endpoint, generally either `saas-us-west-2.instana.io` or `saas-eu-west-1.instana.io`.\n* `agent.endpointPort` must be set with the monitoring ingress port, generally \"443\" (wrapped in quotes).\n* `zone.name` should be set with the name of the Kubernetes cluster that is be displayed in Instana.\n\nFor advanced configuration, you can edit the contents of the `configuration.yaml` file. View documentation [here](https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/).\n\nApply the custom resource with `kubectl apply -f instana-agent.yaml`. After some time, you should see `instana-agent` Pods being created on each node of your cluster, and your cluster should show on the infrastructure map on your Instana Web interface.\n\n## Uninstalling\n\nIn order to uninstall the Instana agent, simply remove the custom resource with `kubectl delete -f instana-agent.yaml`.\n\n## Source Code\n\nThe Instana agent operator is an open source project hosted on [https://github.com/instana/instana-agent-operator](https://github.com/instana/instana-agent-operator/).\n",
      "csv_display_name": "Instana Agent Operator",
      "csv_metadata_description": "Fully automated Application Performance Monitoring (APM) for microservices.",
      "csv_name": "instana-agent-operator.v2.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:03:45.967000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.5",
      "organization": "certified-operators",
      "package": "instana-agent-operator",
      "provided_apis": [
        {
          "group": "instana.io",
          "kind": "InstanaAgent",
          "plural": "agents",
          "version": "v1"
        },
        {
          "group": "instana.io",
          "kind": "InstanaAgent",
          "plural": "agents",
          "version": "v1beta1"
        }
      ],
      "provider": "Instana",
      "related_images": [
        {
          "digest": "sha256:dad92f35c638d37b3f13ae2c2bc814411ff358d92c4cad9d325f5e191d36ff09",
          "image": "instana/instana-agent-operator@sha256:dad92f35c638d37b3f13ae2c2bc814411ff358d92c4cad9d325f5e191d36ff09",
          "name": "instana-agent-operator"
        },
        {
          "digest": "sha256:de42da5d3a955bfccfdcde86e8159ab4e0a20b8fe799c7e8a82878e971f3ec95",
          "image": "instana/agent@sha256:de42da5d3a955bfccfdcde86e8159ab4e0a20b8fe799c7e8a82878e971f3ec95",
          "name": "instana-agent"
        },
        {
          "digest": "sha256:dad92f35c638d37b3f13ae2c2bc814411ff358d92c4cad9d325f5e191d36ff09",
          "image": "instana/instana-agent-operator@sha256:dad92f35c638d37b3f13ae2c2bc814411ff358d92c4cad9d325f5e191d36ff09",
          "name": "instana-agent-operator-dad92f35c638d37b3f13ae2c2bc814411ff358d92c4cad9d325f5e191d36ff09-annotation"
        },
        {
          "digest": "sha256:dad92f35c638d37b3f13ae2c2bc814411ff358d92c4cad9d325f5e191d36ff09",
          "image": "instana/instana-agent-operator@sha256:dad92f35c638d37b3f13ae2c2bc814411ff358d92c4cad9d325f5e191d36ff09",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.5",
      "version": "2.0.1",
      "version_original": "2.0.1"
    },
    {
      "_id": "61af670d3e9240fca36108c0",
      "alm_examples": [
        {
          "api_version": "instana.io/v1",
          "kind": "InstanaAgent",
          "metadata": {
            "name": "instana-agent",
            "namespace": "instana-agent"
          },
          "spec": {
            "agent": {
              "configuration_yaml": "# You can leave this empty, or use this to configure your instana agent.\n# See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n",
              "endpointHost": "ingress-red-saas.instana.io",
              "endpointPort": "443",
              "env": {},
              "key": "replace-key"
            },
            "cluster": {
              "name": "my-cluster"
            },
            "zone": {
              "name": "edited-zone"
            }
          }
        },
        {
          "api_version": "instana.io/v1beta1",
          "kind": "InstanaAgent",
          "metadata": {
            "name": "instana-agent",
            "namespace": "instana-agent"
          },
          "spec": {
            "agent.endpoint.host": "ingress-red-saas.instana.io",
            "agent.endpoint.port": 443,
            "agent.env": {
              "INSTANA_AGENT_TAGS": "example"
            },
            "agent.key": "replace-me",
            "agent.zone.name": "my-zone",
            "cluster.name": "replace-me",
            "config.files": {
              "configuration.yaml": "# You can leave this empty, or use this to configure your instana agent.\n# See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/instana/instana-agent-operator-bundle@sha256:1d8e2148413f5284dcedfe722bbf481ebbd64c6f4e78a5015081e3b4af826f81",
      "bundle_path_digest": "sha256:1d8e2148413f5284dcedfe722bbf481ebbd64c6f4e78a5015081e3b4af826f81",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-07T13:52:13.128000+00:00",
      "csv_description": "# Instana\n\nInstana is an [APM solution](https://www.instana.com/product-overview/) built for microservices that enables IT Ops to build applications faster and deliver higher quality services by automating monitoring, tracing and root cause analysis. The solution is optimized for [Kubernetes](https://www.instana.com/automatic-kubernetes-monitoring/) and [OpenShift](https://www.instana.com/blog/automatic-root-cause-analysis-for-openshift-applications/).\n\n## Instana Agent Operator\n\nThis is the Kubernetes Operator for installing the Instana Agent on Kubernetes or OpenShift.\n\n## Prerequisites for OpenShift\n\nBefore the agent will be able to run in OpenShift, you need to perform a couple of extra configuration steps.\n\nYou need to set up a project for the Instana Agent and configure it's permissions.\n\nThe project you create here needs to be the namespace where you create the Instana Agent custom resource that the operator will use to deploy the agent.\n\nFor example, create the `instana-agent` project:\n\n    oc new-project instana-agent\n\nThen, ensure the `instana-agent` service account is in the privileged security context:\n\n    oc adm policy add-scc-to-user privileged -z instana-agent\n\nThis service account will be created by the operator.\n\nNow you can proceed with installing the operator for the Instana agent.\n\n## Installation and Configuration\n\nFirst, install this operator from [OperatorHub.io](https://operatorhub.io/), [OpenShift Container Platform](https://www.openshift.com/), or [OKD](https://www.okd.io/).\n\nSecond, create a custom resource with the agent configuration in the target namespace (for now, this MUST always be the `instana-agent` namespace). The operator will pick up the custom resource and install the Instana agent accordingly.\n\nThe following is a minimal template of the custom resource:\n\n```yaml\napiVersion: instana.io/v1\nkind: InstanaAgent\nmetadata:\n  name: instana-agent\n  namespace: instana-agent\nspec:\n  zone:\n    name: my-zone # (optional) name of the zone of the host\n  cluster:\n    name: replace-me # replace with the name of your Kubernetes cluster\n  agent:\n    key: replace-me # replace with your Instana agent key\n    endpointHost: ingress-red-saas.instana.io # the monitoring ingress endpoint\n    endpointPort: \"443\" # the monitoring ingress endpoint port, wrapped in quotes\n    env:\n      INSTANA_AGENT_TAGS: example\n    configuration_yaml: |\n      # You can leave this empty, or use this to configure your instana agent.\n      # See https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/\n```\n\nSave the template in a file `instana-agent.yaml` and edit the following values:\n\n* If your target namespace is not `instana-agent`, replace the `namespace:` accordingly.\n* `agent.key` must be set with your Instana agent key.\n* `agent.endpointHost` must be set with the monitoring ingress endpoint, generally either `saas-us-west-2.instana.io` or `saas-eu-west-1.instana.io`.\n* `agent.endpointPort` must be set with the monitoring ingress port, generally \"443\" (wrapped in quotes).\n* `zone.name` should be set with the name of the Kubernetes cluster that is be displayed in Instana.\n\nFor advanced configuration, you can edit the contents of the `configuration.yaml` file. View documentation [here](https://docs.instana.io/setup_and_manage/host_agent/on/kubernetes/).\n\nApply the custom resource with `kubectl apply -f instana-agent.yaml`. After some time, you should see `instana-agent` Pods being created on each node of your cluster, and your cluster should show on the infrastructure map on your Instana Web interface.\n\n## Uninstalling\n\nIn order to uninstall the Instana agent, simply remove the custom resource with `kubectl delete -f instana-agent.yaml`.\n\n## Source Code\n\nThe Instana agent operator is an open source project hosted on [https://github.com/instana/instana-agent-operator](https://github.com/instana/instana-agent-operator/).\n",
      "csv_display_name": "Instana Agent Operator",
      "csv_metadata_description": "Fully automated Application Performance Monitoring (APM) for microservices.",
      "csv_name": "instana-agent-operator.v2.0.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:36:55.665000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.5",
      "organization": "certified-operators",
      "package": "instana-agent-operator",
      "provided_apis": [
        {
          "group": "instana.io",
          "kind": "InstanaAgent",
          "plural": "agents",
          "version": "v1"
        },
        {
          "group": "instana.io",
          "kind": "InstanaAgent",
          "plural": "agents",
          "version": "v1beta1"
        }
      ],
      "provider": "Instana",
      "related_images": [
        {
          "digest": "sha256:6e44ea0498f98f82383dd47e988eaca1aabd5c65a3e61e6b2241be1ea12c6aa0",
          "image": "instana/instana-agent-operator@sha256:6e44ea0498f98f82383dd47e988eaca1aabd5c65a3e61e6b2241be1ea12c6aa0",
          "name": "instana-agent-operator"
        },
        {
          "digest": "sha256:aaa9a53850cbb1a876cd1b85286380ea970973ec21d1532dffd3efbcf7320bb8",
          "image": "instana/agent@sha256:aaa9a53850cbb1a876cd1b85286380ea970973ec21d1532dffd3efbcf7320bb8",
          "name": "instana-agent"
        },
        {
          "digest": "sha256:6e44ea0498f98f82383dd47e988eaca1aabd5c65a3e61e6b2241be1ea12c6aa0",
          "image": "instana/instana-agent-operator@sha256:6e44ea0498f98f82383dd47e988eaca1aabd5c65a3e61e6b2241be1ea12c6aa0",
          "name": "instana-agent-operator-6e44ea0498f98f82383dd47e988eaca1aabd5c65a3e61e6b2241be1ea12c6aa0-annotation"
        },
        {
          "digest": "sha256:6e44ea0498f98f82383dd47e988eaca1aabd5c65a3e61e6b2241be1ea12c6aa0",
          "image": "instana/instana-agent-operator@sha256:6e44ea0498f98f82383dd47e988eaca1aabd5c65a3e61e6b2241be1ea12c6aa0",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.5",
      "version": "2.0.2",
      "version_original": "2.0.2"
    },
    {
      "_id": "61b04425f405208b380d9691",
      "alm_examples": [
        {
          "api_version": "workloadmanager.nec.com/v1",
          "kind": "WorkloadManager",
          "metadata": {
            "name": "workload-manager",
            "namespace": "nec-workload-manager"
          },
          "spec": {
            "api_timeout": 3,
            "cluster_collection#": 10737418240,
            "cluster_platform": "OpenShift",
            "common_config_log_level": "INFO",
            "db_startup_recheck_time": 5,
            "db_startup_wait_time": 60,
            "default_monitor_count": 10,
            "default_monitor_interval": 60,
            "default_repeat_interval": 1800,
            "detail_collection#": 10737418240,
            "detect_count": 1,
            "detect_interval": 60,
            "event_collection#": 10737418240,
            "expire_after_seconds": 31536000,
            "get_info_interval": 60,
            "get_info_ssc": "off",
            "grafana_cooperation": "off",
            "grafana_datasource": "prometheus",
            "grafana_node_additional_varlist": "",
            "grafana_node_dashboard_endpoint": "https://changeit.nec.co.jp:443/d/wmnode/wm-node-dashboard",
            "grafana_node_varname_datasource": "datasource",
            "grafana_node_varname_node": "node",
            "grafana_pod_additional_varlist": "",
            "grafana_pod_dashboard_endpoint": "https://changeit.nec.co.jp:443/d/wmpod/wm-pod-dashboard",
            "grafana_pod_varname_datasource": "datasource",
            "grafana_pod_varname_pod": "pod",
            "grafana_time_range_minutes": 60,
            "hidden_namespace": "",
            "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
            "jaeger_endpoint": "https://changeit.nec.co.jp:443/search",
            "jaeger_service_mapping": "{}",
            "jaeger_time_range_sec": 60,
            "max_policy_fired_histories": 512,
            "mode": "trial",
            "node_cpu_usage_threshold": 80,
            "node_disk_usage_threshold": 100,
            "node_memory_usage_threshold": 80,
            "node_network_usage_threshold": 55,
            "openshift": {
              "use_ebs": "n",
              "web_console_host": "REPLACE_WEB_CONSOLE_HOST"
            },
            "policy_fired_histories_collection_max#": 1073741824,
            "policy_fired_histories_expire_after_seconds": 31536000,
            "skip_action_interval": 600,
            "ssc_auth_by_secret": "false",
            "ssc_event_collection#": 1073741824,
            "use_auth": "false",
            "use_pv": "false",
            "user_authority_config_json": "[\n  {\n    \"username\": \"cluster-admin-user\",\n    \"is_cluster_admin\": true,\n    \"namespaces\": []\n  },\n  {\n    \"username\": \"tenant-user\",\n    \"is_cluster_admin\": false,\n    \"namespaces\": [\n      \"tenant-namespace\"\n    ]\n  }\n]\n"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/nec/nec-workload-manager-operator-bundle@sha256:5a47a3ac2e5c777cd226a410bba29bca08701416cfcd342215e579e24c8a738d",
      "bundle_path_digest": "sha256:5a47a3ac2e5c777cd226a410bba29bca08701416cfcd342215e579e24c8a738d",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-12-08T05:35:33.828000+00:00",
      "csv_description": "This operator deploys the NEC Workload Manager for Container Platform on OpenShift Container Platform.",
      "csv_display_name": "NEC Workload Manager for Container Platform Operator",
      "csv_metadata_description": "",
      "csv_name": "workload-manager-operator.v1.3.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:29:00.378000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "workload-manager-operator",
      "provided_apis": [
        {
          "group": "workloadmanager.nec.com",
          "kind": "WorkloadManager",
          "version": "v1"
        }
      ],
      "provider": "NEC Corporarion",
      "related_images": [
        {
          "digest": "sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "name": "nec-workload-manager"
        },
        {
          "digest": "sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager-operator@sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "name": "nec-workload-manager-operator"
        },
        {
          "digest": "sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager-operator@sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "name": "workload-manager-operator"
        },
        {
          "digest": "sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "name": "nec-workload-manager-1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.3.1",
      "version_original": "1.3.1"
    },
    {
      "_id": "61b044b97f84cb9883a2f2d9",
      "alm_examples": [
        {
          "api_version": "workloadmanager.nec.com/v1",
          "kind": "WorkloadManager",
          "metadata": {
            "name": "workload-manager",
            "namespace": "nec-workload-manager"
          },
          "spec": {
            "api_timeout": 3,
            "cluster_collection#": 10737418240,
            "cluster_platform": "OpenShift",
            "common_config_log_level": "INFO",
            "db_startup_recheck_time": 5,
            "db_startup_wait_time": 60,
            "default_monitor_count": 10,
            "default_monitor_interval": 60,
            "default_repeat_interval": 1800,
            "detail_collection#": 10737418240,
            "detect_count": 1,
            "detect_interval": 60,
            "event_collection#": 10737418240,
            "expire_after_seconds": 31536000,
            "get_info_interval": 60,
            "get_info_ssc": "off",
            "grafana_cooperation": "off",
            "grafana_datasource": "prometheus",
            "grafana_node_additional_varlist": "",
            "grafana_node_dashboard_endpoint": "https://changeit.nec.co.jp:443/d/wmnode/wm-node-dashboard",
            "grafana_node_varname_datasource": "datasource",
            "grafana_node_varname_node": "node",
            "grafana_pod_additional_varlist": "",
            "grafana_pod_dashboard_endpoint": "https://changeit.nec.co.jp:443/d/wmpod/wm-pod-dashboard",
            "grafana_pod_varname_datasource": "datasource",
            "grafana_pod_varname_pod": "pod",
            "grafana_time_range_minutes": 60,
            "hidden_namespace": "",
            "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
            "jaeger_endpoint": "https://changeit.nec.co.jp:443/search",
            "jaeger_service_mapping": "{}",
            "jaeger_time_range_sec": 60,
            "max_policy_fired_histories": 512,
            "mode": "trial",
            "node_cpu_usage_threshold": 80,
            "node_disk_usage_threshold": 100,
            "node_memory_usage_threshold": 80,
            "node_network_usage_threshold": 55,
            "openshift": {
              "use_ebs": "n",
              "web_console_host": "REPLACE_WEB_CONSOLE_HOST"
            },
            "policy_fired_histories_collection_max#": 1073741824,
            "policy_fired_histories_expire_after_seconds": 31536000,
            "skip_action_interval": 600,
            "ssc_auth_by_secret": "false",
            "ssc_event_collection#": 1073741824,
            "use_auth": "false",
            "use_pv": "false",
            "user_authority_config_json": "[\n  {\n    \"username\": \"cluster-admin-user\",\n    \"is_cluster_admin\": true,\n    \"namespaces\": []\n  },\n  {\n    \"username\": \"tenant-user\",\n    \"is_cluster_admin\": false,\n    \"namespaces\": [\n      \"tenant-namespace\"\n    ]\n  }\n]\n"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/nec/nec-workload-manager-operator-bundle@sha256:5a47a3ac2e5c777cd226a410bba29bca08701416cfcd342215e579e24c8a738d",
      "bundle_path_digest": "sha256:5a47a3ac2e5c777cd226a410bba29bca08701416cfcd342215e579e24c8a738d",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-12-08T05:38:01.227000+00:00",
      "csv_description": "This operator deploys the NEC Workload Manager for Container Platform on OpenShift Container Platform.",
      "csv_display_name": "NEC Workload Manager for Container Platform Operator",
      "csv_metadata_description": "",
      "csv_name": "workload-manager-operator.v1.3.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:52:29.447000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "workload-manager-operator",
      "provided_apis": [
        {
          "group": "workloadmanager.nec.com",
          "kind": "WorkloadManager",
          "version": "v1"
        }
      ],
      "provider": "NEC Corporarion",
      "related_images": [
        {
          "digest": "sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "name": "nec-workload-manager"
        },
        {
          "digest": "sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager-operator@sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "name": "nec-workload-manager-operator"
        },
        {
          "digest": "sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager-operator@sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "name": "workload-manager-operator"
        },
        {
          "digest": "sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "name": "nec-workload-manager-1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.3.1",
      "version_original": "1.3.1"
    },
    {
      "_id": "61b079e409fbfe27c991b077",
      "alm_examples": [
        {
          "api_version": "workloadmanager.nec.com/v1",
          "kind": "WorkloadManager",
          "metadata": {
            "name": "workload-manager",
            "namespace": "nec-workload-manager"
          },
          "spec": {
            "api_timeout": 3,
            "cluster_collection#": 10737418240,
            "cluster_platform": "OpenShift",
            "common_config_log_level": "INFO",
            "db_startup_recheck_time": 5,
            "db_startup_wait_time": 60,
            "default_monitor_count": 10,
            "default_monitor_interval": 60,
            "default_repeat_interval": 1800,
            "detail_collection#": 10737418240,
            "detect_count": 1,
            "detect_interval": 60,
            "event_collection#": 10737418240,
            "expire_after_seconds": 31536000,
            "get_info_interval": 60,
            "get_info_ssc": "off",
            "grafana_cooperation": "off",
            "grafana_datasource": "prometheus",
            "grafana_node_additional_varlist": "",
            "grafana_node_dashboard_endpoint": "https://changeit.nec.co.jp:443/d/wmnode/wm-node-dashboard",
            "grafana_node_varname_datasource": "datasource",
            "grafana_node_varname_node": "node",
            "grafana_pod_additional_varlist": "",
            "grafana_pod_dashboard_endpoint": "https://changeit.nec.co.jp:443/d/wmpod/wm-pod-dashboard",
            "grafana_pod_varname_datasource": "datasource",
            "grafana_pod_varname_pod": "pod",
            "grafana_time_range_minutes": 60,
            "hidden_namespace": "",
            "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
            "jaeger_endpoint": "https://changeit.nec.co.jp:443/search",
            "jaeger_service_mapping": "{}",
            "jaeger_time_range_sec": 60,
            "max_policy_fired_histories": 512,
            "mode": "trial",
            "node_cpu_usage_threshold": 80,
            "node_disk_usage_threshold": 100,
            "node_memory_usage_threshold": 80,
            "node_network_usage_threshold": 55,
            "openshift": {
              "use_ebs": "n",
              "web_console_host": "REPLACE_WEB_CONSOLE_HOST"
            },
            "policy_fired_histories_collection_max#": 1073741824,
            "policy_fired_histories_expire_after_seconds": 31536000,
            "skip_action_interval": 600,
            "ssc_auth_by_secret": "false",
            "ssc_event_collection#": 1073741824,
            "use_auth": "false",
            "use_pv": "false",
            "user_authority_config_json": "[\n  {\n    \"username\": \"cluster-admin-user\",\n    \"is_cluster_admin\": true,\n    \"namespaces\": []\n  },\n  {\n    \"username\": \"tenant-user\",\n    \"is_cluster_admin\": false,\n    \"namespaces\": [\n      \"tenant-namespace\"\n    ]\n  }\n]\n"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/nec/nec-workload-manager-operator-bundle@sha256:5a47a3ac2e5c777cd226a410bba29bca08701416cfcd342215e579e24c8a738d",
      "bundle_path_digest": "sha256:5a47a3ac2e5c777cd226a410bba29bca08701416cfcd342215e579e24c8a738d",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-12-08T09:24:52.586000+00:00",
      "csv_description": "This operator deploys the NEC Workload Manager for Container Platform on OpenShift Container Platform.",
      "csv_display_name": "NEC Workload Manager for Container Platform Operator",
      "csv_metadata_description": "",
      "csv_name": "workload-manager-operator.v1.3.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:27:04.251000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "workload-manager-operator",
      "provided_apis": [
        {
          "group": "workloadmanager.nec.com",
          "kind": "WorkloadManager",
          "version": "v1"
        }
      ],
      "provider": "NEC Corporarion",
      "related_images": [
        {
          "digest": "sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "name": "nec-workload-manager"
        },
        {
          "digest": "sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager-operator@sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "name": "nec-workload-manager-operator"
        },
        {
          "digest": "sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager-operator@sha256:5805850512de4c4868d0dcc7da6d2cc557196285b8c0e3c67c32065115e9ae87",
          "name": "workload-manager-operator"
        },
        {
          "digest": "sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "image": "registry.connect.redhat.com/nec/nec-workload-manager@sha256:1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d",
          "name": "nec-workload-manager-1d99212cf18d83886a7b487151af00ef3abae8e2662aadfca38108b5eff9649d-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.3.1",
      "version_original": "1.3.1"
    },
    {
      "_id": "61b16ee5f90e846f0ebdb0f2",
      "alm_examples": [
        {
          "api_version": "csi.hitachi.com/v1",
          "kind": "HSPC",
          "metadata": {
            "name": "hspc",
            "namespace": "kube-system"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/hitachi/hspc-operator-bundle@sha256:91cd03f337743bb14df9fe49a0439dd6acc16a55c20bff7f7f7bf84b367676d4",
      "bundle_path_digest": "sha256:91cd03f337743bb14df9fe49a0439dd6acc16a55c20bff7f7f7bf84b367676d4",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-09T02:50:13.484000+00:00",
      "csv_description": "## About\nHitachi Storage Plug-in for Containers (HSPC) is a plugin that integrates Hitachi VSP storage into Kubernetes based clusters.\nHSPC provides dynamic persistent volume provisioning capabilities from Hitachi's block storage arrays.\n\nFor full documentation, go to our [Knowledge Base](https://knowledge.hitachivantara.com/Documents/Adapters_and_Drivers/Storage_Adapters_and_Drivers/Containers) and refer to the reference guide for HSPC v3.8.0.\n\n## Requirements\n\n### Supported Driver Version\n\n* HSPC v3.8.0\n\n### Supported Platforms\n\n* OpenShift v4.6, v4.7, v4.8\n\n### Supported Operating Systems\n\n* RHEL 7.x\n* RHEL 8.x",
      "csv_display_name": "Hitachi Storage Plug-in for Containers",
      "csv_metadata_description": "An operator for managing Hitachi Storage Plug-in for Containers CSI driver",
      "csv_name": "hspc-operator.v1.8.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:41:10.724000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "hspc-operator",
      "provided_apis": [
        {
          "group": "csi.hitachi.com",
          "kind": "HSPC",
          "version": "v1"
        }
      ],
      "provider": "Hitachi",
      "related_images": [
        {
          "digest": "sha256:f82f352feadf07a971ab6a276cfb01e20310dfd611cc712958695a7b637f70bf",
          "image": "registry.connect.redhat.com/hitachi/hspc-operator@sha256:f82f352feadf07a971ab6a276cfb01e20310dfd611cc712958695a7b637f70bf",
          "name": "hspc-operator"
        },
        {
          "digest": "sha256:f82f352feadf07a971ab6a276cfb01e20310dfd611cc712958695a7b637f70bf",
          "image": "registry.connect.redhat.com/hitachi/hspc-operator@sha256:f82f352feadf07a971ab6a276cfb01e20310dfd611cc712958695a7b637f70bf",
          "name": "hspc-operator-f82f352feadf07a971ab6a276cfb01e20310dfd611cc712958695a7b637f70bf-annotation"
        },
        {
          "digest": "sha256:f82f352feadf07a971ab6a276cfb01e20310dfd611cc712958695a7b637f70bf",
          "image": "registry.connect.redhat.com/hitachi/hspc-operator@sha256:f82f352feadf07a971ab6a276cfb01e20310dfd611cc712958695a7b637f70bf",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.8.0",
      "version_original": "1.8.0"
    },
    {
      "_id": "61b391c2f5a71c2d7c841e4e",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "bundle_path_digest": "sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T17:43:30.067000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:36.513000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "operator-3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.0",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.23.0",
      "version_original": "1.23.0"
    },
    {
      "_id": "61b394ef39aedd4833bb11ad",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "bundle_path_digest": "sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T17:57:03.788000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:57:47.646000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "operator-3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.0",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.23.0",
      "version_original": "1.23.0"
    },
    {
      "_id": "61b3950d9e4335b6d1b1d8bd",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "bundle_path_digest": "sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T17:57:33.938000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:13:02.968000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "operator-3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.0",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.23.0",
      "version_original": "1.23.0"
    },
    {
      "_id": "61b3956860a98527f7695a58",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "bundle_path_digest": "sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T17:59:04.690000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:14:46.237000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "operator-3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.0",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.23.0",
      "version_original": "1.23.0"
    },
    {
      "_id": "61b395c3f5a71c2d7c841e50",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "bundle_path_digest": "sha256:69638694cb924d90c1c741bb90be3fee24efc6a3072774e875b30d5c55877108",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T18:00:35.385000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:58:53.692000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "image": "quay.io/tigera/operator@sha256:3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272",
          "name": "operator-3685ddcc878ab11b91b9ea8b0adc94570dc398c8d79bb6ca87b1ea78e16ca272-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.0",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.23.0",
      "version_original": "1.23.0"
    },
    {
      "_id": "61b3b88e9e4335b6d1b1d8c0",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "bundle_path_digest": "sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T20:29:02.910000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:42.185000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "operator-df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.23.1",
      "version_original": "1.23.1"
    },
    {
      "_id": "61b3b8aaf5a71c2d7c841e55",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "bundle_path_digest": "sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T20:29:30.990000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:13:09.838000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "operator-df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.23.1",
      "version_original": "1.23.1"
    },
    {
      "_id": "61b3baddf5a71c2d7c841e56",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "bundle_path_digest": "sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T20:38:53.293000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:10:24.806000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "operator-df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.23.1",
      "version_original": "1.23.1"
    },
    {
      "_id": "61b3bb3039aedd4833bb11b4",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "bundle_path_digest": "sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T20:40:16.981000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:16:15.041000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "operator-df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.23.1",
      "version_original": "1.23.1"
    },
    {
      "_id": "61b3bb8960a98527f7695a5f",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "bundle_path_digest": "sha256:55c18554ceac30fc13b0bd91b2374e2f95045605f80d94c861cd185adfa0e1b4",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-10T20:41:45.677000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:46:39.607000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "image": "quay.io/tigera/operator@sha256:df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65",
          "name": "operator-df959774a8c3b2a870b42772d11dc0844c5bc4430a973c92a592be0b1012df65-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.23.1",
      "version_original": "1.23.1"
    },
    {
      "_id": "61b40a549e4335b6d1b1d8c5",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "bundle_path_digest": "sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T02:17:56.638000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:05:38.236000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "operator-a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.23.2",
      "version_original": "1.23.2"
    },
    {
      "_id": "61b40aa59e4335b6d1b1d8c6",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "bundle_path_digest": "sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T02:19:17.392000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:36:49.544000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "operator-a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.23.2",
      "version_original": "1.23.2"
    },
    {
      "_id": "61b40b4639aedd4833bb11b7",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "bundle_path_digest": "sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T02:21:58.451000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:49:02.754000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "operator-a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.23.2",
      "version_original": "1.23.2"
    },
    {
      "_id": "61b44c6360a98527f7695a6c",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "bundle_path_digest": "sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T06:59:47.553000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:13:15.562000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "operator-a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.23.2",
      "version_original": "1.23.2"
    },
    {
      "_id": "61b471f59e4335b6d1b1d8d4",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "bundle_path_digest": "sha256:85bb416b033fdeee5af37e48ac5ef16ae8d586c6a4305946e2f335713b021193",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T09:40:05.110000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:47.221000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "image": "quay.io/tigera/operator@sha256:a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a",
          "name": "operator-a370072cbe39ee8afe03d843e803d91e41e8573a7385654138e31207a9b44d9a-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.23.2",
      "version_original": "1.23.2"
    },
    {
      "_id": "61b471f69e4335b6d1b1d8d5",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "bundle_path_digest": "sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T09:40:06.514000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:12:53.629000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "operator-b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.3",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.23.3",
      "version_original": "1.23.3"
    },
    {
      "_id": "61b472439e4335b6d1b1d8d6",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "bundle_path_digest": "sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T09:41:23.482000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:31:05.844000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "operator-b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.3",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.23.3",
      "version_original": "1.23.3"
    },
    {
      "_id": "61b4729c9e4335b6d1b1d8d7",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "bundle_path_digest": "sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T09:42:52.128000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:19:42.356000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "operator-b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.3",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.23.3",
      "version_original": "1.23.3"
    },
    {
      "_id": "61b473039e4335b6d1b1d8d9",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "bundle_path_digest": "sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T09:44:35.900000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:13:21.033000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "operator-b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.3",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.23.3",
      "version_original": "1.23.3"
    },
    {
      "_id": "61b4742b60a98527f7695a6e",
      "alm_examples": [
        {
          "api_version": "operator.tigera.io/v1",
          "kind": "Installation",
          "metadata": {
            "name": "default"
          },
          "spec": {
            "variant": "Calico"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tigera/operator@sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "bundle_path_digest": "sha256:af2675c5b6917536944375fabb8cb53667c19fd5a24c498350ef4f66750f095e",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "release-v1.23",
      "creation_date": "2021-12-11T09:49:31.817000+00:00",
      "csv_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible. **Important**: this operator should only be installed if the cluster was already provisioned with Calico.",
      "csv_display_name": "Tigera Operator",
      "csv_metadata_description": "An operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes or OpenShift.",
      "csv_name": "tigera-operator.v1.23.3",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:57:51.213000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "tigera-operator",
      "provided_apis": [
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkPolicy",
          "plural": "networkpolicies",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkPolicy",
          "plural": "globalnetworkpolicies",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "APIServer",
          "plural": "apiservers",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "Installation",
          "plural": "installations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "FelixConfiguration",
          "plural": "felixconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "NetworkSet",
          "plural": "networksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPReservation",
          "plural": "ipreservations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMConfig",
          "plural": "ipamconfigs",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "CalicoNodeStatus",
          "plural": "caliconodestatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "ClusterInformation",
          "plural": "clusterinformations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPConfiguration",
          "plural": "bgpconfigurations",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMBlock",
          "plural": "ipamblocks",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "TigeraStatus",
          "plural": "tigerastatuses",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BGPPeer",
          "plural": "bgppeers",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "BlockAffinity",
          "plural": "blockaffinities",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPPool",
          "plural": "ippools",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "IPAMHandle",
          "plural": "ipamhandles",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "GlobalNetworkSet",
          "plural": "globalnetworksets",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "HostEndpoint",
          "plural": "hostendpoints",
          "version": "v1"
        },
        {
          "group": "crd.projectcalico.org",
          "kind": "KubeControllersConfiguration",
          "plural": "kubecontrollersconfigurations",
          "version": "v1"
        },
        {
          "group": "operator.tigera.io",
          "kind": "ImageSet",
          "plural": "imagesets",
          "version": "v1"
        }
      ],
      "provider": "Tigera",
      "related_images": [
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "tigera-operator"
        },
        {
          "digest": "sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "image": "quay.io/tigera/operator@sha256:b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69",
          "name": "operator-b4e3eeccfd3d5a931c07f31c244b272e058ccabd2d8155ccc3ff52ed78855e69-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.23.3",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.23.3",
      "version_original": "1.23.3"
    },
    {
      "_id": "61b7b936365e714ccb637aeb",
      "alm_examples": [
        {
          "api_version": "conjur.cyberark.com/v1",
          "kind": "ConjurFollower",
          "metadata": {
            "labels": {
              "app": "conjur-follower"
            },
            "name": "conjur-follower-operator-my-conjur-follower",
            "namespace": "conjur-follower-operator-system"
          },
          "spec": {
            "images": {
              "configurator": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
              "conjur": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
              "info": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
              "nginx": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
              "postgres": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
              "syslogNg": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c"
            },
            "master": {
              "account": "my-company",
              "authenticatorID": "conjur-openshift-follower",
              "authnLogin": "host/conjur-openshift-follower",
              "caCertificateFrom": {
                "configMapKeyRef": {
                  "key": "conjur.master-cert",
                  "name": "follower"
                }
              },
              "hostname": "conjur.my-company.net"
            },
            "replicas": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator-bundle@sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "bundle_path_digest": "sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "preview",
      "creation_date": "2021-12-13T21:20:54.693000+00:00",
      "csv_description": "Use this Operator for managing Conjur Followers in an OpenShift cluster.\n\nCyberArk products secure your most sensitive and high-value assets\u2014and supporting your Identity Security goals is our top priority. We offer 24/7 service for high priority issues to all customers with resources across ten countries and in all continents.\n\nCyberArk Conjur makes secrets management simple. Conjur provides a seamless open source interface to securely authenticate, control, and audit non-human access across tools, applications, containers, and cloud environments via robust secrets management.",
      "csv_display_name": "Conjur Enterprise Follower Operator",
      "csv_metadata_description": "",
      "csv_name": "conjur-follower-operator.v2.0.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:53:10.108000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "conjur-follower-operator",
      "provided_apis": [
        {
          "group": "conjur.cyberark.com",
          "kind": "ConjurFollower",
          "plural": "conjurfollowers",
          "version": "v1"
        }
      ],
      "provider": "CyberArk",
      "related_images": [
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-openshift-follower-operator"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng"
        },
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-follower-operator"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng-7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c-annotation"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres-96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5-annotation"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx-d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981-annotation"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info-27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05-annotation"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur-ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c-annotation"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator-b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "2.0.2",
      "version_original": "2.0.2"
    },
    {
      "_id": "61b7b939dda6c5fe6ba361dd",
      "alm_examples": [
        {
          "api_version": "conjur.cyberark.com/v1",
          "kind": "ConjurFollower",
          "metadata": {
            "labels": {
              "app": "conjur-follower"
            },
            "name": "conjur-follower-operator-my-conjur-follower",
            "namespace": "conjur-follower-operator-system"
          },
          "spec": {
            "images": {
              "configurator": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
              "conjur": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
              "info": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
              "nginx": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
              "postgres": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
              "syslogNg": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c"
            },
            "master": {
              "account": "my-company",
              "authenticatorID": "conjur-openshift-follower",
              "authnLogin": "host/conjur-openshift-follower",
              "caCertificateFrom": {
                "configMapKeyRef": {
                  "key": "conjur.master-cert",
                  "name": "follower"
                }
              },
              "hostname": "conjur.my-company.net"
            },
            "replicas": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator-bundle@sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "bundle_path_digest": "sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-13T21:20:57.202000+00:00",
      "csv_description": "Use this Operator for managing Conjur Followers in an OpenShift cluster.\n\nCyberArk products secure your most sensitive and high-value assets\u2014and supporting your Identity Security goals is our top priority. We offer 24/7 service for high priority issues to all customers with resources across ten countries and in all continents.\n\nCyberArk Conjur makes secrets management simple. Conjur provides a seamless open source interface to securely authenticate, control, and audit non-human access across tools, applications, containers, and cloud environments via robust secrets management.",
      "csv_display_name": "Conjur Enterprise Follower Operator",
      "csv_metadata_description": "",
      "csv_name": "conjur-follower-operator.v2.0.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:53:14.218000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "conjur-follower-operator",
      "provided_apis": [
        {
          "group": "conjur.cyberark.com",
          "kind": "ConjurFollower",
          "plural": "conjurfollowers",
          "version": "v1"
        }
      ],
      "provider": "CyberArk",
      "related_images": [
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-openshift-follower-operator"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng"
        },
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-follower-operator"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng-7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c-annotation"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres-96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5-annotation"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx-d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981-annotation"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info-27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05-annotation"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur-ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c-annotation"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator-b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "2.0.2",
      "version_original": "2.0.2"
    },
    {
      "_id": "61b7ba1b365e714ccb637aec",
      "alm_examples": [
        {
          "api_version": "conjur.cyberark.com/v1",
          "kind": "ConjurFollower",
          "metadata": {
            "labels": {
              "app": "conjur-follower"
            },
            "name": "conjur-follower-operator-my-conjur-follower",
            "namespace": "conjur-follower-operator-system"
          },
          "spec": {
            "images": {
              "configurator": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
              "conjur": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
              "info": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
              "nginx": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
              "postgres": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
              "syslogNg": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c"
            },
            "master": {
              "account": "my-company",
              "authenticatorID": "conjur-openshift-follower",
              "authnLogin": "host/conjur-openshift-follower",
              "caCertificateFrom": {
                "configMapKeyRef": {
                  "key": "conjur.master-cert",
                  "name": "follower"
                }
              },
              "hostname": "conjur.my-company.net"
            },
            "replicas": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator-bundle@sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "bundle_path_digest": "sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-12-13T21:24:43.594000+00:00",
      "csv_description": "Use this Operator for managing Conjur Followers in an OpenShift cluster.\n\nCyberArk products secure your most sensitive and high-value assets\u2014and supporting your Identity Security goals is our top priority. We offer 24/7 service for high priority issues to all customers with resources across ten countries and in all continents.\n\nCyberArk Conjur makes secrets management simple. Conjur provides a seamless open source interface to securely authenticate, control, and audit non-human access across tools, applications, containers, and cloud environments via robust secrets management.",
      "csv_display_name": "Conjur Enterprise Follower Operator",
      "csv_metadata_description": "",
      "csv_name": "conjur-follower-operator.v2.0.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:47:48.112000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "conjur-follower-operator",
      "provided_apis": [
        {
          "group": "conjur.cyberark.com",
          "kind": "ConjurFollower",
          "plural": "conjurfollowers",
          "version": "v1"
        }
      ],
      "provider": "CyberArk",
      "related_images": [
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-openshift-follower-operator"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng"
        },
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-follower-operator"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng-7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c-annotation"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres-96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5-annotation"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx-d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981-annotation"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info-27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05-annotation"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur-ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c-annotation"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator-b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "2.0.2",
      "version_original": "2.0.2"
    },
    {
      "_id": "61b7ba1edda6c5fe6ba361df",
      "alm_examples": [
        {
          "api_version": "conjur.cyberark.com/v1",
          "kind": "ConjurFollower",
          "metadata": {
            "labels": {
              "app": "conjur-follower"
            },
            "name": "conjur-follower-operator-my-conjur-follower",
            "namespace": "conjur-follower-operator-system"
          },
          "spec": {
            "images": {
              "configurator": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
              "conjur": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
              "info": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
              "nginx": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
              "postgres": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
              "syslogNg": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c"
            },
            "master": {
              "account": "my-company",
              "authenticatorID": "conjur-openshift-follower",
              "authnLogin": "host/conjur-openshift-follower",
              "caCertificateFrom": {
                "configMapKeyRef": {
                  "key": "conjur.master-cert",
                  "name": "follower"
                }
              },
              "hostname": "conjur.my-company.net"
            },
            "replicas": 1
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator-bundle@sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "bundle_path_digest": "sha256:e3bc395543de733defc75270df2828fa8ba4cdf5c5cf79848a4640ee99a9fef7",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "preview",
      "creation_date": "2021-12-13T21:24:46.108000+00:00",
      "csv_description": "Use this Operator for managing Conjur Followers in an OpenShift cluster.\n\nCyberArk products secure your most sensitive and high-value assets\u2014and supporting your Identity Security goals is our top priority. We offer 24/7 service for high priority issues to all customers with resources across ten countries and in all continents.\n\nCyberArk Conjur makes secrets management simple. Conjur provides a seamless open source interface to securely authenticate, control, and audit non-human access across tools, applications, containers, and cloud environments via robust secrets management.",
      "csv_display_name": "Conjur Enterprise Follower Operator",
      "csv_metadata_description": "",
      "csv_name": "conjur-follower-operator.v2.0.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T12:50:25.022000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "conjur-follower-operator",
      "provided_apis": [
        {
          "group": "conjur.cyberark.com",
          "kind": "ConjurFollower",
          "plural": "conjurfollowers",
          "version": "v1"
        }
      ],
      "provider": "CyberArk",
      "related_images": [
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-openshift-follower-operator"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng"
        },
        {
          "digest": "sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-operator@sha256:ba6d5751c8428a8749c7f0cda46aff3ac4f871c5127a1499b22dbd1988c7f63d",
          "name": "conjur-follower-operator"
        },
        {
          "digest": "sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-syslog-ng@sha256:7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c",
          "name": "conjur-openshift-follower-syslog-ng-7a51775bbea3185f5660c340e27813f97ac1a364d85dcc3fe62702926155840c-annotation"
        },
        {
          "digest": "sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-postgres@sha256:96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5",
          "name": "conjur-openshift-follower-postgres-96a96a3ee41a08105c37a6ad44efe0a245dae51f2112529fb5c1fda31a0897f5-annotation"
        },
        {
          "digest": "sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-nginx@sha256:d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981",
          "name": "conjur-openshift-follower-nginx-d2d23fffb9a867633622560fe99cfb0152607e7af46806bc1c0c636229914981-annotation"
        },
        {
          "digest": "sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-info@sha256:27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05",
          "name": "conjur-openshift-follower-info-27b5d09d78b87a032104f6b4e79f9dae8069607202f0e7af327f6d2ef958aa05-annotation"
        },
        {
          "digest": "sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-conjur@sha256:ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c",
          "name": "conjur-openshift-follower-conjur-ba4a079664b1ed1bae7f1cfb00145af150a23bd046c1606503382cb171131e6c-annotation"
        },
        {
          "digest": "sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "image": "registry.connect.redhat.com/cyberark/conjur-openshift-follower-configurator@sha256:b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21",
          "name": "conjur-openshift-follower-configurator-b4074231697be6e87b2cb0cb18dd89aa45fed314619ad102b261182eadb74c21-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "2.0.2",
      "version_original": "2.0.2"
    }
  ],
  "page": 18,
  "page_size": 100,
  "total": 4801
}
