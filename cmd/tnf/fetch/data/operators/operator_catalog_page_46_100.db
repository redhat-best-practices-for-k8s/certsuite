{
  "data": [
    {
      "_id": "6311eead7967f2ab668ff334",
      "alm_examples": [
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "License",
          "metadata": {
            "name": "tvk-license-one",
            "namespace": "openshift-marketplace"
          },
          "spec": {
            "key": "xLkNDgwKD3jafZJNb8IwDIbv+RWRdo6Uj5a2SD1MwKRtjE0bsLOTuiISpFWaovHv145NQy3iPcb249d27j6xoE/tnkpJOZ/KaBrFVHLJycwjBFu5OQSk/8r7IOMJk5IsCttn0IHyB4+49hb2BEywR6SjjOBbJHtr0DW4Rd9cUnJJXsC6gA6cwcVXbf3pbKLvrRhPmersVYca3GlEfsdiB4Gs2oNG/1pumo5+EWaCfKA/on+cDysh5gWokjOjU8WEQGBaQMSM0DrDiTKTpCterOgV5d07+wXIm4Dleehh+3y9vd8s138MdduEqWq8YsLBAZsaDBbkudW4Gc1Ic56ITHMwrEwTwSIlY5bqLGGGx1kW6QQzUZKfncPotJfrf2u92UGDN37HDDorNgxPlAtOe3d0VRXYfAMj8ZzrMEYCIQCVaI/QJN+2M/QJWimd28dWOi/6o5s5I5+z30JrmzwGnQIhAKrSu8NeUIqXGEBTQvPKe3n2U0LNPht/ZAQIs5CZNeWlX02gk"
          }
        },
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "Target",
          "metadata": {
            "labels": {
              "app": "triliovault"
            },
            "name": "triliovault-target",
            "namespace": "openshift-marketplace"
          },
          "spec": {
            "nfsCredentials": {
              "nfsExport": "00.00.00.00:/src/nfs/kubedata",
              "nfsOptions": "nfsvers=4"
            },
            "type": "NFS",
            "vendor": "Other"
          }
        },
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "BackupPlan",
          "metadata": {
            "name": "tvk-backupplan"
          },
          "spec": {
            "backupConfig": {
              "retentionPolicy": {
                "name": "retention-policy",
                "namespace": "openshift-marketplace"
              },
              "schedulePolicy": {
                "fullBackupPolicy": {
                  "name": "full-bp-policy",
                  "namespace": "openshift-marketplace"
                },
                "incrementalBackupPolicy": {
                  "name": "inc-bp-policy",
                  "namespace": "openshift-marketplace"
                }
              },
              "target": {
                "name": "triliovault-target",
                "namespace": "openshift-marketplace"
              }
            },
            "backupPlanComponents": {
              "custom": [
                {
                  "matchLabels": {
                    "app": "nginx"
                  }
                }
              ],
              "helmReleases": [
                "sample-release"
              ],
              "operators": [
                {
                  "applicationResourceSelector": [
                    {
                      "matchLabels": {
                        "app": "etcd"
                      }
                    }
                  ],
                  "customResources": [
                    {
                      "groupVersionKind": {
                        "group": "etcd.database.coreos.com",
                        "kind": "EtcdCluster",
                        "version": "v1beta2"
                      },
                      "objects": [
                        "demo-etcd-cluster"
                      ]
                    }
                  ],
                  "operatorId": "demo-etcd-cluster",
                  "operatorResourceSelector": [
                    {
                      "matchLabels": {
                        "release": "demo-etcd-operator"
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/trilio/r-3445381-bundle@sha256:71d1f6e4cf845d4926ce95b454118457911d094038f586b526005e49176d6073",
      "bundle_path_digest": "sha256:71d1f6e4cf845d4926ce95b454118457911d094038f586b526005e49176d6073",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-02T11:53:17.720000+00:00",
      "csv_description": "TrilioVault for Kubernetes is an enterprise-grade, cloud-native platform purpose built for data protection and management of Kubernetes applications for IT managers, administrators and developers. TrilioVault supports upstream Kubernetes and OpenShift environments and offers the following features:\n  * Application-Centric - protects both data and metadata for Helm, Operator or custom Label based applications.\n  * Red Hat Certified - first backup and recovery solution with OpenShift Operator Certification.\n  * Native to Kubernetes & OpenShift: Packaged and deployed as an Operator, integrated via Kubernetes API and with all features that it provides.\n  * Infrastructure Agnostic: Compatible with any Storage (CSI, NFS, S3), or any Cloud (Private or Public).\n  * Application Deployment & Tooling: Helm, Operators, Labels, Prometheus, Fluentd.\nTutorials\n------------\nPlease click the link below to access the TrilioVault for Kubernetes \"How-To\" series for deployment, best practice and use-case videos\n<a href=\"https://www.trilio.io/triliovault-for-kubernetes\">TrilioVault for Kubernetes - Tutorials and How-To </a>\u201d\nLicensing\n--------\nCustomers can download a 30-day Free Trial or a 10-node Basic Edition at no cost.  You can also connect with the Trilio team for an Enterprise Edition license with no limitations and Premium Support.\nFor more information on license plans please vist:\n<a href=\"www.trilio.io/plans\"> Trilio Vault for Kubernetes licensing and plans </a>\nAbout Trilio\n----------------\nTrilio is trusted by global cloud infrastructure operators to deliver data protection, application resiliency, infrastructure migration and infrastructure version management. Our TrilioVault technology supports Kubernetes, OpenStack and Virtualization environments to recover from disasters, migrate tenant workloads, move workloads to new infrastructures and migrate to new infrastructure software distributions. www.trilio.io and @triliodata on Twitter.",
      "csv_display_name": "TrilioVault for Kubernetes",
      "csv_metadata_description": "Cloud-Native Data Protection for Kubernetes",
      "csv_name": "k8s-triliovault-stable.2.10.5",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-23T01:28:04.239000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "k8s-triliovault",
      "provided_apis": [
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterBackup",
          "plural": "clusterbackups",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Policy",
          "plural": "policies",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "BackupPlan",
          "plural": "backupplans",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterBackupPlan",
          "plural": "clusterbackupplans",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Restore",
          "plural": "restores",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Target",
          "plural": "targets",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterRestore",
          "plural": "clusterrestores",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "License",
          "plural": "licenses",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Hook",
          "plural": "hooks",
          "version": "v1"
        }
      ],
      "provider": "Trilio",
      "related_images": [
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "control-plane-3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820-annotation"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "k8s-triliovault-control-plane"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "k8s-triliovault-analyzer"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-admission-webhook"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-exporter"
        },
        {
          "digest": "sha256:75f64cb49df3b5a82fdab3026276e91287f76c3aedc338d84d1ccd22ba8616df",
          "image": "registry.connect.redhat.com/trilio/web@sha256:75f64cb49df3b5a82fdab3026276e91287f76c3aedc338d84d1ccd22ba8616df",
          "name": "triliovault-web"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-web-backend"
        },
        {
          "digest": "sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "image": "registry.connect.redhat.com/trilio/dex@sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "name": "triliovault-dex"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "webhook-init"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "dex-init"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "metamover"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "datamover"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "datastore_attacher"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "backup_scheduler"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "backup_cleaner"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "backup_retention"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "target_browser"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "hook"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "resource_cleaner"
        },
        {
          "digest": "sha256:62ea930dfe5370eeaa574d88d94fb0120a5af0a1cc90a4a1831be7630a30844c",
          "image": "registry.connect.redhat.com/trilio/minio@sha256:62ea930dfe5370eeaa574d88d94fb0120a5af0a1cc90a4a1831be7630a30844c",
          "name": "minio"
        },
        {
          "digest": "sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "image": "registry.connect.redhat.com/trilio/dex@sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "name": "dex"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "tvk_init"
        }
      ],
      "replaces": null,
      "skip_range": "<2.10.5",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "2.10.5",
      "version_original": "2.10.5"
    },
    {
      "_id": "6311eef7a10620cfad3be787",
      "alm_examples": [
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "License",
          "metadata": {
            "name": "tvk-license-one",
            "namespace": "openshift-marketplace"
          },
          "spec": {
            "key": "xLkNDgwKD3jafZJNb8IwDIbv+RWRdo6Uj5a2SD1MwKRtjE0bsLOTuiISpFWaovHv145NQy3iPcb249d27j6xoE/tnkpJOZ/KaBrFVHLJycwjBFu5OQSk/8r7IOMJk5IsCttn0IHyB4+49hb2BEywR6SjjOBbJHtr0DW4Rd9cUnJJXsC6gA6cwcVXbf3pbKLvrRhPmersVYca3GlEfsdiB4Gs2oNG/1pumo5+EWaCfKA/on+cDysh5gWokjOjU8WEQGBaQMSM0DrDiTKTpCterOgV5d07+wXIm4Dleehh+3y9vd8s138MdduEqWq8YsLBAZsaDBbkudW4Gc1Ic56ITHMwrEwTwSIlY5bqLGGGx1kW6QQzUZKfncPotJfrf2u92UGDN37HDDorNgxPlAtOe3d0VRXYfAMj8ZzrMEYCIQCVaI/QJN+2M/QJWimd28dWOi/6o5s5I5+z30JrmzwGnQIhAKrSu8NeUIqXGEBTQvPKe3n2U0LNPht/ZAQIs5CZNeWlX02gk"
          }
        },
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "Target",
          "metadata": {
            "labels": {
              "app": "triliovault"
            },
            "name": "triliovault-target",
            "namespace": "openshift-marketplace"
          },
          "spec": {
            "nfsCredentials": {
              "nfsExport": "00.00.00.00:/src/nfs/kubedata",
              "nfsOptions": "nfsvers=4"
            },
            "type": "NFS",
            "vendor": "Other"
          }
        },
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "BackupPlan",
          "metadata": {
            "name": "tvk-backupplan"
          },
          "spec": {
            "backupConfig": {
              "retentionPolicy": {
                "name": "retention-policy",
                "namespace": "openshift-marketplace"
              },
              "schedulePolicy": {
                "fullBackupPolicy": {
                  "name": "full-bp-policy",
                  "namespace": "openshift-marketplace"
                },
                "incrementalBackupPolicy": {
                  "name": "inc-bp-policy",
                  "namespace": "openshift-marketplace"
                }
              },
              "target": {
                "name": "triliovault-target",
                "namespace": "openshift-marketplace"
              }
            },
            "backupPlanComponents": {
              "custom": [
                {
                  "matchLabels": {
                    "app": "nginx"
                  }
                }
              ],
              "helmReleases": [
                "sample-release"
              ],
              "operators": [
                {
                  "applicationResourceSelector": [
                    {
                      "matchLabels": {
                        "app": "etcd"
                      }
                    }
                  ],
                  "customResources": [
                    {
                      "groupVersionKind": {
                        "group": "etcd.database.coreos.com",
                        "kind": "EtcdCluster",
                        "version": "v1beta2"
                      },
                      "objects": [
                        "demo-etcd-cluster"
                      ]
                    }
                  ],
                  "operatorId": "demo-etcd-cluster",
                  "operatorResourceSelector": [
                    {
                      "matchLabels": {
                        "release": "demo-etcd-operator"
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/trilio/r-3445381-bundle@sha256:71d1f6e4cf845d4926ce95b454118457911d094038f586b526005e49176d6073",
      "bundle_path_digest": "sha256:71d1f6e4cf845d4926ce95b454118457911d094038f586b526005e49176d6073",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-02T11:54:31.761000+00:00",
      "csv_description": "TrilioVault for Kubernetes is an enterprise-grade, cloud-native platform purpose built for data protection and management of Kubernetes applications for IT managers, administrators and developers. TrilioVault supports upstream Kubernetes and OpenShift environments and offers the following features:\n  * Application-Centric - protects both data and metadata for Helm, Operator or custom Label based applications.\n  * Red Hat Certified - first backup and recovery solution with OpenShift Operator Certification.\n  * Native to Kubernetes & OpenShift: Packaged and deployed as an Operator, integrated via Kubernetes API and with all features that it provides.\n  * Infrastructure Agnostic: Compatible with any Storage (CSI, NFS, S3), or any Cloud (Private or Public).\n  * Application Deployment & Tooling: Helm, Operators, Labels, Prometheus, Fluentd.\nTutorials\n------------\nPlease click the link below to access the TrilioVault for Kubernetes \"How-To\" series for deployment, best practice and use-case videos\n<a href=\"https://www.trilio.io/triliovault-for-kubernetes\">TrilioVault for Kubernetes - Tutorials and How-To </a>\u201d\nLicensing\n--------\nCustomers can download a 30-day Free Trial or a 10-node Basic Edition at no cost.  You can also connect with the Trilio team for an Enterprise Edition license with no limitations and Premium Support.\nFor more information on license plans please vist:\n<a href=\"www.trilio.io/plans\"> Trilio Vault for Kubernetes licensing and plans </a>\nAbout Trilio\n----------------\nTrilio is trusted by global cloud infrastructure operators to deliver data protection, application resiliency, infrastructure migration and infrastructure version management. Our TrilioVault technology supports Kubernetes, OpenStack and Virtualization environments to recover from disasters, migrate tenant workloads, move workloads to new infrastructures and migrate to new infrastructure software distributions. www.trilio.io and @triliodata on Twitter.",
      "csv_display_name": "TrilioVault for Kubernetes",
      "csv_metadata_description": "Cloud-Native Data Protection for Kubernetes",
      "csv_name": "k8s-triliovault-stable.2.10.5",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-23T01:27:31.201000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "k8s-triliovault",
      "provided_apis": [
        {
          "group": "triliovault.trilio.io",
          "kind": "Target",
          "plural": "targets",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "BackupPlan",
          "plural": "backupplans",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterBackupPlan",
          "plural": "clusterbackupplans",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterRestore",
          "plural": "clusterrestores",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Hook",
          "plural": "hooks",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Restore",
          "plural": "restores",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "License",
          "plural": "licenses",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterBackup",
          "plural": "clusterbackups",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Policy",
          "plural": "policies",
          "version": "v1"
        }
      ],
      "provider": "Trilio",
      "related_images": [
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "control-plane-3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820-annotation"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "k8s-triliovault-control-plane"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "k8s-triliovault-analyzer"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-admission-webhook"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-exporter"
        },
        {
          "digest": "sha256:75f64cb49df3b5a82fdab3026276e91287f76c3aedc338d84d1ccd22ba8616df",
          "image": "registry.connect.redhat.com/trilio/web@sha256:75f64cb49df3b5a82fdab3026276e91287f76c3aedc338d84d1ccd22ba8616df",
          "name": "triliovault-web"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-web-backend"
        },
        {
          "digest": "sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "image": "registry.connect.redhat.com/trilio/dex@sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "name": "triliovault-dex"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "webhook-init"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "dex-init"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "metamover"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "datamover"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "datastore_attacher"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "backup_scheduler"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "backup_cleaner"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "backup_retention"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "target_browser"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "hook"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "resource_cleaner"
        },
        {
          "digest": "sha256:62ea930dfe5370eeaa574d88d94fb0120a5af0a1cc90a4a1831be7630a30844c",
          "image": "registry.connect.redhat.com/trilio/minio@sha256:62ea930dfe5370eeaa574d88d94fb0120a5af0a1cc90a4a1831be7630a30844c",
          "name": "minio"
        },
        {
          "digest": "sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "image": "registry.connect.redhat.com/trilio/dex@sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "name": "dex"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "tvk_init"
        }
      ],
      "replaces": null,
      "skip_range": "<2.10.5",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "2.10.5",
      "version_original": "2.10.5"
    },
    {
      "_id": "6311f26e7967f2ab668ff451",
      "alm_examples": [
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "License",
          "metadata": {
            "name": "tvk-license-one",
            "namespace": "openshift-marketplace"
          },
          "spec": {
            "key": "xLkNDgwKD3jafZJNb8IwDIbv+RWRdo6Uj5a2SD1MwKRtjE0bsLOTuiISpFWaovHv145NQy3iPcb249d27j6xoE/tnkpJOZ/KaBrFVHLJycwjBFu5OQSk/8r7IOMJk5IsCttn0IHyB4+49hb2BEywR6SjjOBbJHtr0DW4Rd9cUnJJXsC6gA6cwcVXbf3pbKLvrRhPmersVYca3GlEfsdiB4Gs2oNG/1pumo5+EWaCfKA/on+cDysh5gWokjOjU8WEQGBaQMSM0DrDiTKTpCterOgV5d07+wXIm4Dleehh+3y9vd8s138MdduEqWq8YsLBAZsaDBbkudW4Gc1Ic56ITHMwrEwTwSIlY5bqLGGGx1kW6QQzUZKfncPotJfrf2u92UGDN37HDDorNgxPlAtOe3d0VRXYfAMj8ZzrMEYCIQCVaI/QJN+2M/QJWimd28dWOi/6o5s5I5+z30JrmzwGnQIhAKrSu8NeUIqXGEBTQvPKe3n2U0LNPht/ZAQIs5CZNeWlX02gk"
          }
        },
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "Target",
          "metadata": {
            "labels": {
              "app": "triliovault"
            },
            "name": "triliovault-target",
            "namespace": "openshift-marketplace"
          },
          "spec": {
            "nfsCredentials": {
              "nfsExport": "00.00.00.00:/src/nfs/kubedata",
              "nfsOptions": "nfsvers=4"
            },
            "type": "NFS",
            "vendor": "Other"
          }
        },
        {
          "api_version": "triliovault.trilio.io/v1",
          "kind": "BackupPlan",
          "metadata": {
            "name": "tvk-backupplan"
          },
          "spec": {
            "backupConfig": {
              "retentionPolicy": {
                "name": "retention-policy",
                "namespace": "openshift-marketplace"
              },
              "schedulePolicy": {
                "fullBackupPolicy": {
                  "name": "full-bp-policy",
                  "namespace": "openshift-marketplace"
                },
                "incrementalBackupPolicy": {
                  "name": "inc-bp-policy",
                  "namespace": "openshift-marketplace"
                }
              },
              "target": {
                "name": "triliovault-target",
                "namespace": "openshift-marketplace"
              }
            },
            "backupPlanComponents": {
              "custom": [
                {
                  "matchLabels": {
                    "app": "nginx"
                  }
                }
              ],
              "helmReleases": [
                "sample-release"
              ],
              "operators": [
                {
                  "applicationResourceSelector": [
                    {
                      "matchLabels": {
                        "app": "etcd"
                      }
                    }
                  ],
                  "customResources": [
                    {
                      "groupVersionKind": {
                        "group": "etcd.database.coreos.com",
                        "kind": "EtcdCluster",
                        "version": "v1beta2"
                      },
                      "objects": [
                        "demo-etcd-cluster"
                      ]
                    }
                  ],
                  "operatorId": "demo-etcd-cluster",
                  "operatorResourceSelector": [
                    {
                      "matchLabels": {
                        "release": "demo-etcd-operator"
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/trilio/r-3445381-bundle@sha256:71d1f6e4cf845d4926ce95b454118457911d094038f586b526005e49176d6073",
      "bundle_path_digest": "sha256:71d1f6e4cf845d4926ce95b454118457911d094038f586b526005e49176d6073",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-02T12:09:18.936000+00:00",
      "csv_description": "TrilioVault for Kubernetes is an enterprise-grade, cloud-native platform purpose built for data protection and management of Kubernetes applications for IT managers, administrators and developers. TrilioVault supports upstream Kubernetes and OpenShift environments and offers the following features:\n  * Application-Centric - protects both data and metadata for Helm, Operator or custom Label based applications.\n  * Red Hat Certified - first backup and recovery solution with OpenShift Operator Certification.\n  * Native to Kubernetes & OpenShift: Packaged and deployed as an Operator, integrated via Kubernetes API and with all features that it provides.\n  * Infrastructure Agnostic: Compatible with any Storage (CSI, NFS, S3), or any Cloud (Private or Public).\n  * Application Deployment & Tooling: Helm, Operators, Labels, Prometheus, Fluentd.\nTutorials\n------------\nPlease click the link below to access the TrilioVault for Kubernetes \"How-To\" series for deployment, best practice and use-case videos\n<a href=\"https://www.trilio.io/triliovault-for-kubernetes\">TrilioVault for Kubernetes - Tutorials and How-To </a>\u201d\nLicensing\n--------\nCustomers can download a 30-day Free Trial or a 10-node Basic Edition at no cost.  You can also connect with the Trilio team for an Enterprise Edition license with no limitations and Premium Support.\nFor more information on license plans please vist:\n<a href=\"www.trilio.io/plans\"> Trilio Vault for Kubernetes licensing and plans </a>\nAbout Trilio\n----------------\nTrilio is trusted by global cloud infrastructure operators to deliver data protection, application resiliency, infrastructure migration and infrastructure version management. Our TrilioVault technology supports Kubernetes, OpenStack and Virtualization environments to recover from disasters, migrate tenant workloads, move workloads to new infrastructures and migrate to new infrastructure software distributions. www.trilio.io and @triliodata on Twitter.",
      "csv_display_name": "TrilioVault for Kubernetes",
      "csv_metadata_description": "Cloud-Native Data Protection for Kubernetes",
      "csv_name": "k8s-triliovault-stable.2.10.5",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-23T01:27:46.226000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "k8s-triliovault",
      "provided_apis": [
        {
          "group": "triliovault.trilio.io",
          "kind": "Hook",
          "plural": "hooks",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterBackup",
          "plural": "clusterbackups",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterBackupPlan",
          "plural": "clusterbackupplans",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Policy",
          "plural": "policies",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "ClusterRestore",
          "plural": "clusterrestores",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "License",
          "plural": "licenses",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Target",
          "plural": "targets",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "BackupPlan",
          "plural": "backupplans",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "triliovault.trilio.io",
          "kind": "Restore",
          "plural": "restores",
          "version": "v1"
        }
      ],
      "provider": "Trilio",
      "related_images": [
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "control-plane-3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820-annotation"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "k8s-triliovault-control-plane"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "k8s-triliovault-analyzer"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-admission-webhook"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-exporter"
        },
        {
          "digest": "sha256:75f64cb49df3b5a82fdab3026276e91287f76c3aedc338d84d1ccd22ba8616df",
          "image": "registry.connect.redhat.com/trilio/web@sha256:75f64cb49df3b5a82fdab3026276e91287f76c3aedc338d84d1ccd22ba8616df",
          "name": "triliovault-web"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "triliovault-web-backend"
        },
        {
          "digest": "sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "image": "registry.connect.redhat.com/trilio/dex@sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "name": "triliovault-dex"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "webhook-init"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "dex-init"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "metamover"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "datamover"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "datastore_attacher"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "backup_scheduler"
        },
        {
          "digest": "sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "image": "registry.connect.redhat.com/trilio/metamover@sha256:05a6a672bca4f2a057609d1585c023a88d6b3fecb7e55382008f7c9560ebdca5",
          "name": "backup_cleaner"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "backup_retention"
        },
        {
          "digest": "sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "image": "registry.connect.redhat.com/trilio/datamover@sha256:98c38f1b4ab8c47e309994dd38df6f679f6c818fd44f8a39a48717525bb36de2",
          "name": "target_browser"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "hook"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "resource_cleaner"
        },
        {
          "digest": "sha256:62ea930dfe5370eeaa574d88d94fb0120a5af0a1cc90a4a1831be7630a30844c",
          "image": "registry.connect.redhat.com/trilio/minio@sha256:62ea930dfe5370eeaa574d88d94fb0120a5af0a1cc90a4a1831be7630a30844c",
          "name": "minio"
        },
        {
          "digest": "sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "image": "registry.connect.redhat.com/trilio/dex@sha256:7bcb3d85a4447f1fa684b76b8cb7fb314a9ddedbd447b336da8a3ea286b5834f",
          "name": "dex"
        },
        {
          "digest": "sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "image": "registry.connect.redhat.com/trilio/control-plane@sha256:3634919392e01a289e694656fe15c545370f201a814a5defd82de06130aec820",
          "name": "tvk_init"
        }
      ],
      "replaces": null,
      "skip_range": "<2.10.5",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "2.10.5",
      "version_original": "2.10.5"
    },
    {
      "_id": "6312035125579ee0e8ab63d3",
      "alm_examples": [
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecClusterConfig",
          "metadata": {
            "name": "acc100SampleConfig",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "acceleratorSelector": {
              "deviceID": "someDevice",
              "driver": "someDriver",
              "maxVirtualFunctions": 2,
              "pciAddress": "somePciAddress",
              "vendorID": "someVendor"
            },
            "drainSkip": false,
            "nodeSelector": {
              "expectedLabel1": "valueOfExpectedLabel1",
              "expectedLabelN": "valueOfExpectedLabelN"
            },
            "physicalFunction": {
              "bbDevConfig": {
                "acc100": {
                  "downlink4G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 0
                  },
                  "downlink5G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 4
                  },
                  "maxQueueSize": 1024,
                  "numVfBundles": 16,
                  "pfMode": true,
                  "uplink4G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 0
                  },
                  "uplink5G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 4
                  }
                }
              },
              "pfDriver": "pci-pf-stub",
              "vfAmount": 2,
              "vfDriver": "vfio-pci"
            },
            "priority": 100
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecClusterConfig",
          "metadata": {
            "name": "n3000SampleConfig",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "acceleratorSelector": {
              "deviceID": "someDevice",
              "driver": "someDriver",
              "maxVirtualFunctions": 2,
              "pciAddress": "somePciAddress",
              "vendorID": "someVendor"
            },
            "drainSkip": false,
            "nodeSelector": {
              "expectedLabel1": "valueOfExpectedLabel1",
              "expectedLabelN": "valueOfExpectedLabelN"
            },
            "physicalFunction": {
              "bbDevConfig": {
                "n3000": {
                  "downlink": {
                    "bandwidth": 3,
                    "loadBalance": 128,
                    "queues": {
                      "vf0": 16,
                      "vf1": 16,
                      "vf2": 0,
                      "vf3": 0,
                      "vf4": 0,
                      "vf5": 0,
                      "vf6": 0,
                      "vf7": 0
                    }
                  },
                  "flrTimeout": 610,
                  "networkType": "FPGA_5GNR",
                  "pfMode": true,
                  "uplink": {
                    "bandwidth": 3,
                    "loadBalance": 128,
                    "queues": {
                      "vf0": 16,
                      "vf1": 16,
                      "vf2": 0,
                      "vf3": 0,
                      "vf4": 0,
                      "vf5": 0,
                      "vf6": 0,
                      "vf7": 0
                    }
                  }
                }
              },
              "pfDriver": "pci-pf-stub",
              "vfAmount": 2,
              "vfDriver": "vfio-pci"
            },
            "priority": 100
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecNodeConfig",
          "metadata": {
            "name": "acc100-worker",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "drainSkip": false,
            "physicalFunctions": [
              {
                "bbDevConfig": {
                  "acc100": {
                    "downlink4G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 0
                    },
                    "downlink5G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 4
                    },
                    "maxQueueSize": 1024,
                    "numVfBundles": 16,
                    "pfMode": true,
                    "uplink4G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 0
                    },
                    "uplink5G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 4
                    }
                  }
                },
                "pci_addr": "somePciAddress",
                "pf_driver": "pci-pf-stub",
                "vf_amount": 2,
                "vf_driver": "vfio-pci"
              }
            ]
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecNodeConfig",
          "metadata": {
            "name": "n3000-worker",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "drainSkip": false,
            "physicalFunctions": [
              {
                "bbDevConfig": {
                  "n3000": {
                    "downlink": {
                      "bandwidth": 3,
                      "loadBalance": 128,
                      "queues": {
                        "vf0": 16,
                        "vf1": 16,
                        "vf2": 0,
                        "vf3": 0,
                        "vf4": 0,
                        "vf5": 0,
                        "vf6": 0,
                        "vf7": 0
                      }
                    },
                    "flrTimeout": 610,
                    "networkType": "FPGA_5GNR",
                    "pfMode": true,
                    "uplink": {
                      "bandwidth": 3,
                      "loadBalance": 128,
                      "queues": {
                        "vf0": 16,
                        "vf1": 16,
                        "vf2": 0,
                        "vf3": 0,
                        "vf4": 0,
                        "vf5": 0,
                        "vf6": 0,
                        "vf7": 0
                      }
                    }
                  }
                },
                "pci_addr": "somePciAddress",
                "pf_driver": "pci-pf-stub",
                "vf_amount": 2,
                "vf_driver": "vfio-pci"
              }
            ]
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/sriov-fec-operator-bundle@sha256:03fd238d727606de452090fc2cdda4ca77b0912366e36aa38bcd78c2c0d546e8",
      "bundle_path_digest": "sha256:03fd238d727606de452090fc2cdda4ca77b0912366e36aa38bcd78c2c0d546e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-02T13:21:21.372000+00:00",
      "csv_description": "The vRAN Dedicated Accelerator ACC100, based on Intel eASIC technology is designed to offload and accelerate the computing-intensive process of forward error correction (FEC) for 4G/LTE and 5G technology, freeing up processing power. Intel eASIC devices are structured ASICs, an intermediate technology between FPGAs and standard application-specific integrated circuits (ASICs). It allows the optimization of data plane performance to reduce total cost of ownership while maintaining a high degree of flexibility.  The Intel ACC100 plays a key role in accelerating 5G and network functions virtualization (NFV) adoption for ecosystem partners such as telecommunications equipment manufacturers (TEMs) virtual network functions (VNF) vendors, system integrators and telcos, to bring scalable and high-performance solutions to market. The Intel ACC100 includes a variant that is design to be Network Equipment Building System (NEBS)-friendly, and features a Root-of-Trust device that helps protect systems from FPGA host security exploits. This document explains how the ACC100 resource can be used on the Smart Edge Open (SEO) platform for accelerating network functions and edge application workloads. We use LTE/5G Forward Error Correction (FEC) as an example workload that accelerates the 5G or 4G L1 base station network function. The same concept and mechanism is applicable for application acceleration workloads like AI and ML on eASIC for Inference applications. The ACC100 supports the O-RAN adopted DPDK BBDev API - an API which Intel contributed to the opensource community to enable choice and TTM for FEC acceleration solutions. The FlexRAN software reference architecture supports the ACC100 which enables users to quickly evaluate and build platforms for the wide range of vRAN networks. Reduces platform power, E2E latency and Intel\u00ae CPU core count requirements as well as increases cell capacity than existing programmable accelerator. Accelerates both 4G and 5G data concurrently.\tLowers development cost using commercial off the shelf (COTS) servers. Accommodates space-constrained implementations via a low-profile PCIe card form factor. Enables a variety of flexible FlexRAN deployments from small cell to macro to Massive MIMO networks. Supports extended temperature for the most challenging of RAN deployment scenario\u2019s.",
      "csv_display_name": "SEO SR-IOV Operator for Wireless FEC Accelerators",
      "csv_metadata_description": "An operator for Intel Wireless FEC Accelerator to orchestrate and manage the resources/devices exposed by a range of Intel's vRAN FEC acceleration devices/hardware within the OpenShift cluster.",
      "csv_name": "sriov-fec.v2.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-28T08:41:53.494000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "sriov-fec",
      "provided_apis": [
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecClusterConfig",
          "version": "v1"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecClusterConfig",
          "version": "v2"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecNodeConfig",
          "version": "v1"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecNodeConfig",
          "version": "v2"
        }
      ],
      "provider": "Intel Corporation",
      "related_images": [
        {
          "digest": "sha256:d87dfc05f054c856549ea7722d9e6c7299b8ce87fbf659a6904c9fbf5a8f2841",
          "image": "registry.connect.redhat.com/intel/sriov-fec-daemon@sha256:d87dfc05f054c856549ea7722d9e6c7299b8ce87fbf659a6904c9fbf5a8f2841",
          "name": "sriov-fec-daemon"
        },
        {
          "digest": "sha256:5055121216aa2e2a8240d1a1a30850077e77c4828d94e1bd02045d640faf1f1d",
          "image": "registry.connect.redhat.com/intel/n3000-labeler@sha256:5055121216aa2e2a8240d1a1a30850077e77c4828d94e1bd02045d640faf1f1d",
          "name": "sriov-fec-labeler"
        },
        {
          "digest": "sha256:5ad615f1256d1d23b159a5a331a31103692dd0293b6f128b9095d0b34c0f6586",
          "image": "registry.redhat.io/openshift4/ose-sriov-network-device-plugin@sha256:5ad615f1256d1d23b159a5a331a31103692dd0293b6f128b9095d0b34c0f6586",
          "name": "sriov-network-device-plugin"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "sriov-fec-operator"
        },
        {
          "digest": "sha256:86e5fa1fa294987114be200890c2e516501e424aee0fb98ece25c95e7716295b",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:86e5fa1fa294987114be200890c2e516501e424aee0fb98ece25c95e7716295b",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "sriov-fec-operator-558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b-annotation"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "2.4.0",
      "version_original": "2.4.0"
    },
    {
      "_id": "631203548e834c98476e1940",
      "alm_examples": [
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecClusterConfig",
          "metadata": {
            "name": "acc100SampleConfig",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "acceleratorSelector": {
              "deviceID": "someDevice",
              "driver": "someDriver",
              "maxVirtualFunctions": 2,
              "pciAddress": "somePciAddress",
              "vendorID": "someVendor"
            },
            "drainSkip": false,
            "nodeSelector": {
              "expectedLabel1": "valueOfExpectedLabel1",
              "expectedLabelN": "valueOfExpectedLabelN"
            },
            "physicalFunction": {
              "bbDevConfig": {
                "acc100": {
                  "downlink4G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 0
                  },
                  "downlink5G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 4
                  },
                  "maxQueueSize": 1024,
                  "numVfBundles": 16,
                  "pfMode": true,
                  "uplink4G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 0
                  },
                  "uplink5G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 4
                  }
                }
              },
              "pfDriver": "pci-pf-stub",
              "vfAmount": 2,
              "vfDriver": "vfio-pci"
            },
            "priority": 100
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecClusterConfig",
          "metadata": {
            "name": "n3000SampleConfig",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "acceleratorSelector": {
              "deviceID": "someDevice",
              "driver": "someDriver",
              "maxVirtualFunctions": 2,
              "pciAddress": "somePciAddress",
              "vendorID": "someVendor"
            },
            "drainSkip": false,
            "nodeSelector": {
              "expectedLabel1": "valueOfExpectedLabel1",
              "expectedLabelN": "valueOfExpectedLabelN"
            },
            "physicalFunction": {
              "bbDevConfig": {
                "n3000": {
                  "downlink": {
                    "bandwidth": 3,
                    "loadBalance": 128,
                    "queues": {
                      "vf0": 16,
                      "vf1": 16,
                      "vf2": 0,
                      "vf3": 0,
                      "vf4": 0,
                      "vf5": 0,
                      "vf6": 0,
                      "vf7": 0
                    }
                  },
                  "flrTimeout": 610,
                  "networkType": "FPGA_5GNR",
                  "pfMode": true,
                  "uplink": {
                    "bandwidth": 3,
                    "loadBalance": 128,
                    "queues": {
                      "vf0": 16,
                      "vf1": 16,
                      "vf2": 0,
                      "vf3": 0,
                      "vf4": 0,
                      "vf5": 0,
                      "vf6": 0,
                      "vf7": 0
                    }
                  }
                }
              },
              "pfDriver": "pci-pf-stub",
              "vfAmount": 2,
              "vfDriver": "vfio-pci"
            },
            "priority": 100
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecNodeConfig",
          "metadata": {
            "name": "acc100-worker",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "drainSkip": false,
            "physicalFunctions": [
              {
                "bbDevConfig": {
                  "acc100": {
                    "downlink4G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 0
                    },
                    "downlink5G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 4
                    },
                    "maxQueueSize": 1024,
                    "numVfBundles": 16,
                    "pfMode": true,
                    "uplink4G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 0
                    },
                    "uplink5G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 4
                    }
                  }
                },
                "pci_addr": "somePciAddress",
                "pf_driver": "pci-pf-stub",
                "vf_amount": 2,
                "vf_driver": "vfio-pci"
              }
            ]
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecNodeConfig",
          "metadata": {
            "name": "n3000-worker",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "drainSkip": false,
            "physicalFunctions": [
              {
                "bbDevConfig": {
                  "n3000": {
                    "downlink": {
                      "bandwidth": 3,
                      "loadBalance": 128,
                      "queues": {
                        "vf0": 16,
                        "vf1": 16,
                        "vf2": 0,
                        "vf3": 0,
                        "vf4": 0,
                        "vf5": 0,
                        "vf6": 0,
                        "vf7": 0
                      }
                    },
                    "flrTimeout": 610,
                    "networkType": "FPGA_5GNR",
                    "pfMode": true,
                    "uplink": {
                      "bandwidth": 3,
                      "loadBalance": 128,
                      "queues": {
                        "vf0": 16,
                        "vf1": 16,
                        "vf2": 0,
                        "vf3": 0,
                        "vf4": 0,
                        "vf5": 0,
                        "vf6": 0,
                        "vf7": 0
                      }
                    }
                  }
                },
                "pci_addr": "somePciAddress",
                "pf_driver": "pci-pf-stub",
                "vf_amount": 2,
                "vf_driver": "vfio-pci"
              }
            ]
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/sriov-fec-operator-bundle@sha256:03fd238d727606de452090fc2cdda4ca77b0912366e36aa38bcd78c2c0d546e8",
      "bundle_path_digest": "sha256:03fd238d727606de452090fc2cdda4ca77b0912366e36aa38bcd78c2c0d546e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-02T13:21:24.114000+00:00",
      "csv_description": "The vRAN Dedicated Accelerator ACC100, based on Intel eASIC technology is designed to offload and accelerate the computing-intensive process of forward error correction (FEC) for 4G/LTE and 5G technology, freeing up processing power. Intel eASIC devices are structured ASICs, an intermediate technology between FPGAs and standard application-specific integrated circuits (ASICs). It allows the optimization of data plane performance to reduce total cost of ownership while maintaining a high degree of flexibility.  The Intel ACC100 plays a key role in accelerating 5G and network functions virtualization (NFV) adoption for ecosystem partners such as telecommunications equipment manufacturers (TEMs) virtual network functions (VNF) vendors, system integrators and telcos, to bring scalable and high-performance solutions to market. The Intel ACC100 includes a variant that is design to be Network Equipment Building System (NEBS)-friendly, and features a Root-of-Trust device that helps protect systems from FPGA host security exploits. This document explains how the ACC100 resource can be used on the Smart Edge Open (SEO) platform for accelerating network functions and edge application workloads. We use LTE/5G Forward Error Correction (FEC) as an example workload that accelerates the 5G or 4G L1 base station network function. The same concept and mechanism is applicable for application acceleration workloads like AI and ML on eASIC for Inference applications. The ACC100 supports the O-RAN adopted DPDK BBDev API - an API which Intel contributed to the opensource community to enable choice and TTM for FEC acceleration solutions. The FlexRAN software reference architecture supports the ACC100 which enables users to quickly evaluate and build platforms for the wide range of vRAN networks. Reduces platform power, E2E latency and Intel\u00ae CPU core count requirements as well as increases cell capacity than existing programmable accelerator. Accelerates both 4G and 5G data concurrently.\tLowers development cost using commercial off the shelf (COTS) servers. Accommodates space-constrained implementations via a low-profile PCIe card form factor. Enables a variety of flexible FlexRAN deployments from small cell to macro to Massive MIMO networks. Supports extended temperature for the most challenging of RAN deployment scenario\u2019s.",
      "csv_display_name": "SEO SR-IOV Operator for Wireless FEC Accelerators",
      "csv_metadata_description": "An operator for Intel Wireless FEC Accelerator to orchestrate and manage the resources/devices exposed by a range of Intel's vRAN FEC acceleration devices/hardware within the OpenShift cluster.",
      "csv_name": "sriov-fec.v2.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-28T08:41:34.985000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "sriov-fec",
      "provided_apis": [
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecNodeConfig",
          "plural": "sriovfecnodeconfigs",
          "version": "v1"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecNodeConfig",
          "plural": "sriovfecnodeconfigs",
          "version": "v2"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecClusterConfig",
          "plural": "sriovfecclusterconfigs",
          "version": "v1"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecClusterConfig",
          "plural": "sriovfecclusterconfigs",
          "version": "v2"
        }
      ],
      "provider": "Intel Corporation",
      "related_images": [
        {
          "digest": "sha256:d87dfc05f054c856549ea7722d9e6c7299b8ce87fbf659a6904c9fbf5a8f2841",
          "image": "registry.connect.redhat.com/intel/sriov-fec-daemon@sha256:d87dfc05f054c856549ea7722d9e6c7299b8ce87fbf659a6904c9fbf5a8f2841",
          "name": "sriov-fec-daemon"
        },
        {
          "digest": "sha256:5055121216aa2e2a8240d1a1a30850077e77c4828d94e1bd02045d640faf1f1d",
          "image": "registry.connect.redhat.com/intel/n3000-labeler@sha256:5055121216aa2e2a8240d1a1a30850077e77c4828d94e1bd02045d640faf1f1d",
          "name": "sriov-fec-labeler"
        },
        {
          "digest": "sha256:5ad615f1256d1d23b159a5a331a31103692dd0293b6f128b9095d0b34c0f6586",
          "image": "registry.redhat.io/openshift4/ose-sriov-network-device-plugin@sha256:5ad615f1256d1d23b159a5a331a31103692dd0293b6f128b9095d0b34c0f6586",
          "name": "sriov-network-device-plugin"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "sriov-fec-operator"
        },
        {
          "digest": "sha256:86e5fa1fa294987114be200890c2e516501e424aee0fb98ece25c95e7716295b",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:86e5fa1fa294987114be200890c2e516501e424aee0fb98ece25c95e7716295b",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "sriov-fec-operator-558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b-annotation"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.4.0",
      "version_original": "2.4.0"
    },
    {
      "_id": "631205f968e85dc50c8c5ff3",
      "alm_examples": [
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecClusterConfig",
          "metadata": {
            "name": "acc100SampleConfig",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "acceleratorSelector": {
              "deviceID": "someDevice",
              "driver": "someDriver",
              "maxVirtualFunctions": 2,
              "pciAddress": "somePciAddress",
              "vendorID": "someVendor"
            },
            "drainSkip": false,
            "nodeSelector": {
              "expectedLabel1": "valueOfExpectedLabel1",
              "expectedLabelN": "valueOfExpectedLabelN"
            },
            "physicalFunction": {
              "bbDevConfig": {
                "acc100": {
                  "downlink4G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 0
                  },
                  "downlink5G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 4
                  },
                  "maxQueueSize": 1024,
                  "numVfBundles": 16,
                  "pfMode": true,
                  "uplink4G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 0
                  },
                  "uplink5G": {
                    "aqDepthLog2": 4,
                    "numAqsPerGroups": 16,
                    "numQueueGroups": 4
                  }
                }
              },
              "pfDriver": "pci-pf-stub",
              "vfAmount": 2,
              "vfDriver": "vfio-pci"
            },
            "priority": 100
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecClusterConfig",
          "metadata": {
            "name": "n3000SampleConfig",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "acceleratorSelector": {
              "deviceID": "someDevice",
              "driver": "someDriver",
              "maxVirtualFunctions": 2,
              "pciAddress": "somePciAddress",
              "vendorID": "someVendor"
            },
            "drainSkip": false,
            "nodeSelector": {
              "expectedLabel1": "valueOfExpectedLabel1",
              "expectedLabelN": "valueOfExpectedLabelN"
            },
            "physicalFunction": {
              "bbDevConfig": {
                "n3000": {
                  "downlink": {
                    "bandwidth": 3,
                    "loadBalance": 128,
                    "queues": {
                      "vf0": 16,
                      "vf1": 16,
                      "vf2": 0,
                      "vf3": 0,
                      "vf4": 0,
                      "vf5": 0,
                      "vf6": 0,
                      "vf7": 0
                    }
                  },
                  "flrTimeout": 610,
                  "networkType": "FPGA_5GNR",
                  "pfMode": true,
                  "uplink": {
                    "bandwidth": 3,
                    "loadBalance": 128,
                    "queues": {
                      "vf0": 16,
                      "vf1": 16,
                      "vf2": 0,
                      "vf3": 0,
                      "vf4": 0,
                      "vf5": 0,
                      "vf6": 0,
                      "vf7": 0
                    }
                  }
                }
              },
              "pfDriver": "pci-pf-stub",
              "vfAmount": 2,
              "vfDriver": "vfio-pci"
            },
            "priority": 100
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecNodeConfig",
          "metadata": {
            "name": "acc100-worker",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "drainSkip": false,
            "physicalFunctions": [
              {
                "bbDevConfig": {
                  "acc100": {
                    "downlink4G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 0
                    },
                    "downlink5G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 4
                    },
                    "maxQueueSize": 1024,
                    "numVfBundles": 16,
                    "pfMode": true,
                    "uplink4G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 0
                    },
                    "uplink5G": {
                      "aqDepthLog2": 4,
                      "numAqsPerGroups": 16,
                      "numQueueGroups": 4
                    }
                  }
                },
                "pci_addr": "somePciAddress",
                "pf_driver": "pci-pf-stub",
                "vf_amount": 2,
                "vf_driver": "vfio-pci"
              }
            ]
          }
        },
        {
          "api_version": "sriovfec.intel.com/v2",
          "kind": "SriovFecNodeConfig",
          "metadata": {
            "name": "n3000-worker",
            "namespace": "vran-acceleration-operators"
          },
          "spec": {
            "drainSkip": false,
            "physicalFunctions": [
              {
                "bbDevConfig": {
                  "n3000": {
                    "downlink": {
                      "bandwidth": 3,
                      "loadBalance": 128,
                      "queues": {
                        "vf0": 16,
                        "vf1": 16,
                        "vf2": 0,
                        "vf3": 0,
                        "vf4": 0,
                        "vf5": 0,
                        "vf6": 0,
                        "vf7": 0
                      }
                    },
                    "flrTimeout": 610,
                    "networkType": "FPGA_5GNR",
                    "pfMode": true,
                    "uplink": {
                      "bandwidth": 3,
                      "loadBalance": 128,
                      "queues": {
                        "vf0": 16,
                        "vf1": 16,
                        "vf2": 0,
                        "vf3": 0,
                        "vf4": 0,
                        "vf5": 0,
                        "vf6": 0,
                        "vf7": 0
                      }
                    }
                  }
                },
                "pci_addr": "somePciAddress",
                "pf_driver": "pci-pf-stub",
                "vf_amount": 2,
                "vf_driver": "vfio-pci"
              }
            ]
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/intel/sriov-fec-operator-bundle@sha256:03fd238d727606de452090fc2cdda4ca77b0912366e36aa38bcd78c2c0d546e8",
      "bundle_path_digest": "sha256:03fd238d727606de452090fc2cdda4ca77b0912366e36aa38bcd78c2c0d546e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-02T13:32:41.781000+00:00",
      "csv_description": "The vRAN Dedicated Accelerator ACC100, based on Intel eASIC technology is designed to offload and accelerate the computing-intensive process of forward error correction (FEC) for 4G/LTE and 5G technology, freeing up processing power. Intel eASIC devices are structured ASICs, an intermediate technology between FPGAs and standard application-specific integrated circuits (ASICs). It allows the optimization of data plane performance to reduce total cost of ownership while maintaining a high degree of flexibility.  The Intel ACC100 plays a key role in accelerating 5G and network functions virtualization (NFV) adoption for ecosystem partners such as telecommunications equipment manufacturers (TEMs) virtual network functions (VNF) vendors, system integrators and telcos, to bring scalable and high-performance solutions to market. The Intel ACC100 includes a variant that is design to be Network Equipment Building System (NEBS)-friendly, and features a Root-of-Trust device that helps protect systems from FPGA host security exploits. This document explains how the ACC100 resource can be used on the Smart Edge Open (SEO) platform for accelerating network functions and edge application workloads. We use LTE/5G Forward Error Correction (FEC) as an example workload that accelerates the 5G or 4G L1 base station network function. The same concept and mechanism is applicable for application acceleration workloads like AI and ML on eASIC for Inference applications. The ACC100 supports the O-RAN adopted DPDK BBDev API - an API which Intel contributed to the opensource community to enable choice and TTM for FEC acceleration solutions. The FlexRAN software reference architecture supports the ACC100 which enables users to quickly evaluate and build platforms for the wide range of vRAN networks. Reduces platform power, E2E latency and Intel\u00ae CPU core count requirements as well as increases cell capacity than existing programmable accelerator. Accelerates both 4G and 5G data concurrently.\tLowers development cost using commercial off the shelf (COTS) servers. Accommodates space-constrained implementations via a low-profile PCIe card form factor. Enables a variety of flexible FlexRAN deployments from small cell to macro to Massive MIMO networks. Supports extended temperature for the most challenging of RAN deployment scenario\u2019s.",
      "csv_display_name": "SEO SR-IOV Operator for Wireless FEC Accelerators",
      "csv_metadata_description": "An operator for Intel Wireless FEC Accelerator to orchestrate and manage the resources/devices exposed by a range of Intel's vRAN FEC acceleration devices/hardware within the OpenShift cluster.",
      "csv_name": "sriov-fec.v2.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-28T08:45:12.508000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "sriov-fec",
      "provided_apis": [
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecNodeConfig",
          "plural": "sriovfecnodeconfigs",
          "version": "v2"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecClusterConfig",
          "plural": "sriovfecclusterconfigs",
          "version": "v1"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecClusterConfig",
          "plural": "sriovfecclusterconfigs",
          "version": "v2"
        },
        {
          "group": "sriovfec.intel.com",
          "kind": "SriovFecNodeConfig",
          "plural": "sriovfecnodeconfigs",
          "version": "v1"
        }
      ],
      "provider": "Intel Corporation",
      "related_images": [
        {
          "digest": "sha256:d87dfc05f054c856549ea7722d9e6c7299b8ce87fbf659a6904c9fbf5a8f2841",
          "image": "registry.connect.redhat.com/intel/sriov-fec-daemon@sha256:d87dfc05f054c856549ea7722d9e6c7299b8ce87fbf659a6904c9fbf5a8f2841",
          "name": "sriov-fec-daemon"
        },
        {
          "digest": "sha256:5055121216aa2e2a8240d1a1a30850077e77c4828d94e1bd02045d640faf1f1d",
          "image": "registry.connect.redhat.com/intel/n3000-labeler@sha256:5055121216aa2e2a8240d1a1a30850077e77c4828d94e1bd02045d640faf1f1d",
          "name": "sriov-fec-labeler"
        },
        {
          "digest": "sha256:5ad615f1256d1d23b159a5a331a31103692dd0293b6f128b9095d0b34c0f6586",
          "image": "registry.redhat.io/openshift4/ose-sriov-network-device-plugin@sha256:5ad615f1256d1d23b159a5a331a31103692dd0293b6f128b9095d0b34c0f6586",
          "name": "sriov-network-device-plugin"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "sriov-fec-operator"
        },
        {
          "digest": "sha256:86e5fa1fa294987114be200890c2e516501e424aee0fb98ece25c95e7716295b",
          "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:86e5fa1fa294987114be200890c2e516501e424aee0fb98ece25c95e7716295b",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "sriov-fec-operator-558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b-annotation"
        },
        {
          "digest": "sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "image": "registry.connect.redhat.com/intel/sriov-fec-operator@sha256:558b236c3938024280600939798a0aad84949fce4de758763b6ecbd57d00f48b",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "2.4.0",
      "version_original": "2.4.0"
    },
    {
      "_id": "6315f443524802b3f2ab69d2",
      "alm_examples": [
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Hazelcast",
          "metadata": {
            "name": "hazelcast"
          },
          "spec": {
            "clusterSize": 3,
            "licenseKeySecret": "hazelcast-license-key",
            "repository": "docker.io/hazelcast/hazelcast-enterprise",
            "version": "5.1.3"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "ManagementCenter",
          "metadata": {
            "name": "managementcenter"
          },
          "spec": {
            "externalConnectivity": {
              "type": "LoadBalancer"
            },
            "hazelcastClusters": [
              {
                "address": "hazelcast",
                "name": "dev"
              }
            ],
            "licenseKeySecret": "hazelcast-license-key",
            "persistence": {
              "enabled": true,
              "size": "10Gi"
            },
            "repository": "hazelcast/management-center",
            "version": "5.1.4"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Map",
          "metadata": {
            "name": "map"
          },
          "spec": {
            "hazelcastResourceName": "hazelcast"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "WanReplication",
          "metadata": {
            "name": "wanreplication-sample"
          },
          "spec": {
            "endpoints": "35.192.33.252",
            "mapResourceName": "map",
            "targetClusterName": "dev"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/hazelcast/hazelcast-platform-operator-bundle@sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "bundle_path_digest": "sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T13:06:11.429000+00:00",
      "csv_description": "# Hazelcast Platform Operator #\n\nEasily deploy Hazelcast clusters and Management Center into Kubernetes environments and manage their lifecycles.\n\n## Before You Start\n\nIf you are planning to create Hazelcast Platform Enterprise clusters, you need to [create a secret](https://docs.hazelcast.com/operator/latest/get-started#step-2-start-the-hazelcast-cluster) for the license. You can request a trial license key from [here](https://trialrequest.hazelcast.com).\n\nFor Hazelcast Platform clusters, you can simply continue.\n\n## Documentation\n\n1. [Get started](https://docs.hazelcast.com/operator/latest/get-started) with the Operator.\n2. [Connect to the cluster from outside Kubernetes](https://guides.hazelcast.org/hazelcast-platform-operator-expose-externally/main)\n  from the outside.\n\n## Features\n\nHazelcast Platform Operator supports the features below:\n\n* Custom resource for Hazelcast Platform (Open Source & Enterprise) and Management Center\n* Observe status of Hazelcast and Management Center clusters\n* Scale up and down Hazelcast clusters\n* Expose Hazelcast cluster to external\n  clients ([Smart & Unisocket](https://docs.hazelcast.com/hazelcast/latest/clients/java#java-client-operation-modes))\n",
      "csv_display_name": "Hazelcast Platform Operator",
      "csv_metadata_description": "Install Hazelcast clusters in Kubernetes environments.",
      "csv_name": "hazelcast-platform-operator.v5.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:01:28.108000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "hazelcast-platform-operator",
      "provided_apis": [
        {
          "group": "hazelcast.com",
          "kind": "Hazelcast",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "HotBackup",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "ManagementCenter",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Map",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "WanReplication",
          "version": "v1alpha1"
        }
      ],
      "provider": "Hazelcast, Inc",
      "related_images": [
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "hazelcast-platform-operator-d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab-annotation"
        },
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "5.4.0",
      "version_original": "5.4.0"
    },
    {
      "_id": "6315f45c524802b3f2ab69de",
      "alm_examples": [
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Hazelcast",
          "metadata": {
            "name": "hazelcast"
          },
          "spec": {
            "clusterSize": 3,
            "licenseKeySecret": "hazelcast-license-key",
            "repository": "docker.io/hazelcast/hazelcast-enterprise",
            "version": "5.1.3"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "ManagementCenter",
          "metadata": {
            "name": "managementcenter"
          },
          "spec": {
            "externalConnectivity": {
              "type": "LoadBalancer"
            },
            "hazelcastClusters": [
              {
                "address": "hazelcast",
                "name": "dev"
              }
            ],
            "licenseKeySecret": "hazelcast-license-key",
            "persistence": {
              "enabled": true,
              "size": "10Gi"
            },
            "repository": "hazelcast/management-center",
            "version": "5.1.4"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Map",
          "metadata": {
            "name": "map"
          },
          "spec": {
            "hazelcastResourceName": "hazelcast"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "WanReplication",
          "metadata": {
            "name": "wanreplication-sample"
          },
          "spec": {
            "endpoints": "35.192.33.252",
            "mapResourceName": "map",
            "targetClusterName": "dev"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/hazelcast/hazelcast-platform-operator-bundle@sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "bundle_path_digest": "sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T13:06:36.952000+00:00",
      "csv_description": "# Hazelcast Platform Operator #\n\nEasily deploy Hazelcast clusters and Management Center into Kubernetes environments and manage their lifecycles.\n\n## Before You Start\n\nIf you are planning to create Hazelcast Platform Enterprise clusters, you need to [create a secret](https://docs.hazelcast.com/operator/latest/get-started#step-2-start-the-hazelcast-cluster) for the license. You can request a trial license key from [here](https://trialrequest.hazelcast.com).\n\nFor Hazelcast Platform clusters, you can simply continue.\n\n## Documentation\n\n1. [Get started](https://docs.hazelcast.com/operator/latest/get-started) with the Operator.\n2. [Connect to the cluster from outside Kubernetes](https://guides.hazelcast.org/hazelcast-platform-operator-expose-externally/main)\n  from the outside.\n\n## Features\n\nHazelcast Platform Operator supports the features below:\n\n* Custom resource for Hazelcast Platform (Open Source & Enterprise) and Management Center\n* Observe status of Hazelcast and Management Center clusters\n* Scale up and down Hazelcast clusters\n* Expose Hazelcast cluster to external\n  clients ([Smart & Unisocket](https://docs.hazelcast.com/hazelcast/latest/clients/java#java-client-operation-modes))\n",
      "csv_display_name": "Hazelcast Platform Operator",
      "csv_metadata_description": "Install Hazelcast clusters in Kubernetes environments.",
      "csv_name": "hazelcast-platform-operator.v5.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:46:54.358000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "hazelcast-platform-operator",
      "provided_apis": [
        {
          "group": "hazelcast.com",
          "kind": "ManagementCenter",
          "plural": "managementcenters",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Map",
          "plural": "maps",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "WanReplication",
          "plural": "wanreplications",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Hazelcast",
          "plural": "hazelcasts",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "HotBackup",
          "plural": "hotbackups",
          "version": "v1alpha1"
        }
      ],
      "provider": "Hazelcast, Inc",
      "related_images": [
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "hazelcast-platform-operator-d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab-annotation"
        },
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "5.4.0",
      "version_original": "5.4.0"
    },
    {
      "_id": "6315f472853ce3bf2c584606",
      "alm_examples": [
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Hazelcast",
          "metadata": {
            "name": "hazelcast"
          },
          "spec": {
            "clusterSize": 3,
            "licenseKeySecret": "hazelcast-license-key",
            "repository": "docker.io/hazelcast/hazelcast-enterprise",
            "version": "5.1.3"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "ManagementCenter",
          "metadata": {
            "name": "managementcenter"
          },
          "spec": {
            "externalConnectivity": {
              "type": "LoadBalancer"
            },
            "hazelcastClusters": [
              {
                "address": "hazelcast",
                "name": "dev"
              }
            ],
            "licenseKeySecret": "hazelcast-license-key",
            "persistence": {
              "enabled": true,
              "size": "10Gi"
            },
            "repository": "hazelcast/management-center",
            "version": "5.1.4"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Map",
          "metadata": {
            "name": "map"
          },
          "spec": {
            "hazelcastResourceName": "hazelcast"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "WanReplication",
          "metadata": {
            "name": "wanreplication-sample"
          },
          "spec": {
            "endpoints": "35.192.33.252",
            "mapResourceName": "map",
            "targetClusterName": "dev"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/hazelcast/hazelcast-platform-operator-bundle@sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "bundle_path_digest": "sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T13:06:58.348000+00:00",
      "csv_description": "# Hazelcast Platform Operator #\n\nEasily deploy Hazelcast clusters and Management Center into Kubernetes environments and manage their lifecycles.\n\n## Before You Start\n\nIf you are planning to create Hazelcast Platform Enterprise clusters, you need to [create a secret](https://docs.hazelcast.com/operator/latest/get-started#step-2-start-the-hazelcast-cluster) for the license. You can request a trial license key from [here](https://trialrequest.hazelcast.com).\n\nFor Hazelcast Platform clusters, you can simply continue.\n\n## Documentation\n\n1. [Get started](https://docs.hazelcast.com/operator/latest/get-started) with the Operator.\n2. [Connect to the cluster from outside Kubernetes](https://guides.hazelcast.org/hazelcast-platform-operator-expose-externally/main)\n  from the outside.\n\n## Features\n\nHazelcast Platform Operator supports the features below:\n\n* Custom resource for Hazelcast Platform (Open Source & Enterprise) and Management Center\n* Observe status of Hazelcast and Management Center clusters\n* Scale up and down Hazelcast clusters\n* Expose Hazelcast cluster to external\n  clients ([Smart & Unisocket](https://docs.hazelcast.com/hazelcast/latest/clients/java#java-client-operation-modes))\n",
      "csv_display_name": "Hazelcast Platform Operator",
      "csv_metadata_description": "Install Hazelcast clusters in Kubernetes environments.",
      "csv_name": "hazelcast-platform-operator.v5.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:51:38.336000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "hazelcast-platform-operator",
      "provided_apis": [
        {
          "group": "hazelcast.com",
          "kind": "ManagementCenter",
          "plural": "managementcenters",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Map",
          "plural": "maps",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "WanReplication",
          "plural": "wanreplications",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Hazelcast",
          "plural": "hazelcasts",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "HotBackup",
          "plural": "hotbackups",
          "version": "v1alpha1"
        }
      ],
      "provider": "Hazelcast, Inc",
      "related_images": [
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "hazelcast-platform-operator-d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab-annotation"
        },
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "5.4.0",
      "version_original": "5.4.0"
    },
    {
      "_id": "6315f4f7c95cf95f4f6e1cbe",
      "alm_examples": [
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Hazelcast",
          "metadata": {
            "name": "hazelcast"
          },
          "spec": {
            "clusterSize": 3,
            "licenseKeySecret": "hazelcast-license-key",
            "repository": "docker.io/hazelcast/hazelcast-enterprise",
            "version": "5.1.3"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "ManagementCenter",
          "metadata": {
            "name": "managementcenter"
          },
          "spec": {
            "externalConnectivity": {
              "type": "LoadBalancer"
            },
            "hazelcastClusters": [
              {
                "address": "hazelcast",
                "name": "dev"
              }
            ],
            "licenseKeySecret": "hazelcast-license-key",
            "persistence": {
              "enabled": true,
              "size": "10Gi"
            },
            "repository": "hazelcast/management-center",
            "version": "5.1.4"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Map",
          "metadata": {
            "name": "map"
          },
          "spec": {
            "hazelcastResourceName": "hazelcast"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "WanReplication",
          "metadata": {
            "name": "wanreplication-sample"
          },
          "spec": {
            "endpoints": "35.192.33.252",
            "mapResourceName": "map",
            "targetClusterName": "dev"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/hazelcast/hazelcast-platform-operator-bundle@sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "bundle_path_digest": "sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T13:09:11.025000+00:00",
      "csv_description": "# Hazelcast Platform Operator #\n\nEasily deploy Hazelcast clusters and Management Center into Kubernetes environments and manage their lifecycles.\n\n## Before You Start\n\nIf you are planning to create Hazelcast Platform Enterprise clusters, you need to [create a secret](https://docs.hazelcast.com/operator/latest/get-started#step-2-start-the-hazelcast-cluster) for the license. You can request a trial license key from [here](https://trialrequest.hazelcast.com).\n\nFor Hazelcast Platform clusters, you can simply continue.\n\n## Documentation\n\n1. [Get started](https://docs.hazelcast.com/operator/latest/get-started) with the Operator.\n2. [Connect to the cluster from outside Kubernetes](https://guides.hazelcast.org/hazelcast-platform-operator-expose-externally/main)\n  from the outside.\n\n## Features\n\nHazelcast Platform Operator supports the features below:\n\n* Custom resource for Hazelcast Platform (Open Source & Enterprise) and Management Center\n* Observe status of Hazelcast and Management Center clusters\n* Scale up and down Hazelcast clusters\n* Expose Hazelcast cluster to external\n  clients ([Smart & Unisocket](https://docs.hazelcast.com/hazelcast/latest/clients/java#java-client-operation-modes))\n",
      "csv_display_name": "Hazelcast Platform Operator",
      "csv_metadata_description": "Install Hazelcast clusters in Kubernetes environments.",
      "csv_name": "hazelcast-platform-operator.v5.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:00:31.751000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "hazelcast-platform-operator",
      "provided_apis": [
        {
          "group": "hazelcast.com",
          "kind": "Map",
          "plural": "maps",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "WanReplication",
          "plural": "wanreplications",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Hazelcast",
          "plural": "hazelcasts",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "HotBackup",
          "plural": "hotbackups",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "ManagementCenter",
          "plural": "managementcenters",
          "version": "v1alpha1"
        }
      ],
      "provider": "Hazelcast, Inc",
      "related_images": [
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "hazelcast-platform-operator-d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab-annotation"
        },
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "5.4.0",
      "version_original": "5.4.0"
    },
    {
      "_id": "6315f51fd6e3d9c9311b8320",
      "alm_examples": [
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Hazelcast",
          "metadata": {
            "name": "hazelcast"
          },
          "spec": {
            "clusterSize": 3,
            "licenseKeySecret": "hazelcast-license-key",
            "repository": "docker.io/hazelcast/hazelcast-enterprise",
            "version": "5.1.3"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "ManagementCenter",
          "metadata": {
            "name": "managementcenter"
          },
          "spec": {
            "externalConnectivity": {
              "type": "LoadBalancer"
            },
            "hazelcastClusters": [
              {
                "address": "hazelcast",
                "name": "dev"
              }
            ],
            "licenseKeySecret": "hazelcast-license-key",
            "persistence": {
              "enabled": true,
              "size": "10Gi"
            },
            "repository": "hazelcast/management-center",
            "version": "5.1.4"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Map",
          "metadata": {
            "name": "map"
          },
          "spec": {
            "hazelcastResourceName": "hazelcast"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "WanReplication",
          "metadata": {
            "name": "wanreplication-sample"
          },
          "spec": {
            "endpoints": "35.192.33.252",
            "mapResourceName": "map",
            "targetClusterName": "dev"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/hazelcast/hazelcast-platform-operator-bundle@sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "bundle_path_digest": "sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T13:09:51.615000+00:00",
      "csv_description": "# Hazelcast Platform Operator #\n\nEasily deploy Hazelcast clusters and Management Center into Kubernetes environments and manage their lifecycles.\n\n## Before You Start\n\nIf you are planning to create Hazelcast Platform Enterprise clusters, you need to [create a secret](https://docs.hazelcast.com/operator/latest/get-started#step-2-start-the-hazelcast-cluster) for the license. You can request a trial license key from [here](https://trialrequest.hazelcast.com).\n\nFor Hazelcast Platform clusters, you can simply continue.\n\n## Documentation\n\n1. [Get started](https://docs.hazelcast.com/operator/latest/get-started) with the Operator.\n2. [Connect to the cluster from outside Kubernetes](https://guides.hazelcast.org/hazelcast-platform-operator-expose-externally/main)\n  from the outside.\n\n## Features\n\nHazelcast Platform Operator supports the features below:\n\n* Custom resource for Hazelcast Platform (Open Source & Enterprise) and Management Center\n* Observe status of Hazelcast and Management Center clusters\n* Scale up and down Hazelcast clusters\n* Expose Hazelcast cluster to external\n  clients ([Smart & Unisocket](https://docs.hazelcast.com/hazelcast/latest/clients/java#java-client-operation-modes))\n",
      "csv_display_name": "Hazelcast Platform Operator",
      "csv_metadata_description": "Install Hazelcast clusters in Kubernetes environments.",
      "csv_name": "hazelcast-platform-operator.v5.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:45:27.247000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "hazelcast-platform-operator",
      "provided_apis": [
        {
          "group": "hazelcast.com",
          "kind": "Hazelcast",
          "plural": "hazelcasts",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "HotBackup",
          "plural": "hotbackups",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "ManagementCenter",
          "plural": "managementcenters",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Map",
          "plural": "maps",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "WanReplication",
          "plural": "wanreplications",
          "version": "v1alpha1"
        }
      ],
      "provider": "Hazelcast, Inc",
      "related_images": [
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "hazelcast-platform-operator-d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab-annotation"
        },
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "5.4.0",
      "version_original": "5.4.0"
    },
    {
      "_id": "6315f87c49acca0475ab63c2",
      "alm_examples": [
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Hazelcast",
          "metadata": {
            "name": "hazelcast"
          },
          "spec": {
            "clusterSize": 3,
            "licenseKeySecret": "hazelcast-license-key",
            "repository": "docker.io/hazelcast/hazelcast-enterprise",
            "version": "5.1.3"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "ManagementCenter",
          "metadata": {
            "name": "managementcenter"
          },
          "spec": {
            "externalConnectivity": {
              "type": "LoadBalancer"
            },
            "hazelcastClusters": [
              {
                "address": "hazelcast",
                "name": "dev"
              }
            ],
            "licenseKeySecret": "hazelcast-license-key",
            "persistence": {
              "enabled": true,
              "size": "10Gi"
            },
            "repository": "hazelcast/management-center",
            "version": "5.1.4"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "Map",
          "metadata": {
            "name": "map"
          },
          "spec": {
            "hazelcastResourceName": "hazelcast"
          }
        },
        {
          "api_version": "hazelcast.com/v1alpha1",
          "kind": "WanReplication",
          "metadata": {
            "name": "wanreplication-sample"
          },
          "spec": {
            "endpoints": "35.192.33.252",
            "mapResourceName": "map",
            "targetClusterName": "dev"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/hazelcast/hazelcast-platform-operator-bundle@sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "bundle_path_digest": "sha256:6ab4ad6ebaa8efb8ef54c218483e521c76029bfbaa213f50b567714749387276",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T13:24:12.904000+00:00",
      "csv_description": "# Hazelcast Platform Operator #\n\nEasily deploy Hazelcast clusters and Management Center into Kubernetes environments and manage their lifecycles.\n\n## Before You Start\n\nIf you are planning to create Hazelcast Platform Enterprise clusters, you need to [create a secret](https://docs.hazelcast.com/operator/latest/get-started#step-2-start-the-hazelcast-cluster) for the license. You can request a trial license key from [here](https://trialrequest.hazelcast.com).\n\nFor Hazelcast Platform clusters, you can simply continue.\n\n## Documentation\n\n1. [Get started](https://docs.hazelcast.com/operator/latest/get-started) with the Operator.\n2. [Connect to the cluster from outside Kubernetes](https://guides.hazelcast.org/hazelcast-platform-operator-expose-externally/main)\n  from the outside.\n\n## Features\n\nHazelcast Platform Operator supports the features below:\n\n* Custom resource for Hazelcast Platform (Open Source & Enterprise) and Management Center\n* Observe status of Hazelcast and Management Center clusters\n* Scale up and down Hazelcast clusters\n* Expose Hazelcast cluster to external\n  clients ([Smart & Unisocket](https://docs.hazelcast.com/hazelcast/latest/clients/java#java-client-operation-modes))\n",
      "csv_display_name": "Hazelcast Platform Operator",
      "csv_metadata_description": "Install Hazelcast clusters in Kubernetes environments.",
      "csv_name": "hazelcast-platform-operator.v5.4.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:34:44.908000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "hazelcast-platform-operator",
      "provided_apis": [
        {
          "group": "hazelcast.com",
          "kind": "Map",
          "plural": "maps",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "WanReplication",
          "plural": "wanreplications",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "Hazelcast",
          "plural": "hazelcasts",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "HotBackup",
          "plural": "hotbackups",
          "version": "v1alpha1"
        },
        {
          "group": "hazelcast.com",
          "kind": "ManagementCenter",
          "plural": "managementcenters",
          "version": "v1alpha1"
        }
      ],
      "provider": "Hazelcast, Inc",
      "related_images": [
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "hazelcast-platform-operator-d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab-annotation"
        },
        {
          "digest": "sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "image": "docker.io/hazelcast/hazelcast-platform-operator@sha256:d5fc92ee6696badafd6a283e2c0c83c2d7bfa7e3ce7fbf49a3b4b049c0e94bab",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "5.4.0",
      "version_original": "5.4.0"
    },
    {
      "_id": "6316360b4277364c90d21d44",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T17:46:51.788000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:00:55.061000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "plural": "stsconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "plural": "stsnodes",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "plural": "stsoperatorconfigs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "6316360f767c039d43f459eb",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-05T17:46:55.285000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:01:01.046000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "plural": "stsconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "plural": "stsnodes",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "plural": "stsoperatorconfigs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "631637ed33126725e4d66a8f",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T17:54:53.074000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:11:19.442000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "631637ee4277364c90d21e5c",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-05T17:54:54.902000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:11:43.094000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "6316382ddccc15d8c9fb8a7d",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T17:55:57.133000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:07:59.684000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "plural": "stsoperatorconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "plural": "stsconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "plural": "stsnodes",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "6316382f81141a81da637865",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-05T17:55:59.830000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:08:06.576000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "plural": "stsoperatorconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "plural": "stsconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "plural": "stsnodes",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "631638a33b21dbfeaa38a8af",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-05T17:57:55.243000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:18:04.784000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "plural": "stsnodes",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "plural": "stsoperatorconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "plural": "stsconfigs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "631638a3767c039d43f45b1c",
      "alm_examples": [
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "gm-1",
            "namespace": "openshift-operators"
          },
          "spec": {
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "mode": "Master",
                "synce": 1
              }
            ],
            "mode": "T-GM.8275.1",
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "gm-1"
            }
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsConfig",
          "metadata": {
            "name": "bc-1"
          },
          "spec": {
            "aprLevel": 0,
            "domainNumber": 24,
            "esmcMode": 1,
            "forwardable": 0,
            "interfaces": [
              {
                "ethName": "enp2s0f0",
                "ethPort": 0,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Slave",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f1",
                "ethPort": 1,
                "holdoff": 500,
                "ipv4": 1,
                "ipv6": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              },
              {
                "ethName": "enp2s0f2",
                "ethPort": 2,
                "holdoff": 500,
                "ipv4": 1,
                "mode": "Master",
                "ql": 4,
                "qlEnable": 1,
                "synce": 1
              }
            ],
            "mode": "T-TBC.8275.1",
            "mode10MHz": 2,
            "modePPS": 2,
            "namespace": "openshift-operators",
            "nodeSelector": {
              "sts.silicom.com/config": "bc-1"
            },
            "phyLedsCtl": 0,
            "priority2": 128,
            "src10MHz": 1,
            "srcPPS": 1,
            "syncOption": 1,
            "synceCpu": 10,
            "synceRecClkPort": 0,
            "tracePtpMsg": -1,
            "twoStep": 0
          }
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsNode",
          "metadata": {
            "name": "worker2"
          },
          "spec": {}
        },
        {
          "api_version": "sts.silicom.com/v1alpha1",
          "kind": "StsOperatorConfig",
          "metadata": {
            "name": "sts-operator-config",
            "namespace": "openshift-operators"
          },
          "spec": {
            "images": {},
            "sro": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/silicomltd/silicom-sts-operator@sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "bundle_path_digest": "sha256:e3dcf731a1987e2bab073bbbd03fbfc83487019e1ac00352cb9870ba6315c4d1",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-05T17:57:55.910000+00:00",
      "csv_description": "Silicom STS line card for 4G and 5G NIC enable real-time data transmission\nwith high timing accuracy at the lowest cost to power 5G DRAN and CRAN edge\ndeployments.\n\n* Support 1588/PTP over IPv4 / IPV6, IEEE1588v2\n* Support SyncE /ITU-T G.8262\n* T-BC/T-TSC Boundary Clock and TSC Slave Clock /G.8273.2\n* T-GM Grand Master /G.8273.1 per G.8275.1 PTP Profile\n* PRTC Primary Reference Time Clock Class B/G.8272\n* T-TC Transparent Clock /G.8273.3\n* 1588 Software Stack and Servo Software in x86\n* [Silicom STS2 Card](https://www.silicom-usa.com/pr/server-adapters/networking-adapters/10-gigabit-ethernet-networking-adapters/p410g8ts81-timesync-server-adapter)\n\n### Prequisites:\n* [NFD Operator](https://operatorhub.io/operator/nfd-operator \"NFD operator needed for the discovery of STS cards\").\n* [SRO Operator](https://github.com/openshift/special-resource-operator)\n",
      "csv_display_name": "Silicom STS Operator",
      "csv_metadata_description": "This Operator is a Kubernetes custom controller whose goal\nis to serve the installation and lifecycle management of\nSilicom STS device plugins for Kubernetes.\n",
      "csv_name": "silicom-sts-operator.v0.0.9",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:25:24.148000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "silicom-sts-operator",
      "provided_apis": [
        {
          "group": "sts.silicom.com",
          "kind": "StsNode",
          "plural": "stsnodes",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsOperatorConfig",
          "plural": "stsoperatorconfigs",
          "version": "v1alpha1"
        },
        {
          "group": "sts.silicom.com",
          "kind": "StsConfig",
          "plural": "stsconfigs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Silicom Ltd.",
      "related_images": [
        {
          "digest": "sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "image": "quay.io/silicom/gpsd@sha256:b1c18257132644551cbc02d21eca2856c4c33b7fb55fef57d2c36f4845e5bf9d",
          "name": "gpsd"
        },
        {
          "digest": "sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "image": "quay.io/silicom/phc2sys@sha256:5646d7f861be705d33625e32b2a0608f8a294b7b6f63c818925775ba9a49d317",
          "name": "phc2sys"
        },
        {
          "digest": "sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "image": "quay.io/silicom/tsyncd@sha256:e4ef9aa7a005cb894c59f271bde14f4240b801b92f8f9151512131c6a11a0726",
          "name": "tsyncd"
        },
        {
          "digest": "sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "image": "quay.io/silicom/grpc-tsyncd@sha256:c703d059ae0788b87eb7594f9e1679bfe0733b4ef1daf59158673287accc4256",
          "name": "grpc-tsyncd"
        },
        {
          "digest": "sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "image": "quay.io/silicom/tsync_extts@sha256:d8245f3dc3bf67ec93f5db0fa95abe174df92c61f10ffcb247bea06dcf83ccfe",
          "name": "tsync_extts"
        },
        {
          "digest": "sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "image": "quay.io/silicom/sts-plugin@sha256:19fbe112eaa3ee3d807d3b36f3ef93a6b25e3dad9a390fda8df4971b71b07af6",
          "name": "sts-plugin"
        },
        {
          "digest": "sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "image": "quay.io/silicom/ice-driver-src@sha256:56fbe39ec7b1732959f1bdef7854376e3b8f6aa7a1ebd2dcdd84c738a2eb7604",
          "name": "ice-driver-src"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "sts-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "image": "quay.io/silicom/sts-operator@sha256:a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5",
          "name": "sts-operator-a79a5cf99f5238ee08c509efe0b6142197ef0b79a6b209c125d9f7b7235758e5-annotation"
        },
        {
          "digest": "sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "image": "quay.io/silicom/sts-operator@sha256:aac1f737d7e0d572fefa184c93c0029225d96fd66538afb77561471982a38d91",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.0.9",
      "version_original": "0.0.9"
    },
    {
      "_id": "6317ce49c3a9c550585b3785",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusRepo",
          "metadata": {
            "name": "example-nexusrepo"
          },
          "spec": {
            "config": {
              "enabled": false,
              "mountPath": "/sonatype-nexus-conf"
            },
            "deployment": {
              "annotations": {},
              "postStart": {},
              "preStart": {},
              "terminationGracePeriodSeconds": 120
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "ingress": {
              "annotations": {},
              "enabled": false,
              "path": "/",
              "tls": {
                "enabled": true,
                "secretName": "nexus-tls"
              }
            },
            "nexus": {
              "dockerPort": 5003,
              "env": [
                {
                  "name": "INSTALL4J_ADD_VM_PARAMS",
                  "value": "-Xms2703M -Xmx2703M -XX:MaxDirectMemorySize=2703M -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
                },
                {
                  "name": "NEXUS_SECURITY_RANDOMPASSWORD",
                  "value": "false"
                }
              ],
              "hostAliases": [],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "nexusPort": 8081,
              "podAnnotations": {},
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "resources": {},
              "securityContext": {},
              "service": {
                "type": "NodePort"
              }
            },
            "nexusProxyRoute": {
              "enabled": false
            },
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "enabled": true,
              "storageSize": "8Gi"
            },
            "replicaCount": 1,
            "route": {
              "enabled": false,
              "name": "docker",
              "portName": "docker"
            },
            "secret": {
              "enabled": false,
              "mountPath": "/etc/secret-volume",
              "readOnly": true
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "statefulset": {
              "enabled": false
            },
            "tolerations": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxrm-operator-bundle@sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "bundle_path_digest": "sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-06T22:48:41.984000+00:00",
      "csv_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.\nThe flow of open source and third-party components into and through an organization\ncreates a complex software supply chain.\nNexus Repository delivers speed, efficiency, and quality to the governance\nand management of all dependencies, libraries, and applications for your DevOps teams.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Improves reliability with repeatable, fast access to secure dependencies\n* **Developer Productivity**:\n  Streamline developer workflows by enabling the sharing of components and applications across teams\n* **Supply Chain Performance**:\n  Improve speed-to-market and reduced build times with release advanced staging and component tagging\n* **CI/CD Integrations**:\n  Increase DevOps scalability with integrations to the most popular build and deployment tools\n\nVersion control systems and package registries do not scale when managing proprietary,\nopen source, and third-party components.\nOrganizations need a central binary and build artifact repository to manage dependencies\nacross the entire software supply chain.\n\n## Limitations\n\nHigh Availability Clustering (HA-C) is not supported for Nexus Repository Pro for OpenShift.\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus Repository Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to that service for nexus.port (8081).\n\nBy default, the Nexus Repository starts up in OSS mode until a license is installed.\n\nThe Nexus Repository can be further configured via the NexusRepo custom resource definition:\n\n| Parameter                                   | Description                         | Default                                 |\n| ------------------------------------------  | ----------------------------------  | ----------------------------------------|\n| `statefulset.enabled`                       | Use statefulset instead of deployment | `false` |\n| `deploymentStrategy.type`                   | Deployment Strategy     |  `Recreate` |\n| `nexus.env`                                 | Nexus environment variables         | `See example.` |\n| `nexus.resources`                           | Nexus resource requests and limits  | `{}`                                    |\n| `nexus.dockerPort`                          | Port to access docker               | `5003`                                  |\n| `nexus.nexusPort`                           | Internal port for Nexus service     | `8081`                                  |\n| `nexus.service.type`                        | Service for Nexus                   |`NodePort`                                |\n| `nexus.service.clusterIp`                   | Specific cluster IP when service type is cluster IP. Use None for headless service |`nil`   |\n| `nexus.securityContext`                     | Security Context |\n| `nexus.labels`                              | Service labels                      | `{}`                                    |\n| `nexus.podAnnotations`                      | Pod Annotations                     | `{}`\n| `nexus.livenessProbe.initialDelaySeconds`   | LivenessProbe initial delay         | 30                                      |\n| `nexus.livenessProbe.periodSeconds`         | Seconds between polls               | 30                                      |\n| `nexus.livenessProbe.failureThreshold`      | Number of attempts before failure   | 6                                       |\n| `nexus.livenessProbe.timeoutSeconds`        | Time in seconds after liveness probe times out    | `nil`                     |\n| `nexus.livenessProbe.path`                  | Path for LivenessProbe              | /                                       |\n| `nexus.readinessProbe.initialDelaySeconds`  | ReadinessProbe initial delay        | 30                                      |\n| `nexus.readinessProbe.periodSeconds`        | Seconds between polls               | 30                                      |\n| `nexus.readinessProbe.failureThreshold`     | Number of attempts before failure   | 6                                       |\n| `nexus.readinessProbe.timeoutSeconds`       | Time in seconds after readiness probe times out    | `nil`                    |\n| `nexus.readinessProbe.path`                 | Path for ReadinessProbe             | /                                       |\n| `nexus.hostAliases`                         | Aliases for IPs in /etc/hosts       | []                                      |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `tolerations`                               | tolerations list                    | `[]`                                    |\n| `config.enabled`                            | Enable configmap                    | `false`                                 |\n| `config.mountPath`                          | Path to mount the config            | `/sonatype-nexus-conf`                  |\n| `config.data`                               | Configmap data                      | `nil`                                   |\n| `deployment.terminationGracePeriodSeconds`  | Time to allow for clean shutdown    | 120                                     |\n| `deployment.annotations`                    | Annotations to enhance deployment configuration  | `{}`                       |\n| `deployment.initContainers`                 | Init containers to run before main containers  | `nil`                        |\n| `deployment.postStart.command`              | Command to run after starting the nexus container  | `nil`                    |\n| `deployment.preStart.command`               | Command to run before starting the nexus container  | `nil`                   |\n| `deployment.additionalContainers`           | Add additional Container         | `nil`                                      |\n| `deployment.additionalVolumes`              | Add additional Volumes           | `nil`                                      |\n| `deployment.additionalVolumeMounts`         | Add additional Volume mounts     | `nil`                                      |\n| `secret.enabled`                            | Enable secret                    | `false`                                    |\n| `secret.mountPath`                          | Path to mount the secret         | `/etc/secret-volume`                       |\n| `secret.readOnly`                           | Secret readonly state            | `true`                                     |\n| `secret.data`                               | Secret data                      | `nil`                                      |\n| `service.enabled`                           | Enable additional service        | `nil`                                      |\n| `service.name`                              | Service name                     | `nil`                                      |\n| `service.portName`                          | Service port name                | `nil`                                      |\n| `service.labels`                            | Service labels                   | `nil`                                      |\n| `service.annotations`                       | Service annotations              | `nil`                                      |\n| `service.loadBalancerSourceRanges`          | Service LoadBalancer source IP whitelist | `nil`                              |\n| `service.targetPort`                        | Service port                     | `nil`                                      |\n| `service.port`                              | Port for exposing service        | `nil`                                      |\n| `route.enabled`         | Set to true to create route for additional service | `false` |\n| `route.name`            | Name of route                                      | `docker` |\n| `route.portName`        | Target port name of service                        | `docker` |\n| `route.labels`          | Labels to be added to route                        | `{}` |\n| `route.annotations`     | Annotations to be added to route                   | `{}` |\n| `route.path`            | Host name of Route e.g jenkins.example.com         | nil |",
      "csv_display_name": "Nexus Repository Operator",
      "csv_metadata_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.",
      "csv_name": "nxrm-operator-certified.v3.41.1-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:02:08.589000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "nxrm-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusRepo",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified-6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6-annotation"
        },
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus-repository-manager-af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<3.41.1-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "3.41.1-1",
      "version_original": "3.41.1-1"
    },
    {
      "_id": "6317cf0269c6696fbdd21c77",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusRepo",
          "metadata": {
            "name": "example-nexusrepo"
          },
          "spec": {
            "config": {
              "enabled": false,
              "mountPath": "/sonatype-nexus-conf"
            },
            "deployment": {
              "annotations": {},
              "postStart": {},
              "preStart": {},
              "terminationGracePeriodSeconds": 120
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "ingress": {
              "annotations": {},
              "enabled": false,
              "path": "/",
              "tls": {
                "enabled": true,
                "secretName": "nexus-tls"
              }
            },
            "nexus": {
              "dockerPort": 5003,
              "env": [
                {
                  "name": "INSTALL4J_ADD_VM_PARAMS",
                  "value": "-Xms2703M -Xmx2703M -XX:MaxDirectMemorySize=2703M -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
                },
                {
                  "name": "NEXUS_SECURITY_RANDOMPASSWORD",
                  "value": "false"
                }
              ],
              "hostAliases": [],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "nexusPort": 8081,
              "podAnnotations": {},
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "resources": {},
              "securityContext": {},
              "service": {
                "type": "NodePort"
              }
            },
            "nexusProxyRoute": {
              "enabled": false
            },
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "enabled": true,
              "storageSize": "8Gi"
            },
            "replicaCount": 1,
            "route": {
              "enabled": false,
              "name": "docker",
              "portName": "docker"
            },
            "secret": {
              "enabled": false,
              "mountPath": "/etc/secret-volume",
              "readOnly": true
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "statefulset": {
              "enabled": false
            },
            "tolerations": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxrm-operator-bundle@sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "bundle_path_digest": "sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-06T22:51:46.394000+00:00",
      "csv_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.\nThe flow of open source and third-party components into and through an organization\ncreates a complex software supply chain.\nNexus Repository delivers speed, efficiency, and quality to the governance\nand management of all dependencies, libraries, and applications for your DevOps teams.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Improves reliability with repeatable, fast access to secure dependencies\n* **Developer Productivity**:\n  Streamline developer workflows by enabling the sharing of components and applications across teams\n* **Supply Chain Performance**:\n  Improve speed-to-market and reduced build times with release advanced staging and component tagging\n* **CI/CD Integrations**:\n  Increase DevOps scalability with integrations to the most popular build and deployment tools\n\nVersion control systems and package registries do not scale when managing proprietary,\nopen source, and third-party components.\nOrganizations need a central binary and build artifact repository to manage dependencies\nacross the entire software supply chain.\n\n## Limitations\n\nHigh Availability Clustering (HA-C) is not supported for Nexus Repository Pro for OpenShift.\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus Repository Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to that service for nexus.port (8081).\n\nBy default, the Nexus Repository starts up in OSS mode until a license is installed.\n\nThe Nexus Repository can be further configured via the NexusRepo custom resource definition:\n\n| Parameter                                   | Description                         | Default                                 |\n| ------------------------------------------  | ----------------------------------  | ----------------------------------------|\n| `statefulset.enabled`                       | Use statefulset instead of deployment | `false` |\n| `deploymentStrategy.type`                   | Deployment Strategy     |  `Recreate` |\n| `nexus.env`                                 | Nexus environment variables         | `See example.` |\n| `nexus.resources`                           | Nexus resource requests and limits  | `{}`                                    |\n| `nexus.dockerPort`                          | Port to access docker               | `5003`                                  |\n| `nexus.nexusPort`                           | Internal port for Nexus service     | `8081`                                  |\n| `nexus.service.type`                        | Service for Nexus                   |`NodePort`                                |\n| `nexus.service.clusterIp`                   | Specific cluster IP when service type is cluster IP. Use None for headless service |`nil`   |\n| `nexus.securityContext`                     | Security Context |\n| `nexus.labels`                              | Service labels                      | `{}`                                    |\n| `nexus.podAnnotations`                      | Pod Annotations                     | `{}`\n| `nexus.livenessProbe.initialDelaySeconds`   | LivenessProbe initial delay         | 30                                      |\n| `nexus.livenessProbe.periodSeconds`         | Seconds between polls               | 30                                      |\n| `nexus.livenessProbe.failureThreshold`      | Number of attempts before failure   | 6                                       |\n| `nexus.livenessProbe.timeoutSeconds`        | Time in seconds after liveness probe times out    | `nil`                     |\n| `nexus.livenessProbe.path`                  | Path for LivenessProbe              | /                                       |\n| `nexus.readinessProbe.initialDelaySeconds`  | ReadinessProbe initial delay        | 30                                      |\n| `nexus.readinessProbe.periodSeconds`        | Seconds between polls               | 30                                      |\n| `nexus.readinessProbe.failureThreshold`     | Number of attempts before failure   | 6                                       |\n| `nexus.readinessProbe.timeoutSeconds`       | Time in seconds after readiness probe times out    | `nil`                    |\n| `nexus.readinessProbe.path`                 | Path for ReadinessProbe             | /                                       |\n| `nexus.hostAliases`                         | Aliases for IPs in /etc/hosts       | []                                      |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `tolerations`                               | tolerations list                    | `[]`                                    |\n| `config.enabled`                            | Enable configmap                    | `false`                                 |\n| `config.mountPath`                          | Path to mount the config            | `/sonatype-nexus-conf`                  |\n| `config.data`                               | Configmap data                      | `nil`                                   |\n| `deployment.terminationGracePeriodSeconds`  | Time to allow for clean shutdown    | 120                                     |\n| `deployment.annotations`                    | Annotations to enhance deployment configuration  | `{}`                       |\n| `deployment.initContainers`                 | Init containers to run before main containers  | `nil`                        |\n| `deployment.postStart.command`              | Command to run after starting the nexus container  | `nil`                    |\n| `deployment.preStart.command`               | Command to run before starting the nexus container  | `nil`                   |\n| `deployment.additionalContainers`           | Add additional Container         | `nil`                                      |\n| `deployment.additionalVolumes`              | Add additional Volumes           | `nil`                                      |\n| `deployment.additionalVolumeMounts`         | Add additional Volume mounts     | `nil`                                      |\n| `secret.enabled`                            | Enable secret                    | `false`                                    |\n| `secret.mountPath`                          | Path to mount the secret         | `/etc/secret-volume`                       |\n| `secret.readOnly`                           | Secret readonly state            | `true`                                     |\n| `secret.data`                               | Secret data                      | `nil`                                      |\n| `service.enabled`                           | Enable additional service        | `nil`                                      |\n| `service.name`                              | Service name                     | `nil`                                      |\n| `service.portName`                          | Service port name                | `nil`                                      |\n| `service.labels`                            | Service labels                   | `nil`                                      |\n| `service.annotations`                       | Service annotations              | `nil`                                      |\n| `service.loadBalancerSourceRanges`          | Service LoadBalancer source IP whitelist | `nil`                              |\n| `service.targetPort`                        | Service port                     | `nil`                                      |\n| `service.port`                              | Port for exposing service        | `nil`                                      |\n| `route.enabled`         | Set to true to create route for additional service | `false` |\n| `route.name`            | Name of route                                      | `docker` |\n| `route.portName`        | Target port name of service                        | `docker` |\n| `route.labels`          | Labels to be added to route                        | `{}` |\n| `route.annotations`     | Annotations to be added to route                   | `{}` |\n| `route.path`            | Host name of Route e.g jenkins.example.com         | nil |",
      "csv_display_name": "Nexus Repository Operator",
      "csv_metadata_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.",
      "csv_name": "nxrm-operator-certified.v3.41.1-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:00:42.505000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "nxrm-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusRepo",
          "plural": "nexusrepos",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified-6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6-annotation"
        },
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus-repository-manager-af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<3.41.1-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "3.41.1-1",
      "version_original": "3.41.1-1"
    },
    {
      "_id": "6317d0a07105fcda2cfb8493",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusRepo",
          "metadata": {
            "name": "example-nexusrepo"
          },
          "spec": {
            "config": {
              "enabled": false,
              "mountPath": "/sonatype-nexus-conf"
            },
            "deployment": {
              "annotations": {},
              "postStart": {},
              "preStart": {},
              "terminationGracePeriodSeconds": 120
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "ingress": {
              "annotations": {},
              "enabled": false,
              "path": "/",
              "tls": {
                "enabled": true,
                "secretName": "nexus-tls"
              }
            },
            "nexus": {
              "dockerPort": 5003,
              "env": [
                {
                  "name": "INSTALL4J_ADD_VM_PARAMS",
                  "value": "-Xms2703M -Xmx2703M -XX:MaxDirectMemorySize=2703M -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
                },
                {
                  "name": "NEXUS_SECURITY_RANDOMPASSWORD",
                  "value": "false"
                }
              ],
              "hostAliases": [],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "nexusPort": 8081,
              "podAnnotations": {},
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "resources": {},
              "securityContext": {},
              "service": {
                "type": "NodePort"
              }
            },
            "nexusProxyRoute": {
              "enabled": false
            },
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "enabled": true,
              "storageSize": "8Gi"
            },
            "replicaCount": 1,
            "route": {
              "enabled": false,
              "name": "docker",
              "portName": "docker"
            },
            "secret": {
              "enabled": false,
              "mountPath": "/etc/secret-volume",
              "readOnly": true
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "statefulset": {
              "enabled": false
            },
            "tolerations": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxrm-operator-bundle@sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "bundle_path_digest": "sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-06T22:58:40.493000+00:00",
      "csv_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.\nThe flow of open source and third-party components into and through an organization\ncreates a complex software supply chain.\nNexus Repository delivers speed, efficiency, and quality to the governance\nand management of all dependencies, libraries, and applications for your DevOps teams.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Improves reliability with repeatable, fast access to secure dependencies\n* **Developer Productivity**:\n  Streamline developer workflows by enabling the sharing of components and applications across teams\n* **Supply Chain Performance**:\n  Improve speed-to-market and reduced build times with release advanced staging and component tagging\n* **CI/CD Integrations**:\n  Increase DevOps scalability with integrations to the most popular build and deployment tools\n\nVersion control systems and package registries do not scale when managing proprietary,\nopen source, and third-party components.\nOrganizations need a central binary and build artifact repository to manage dependencies\nacross the entire software supply chain.\n\n## Limitations\n\nHigh Availability Clustering (HA-C) is not supported for Nexus Repository Pro for OpenShift.\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus Repository Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to that service for nexus.port (8081).\n\nBy default, the Nexus Repository starts up in OSS mode until a license is installed.\n\nThe Nexus Repository can be further configured via the NexusRepo custom resource definition:\n\n| Parameter                                   | Description                         | Default                                 |\n| ------------------------------------------  | ----------------------------------  | ----------------------------------------|\n| `statefulset.enabled`                       | Use statefulset instead of deployment | `false` |\n| `deploymentStrategy.type`                   | Deployment Strategy     |  `Recreate` |\n| `nexus.env`                                 | Nexus environment variables         | `See example.` |\n| `nexus.resources`                           | Nexus resource requests and limits  | `{}`                                    |\n| `nexus.dockerPort`                          | Port to access docker               | `5003`                                  |\n| `nexus.nexusPort`                           | Internal port for Nexus service     | `8081`                                  |\n| `nexus.service.type`                        | Service for Nexus                   |`NodePort`                                |\n| `nexus.service.clusterIp`                   | Specific cluster IP when service type is cluster IP. Use None for headless service |`nil`   |\n| `nexus.securityContext`                     | Security Context |\n| `nexus.labels`                              | Service labels                      | `{}`                                    |\n| `nexus.podAnnotations`                      | Pod Annotations                     | `{}`\n| `nexus.livenessProbe.initialDelaySeconds`   | LivenessProbe initial delay         | 30                                      |\n| `nexus.livenessProbe.periodSeconds`         | Seconds between polls               | 30                                      |\n| `nexus.livenessProbe.failureThreshold`      | Number of attempts before failure   | 6                                       |\n| `nexus.livenessProbe.timeoutSeconds`        | Time in seconds after liveness probe times out    | `nil`                     |\n| `nexus.livenessProbe.path`                  | Path for LivenessProbe              | /                                       |\n| `nexus.readinessProbe.initialDelaySeconds`  | ReadinessProbe initial delay        | 30                                      |\n| `nexus.readinessProbe.periodSeconds`        | Seconds between polls               | 30                                      |\n| `nexus.readinessProbe.failureThreshold`     | Number of attempts before failure   | 6                                       |\n| `nexus.readinessProbe.timeoutSeconds`       | Time in seconds after readiness probe times out    | `nil`                    |\n| `nexus.readinessProbe.path`                 | Path for ReadinessProbe             | /                                       |\n| `nexus.hostAliases`                         | Aliases for IPs in /etc/hosts       | []                                      |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `tolerations`                               | tolerations list                    | `[]`                                    |\n| `config.enabled`                            | Enable configmap                    | `false`                                 |\n| `config.mountPath`                          | Path to mount the config            | `/sonatype-nexus-conf`                  |\n| `config.data`                               | Configmap data                      | `nil`                                   |\n| `deployment.terminationGracePeriodSeconds`  | Time to allow for clean shutdown    | 120                                     |\n| `deployment.annotations`                    | Annotations to enhance deployment configuration  | `{}`                       |\n| `deployment.initContainers`                 | Init containers to run before main containers  | `nil`                        |\n| `deployment.postStart.command`              | Command to run after starting the nexus container  | `nil`                    |\n| `deployment.preStart.command`               | Command to run before starting the nexus container  | `nil`                   |\n| `deployment.additionalContainers`           | Add additional Container         | `nil`                                      |\n| `deployment.additionalVolumes`              | Add additional Volumes           | `nil`                                      |\n| `deployment.additionalVolumeMounts`         | Add additional Volume mounts     | `nil`                                      |\n| `secret.enabled`                            | Enable secret                    | `false`                                    |\n| `secret.mountPath`                          | Path to mount the secret         | `/etc/secret-volume`                       |\n| `secret.readOnly`                           | Secret readonly state            | `true`                                     |\n| `secret.data`                               | Secret data                      | `nil`                                      |\n| `service.enabled`                           | Enable additional service        | `nil`                                      |\n| `service.name`                              | Service name                     | `nil`                                      |\n| `service.portName`                          | Service port name                | `nil`                                      |\n| `service.labels`                            | Service labels                   | `nil`                                      |\n| `service.annotations`                       | Service annotations              | `nil`                                      |\n| `service.loadBalancerSourceRanges`          | Service LoadBalancer source IP whitelist | `nil`                              |\n| `service.targetPort`                        | Service port                     | `nil`                                      |\n| `service.port`                              | Port for exposing service        | `nil`                                      |\n| `route.enabled`         | Set to true to create route for additional service | `false` |\n| `route.name`            | Name of route                                      | `docker` |\n| `route.portName`        | Target port name of service                        | `docker` |\n| `route.labels`          | Labels to be added to route                        | `{}` |\n| `route.annotations`     | Annotations to be added to route                   | `{}` |\n| `route.path`            | Host name of Route e.g jenkins.example.com         | nil |",
      "csv_display_name": "Nexus Repository Operator",
      "csv_metadata_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.",
      "csv_name": "nxrm-operator-certified.v3.41.1-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:55:35.829000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "nxrm-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusRepo",
          "plural": "nexusrepos",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified-6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6-annotation"
        },
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus-repository-manager-af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<3.41.1-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "3.41.1-1",
      "version_original": "3.41.1-1"
    },
    {
      "_id": "6317d15a7105fcda2cfb84d1",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusRepo",
          "metadata": {
            "name": "example-nexusrepo"
          },
          "spec": {
            "config": {
              "enabled": false,
              "mountPath": "/sonatype-nexus-conf"
            },
            "deployment": {
              "annotations": {},
              "postStart": {},
              "preStart": {},
              "terminationGracePeriodSeconds": 120
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "ingress": {
              "annotations": {},
              "enabled": false,
              "path": "/",
              "tls": {
                "enabled": true,
                "secretName": "nexus-tls"
              }
            },
            "nexus": {
              "dockerPort": 5003,
              "env": [
                {
                  "name": "INSTALL4J_ADD_VM_PARAMS",
                  "value": "-Xms2703M -Xmx2703M -XX:MaxDirectMemorySize=2703M -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
                },
                {
                  "name": "NEXUS_SECURITY_RANDOMPASSWORD",
                  "value": "false"
                }
              ],
              "hostAliases": [],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "nexusPort": 8081,
              "podAnnotations": {},
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "resources": {},
              "securityContext": {},
              "service": {
                "type": "NodePort"
              }
            },
            "nexusProxyRoute": {
              "enabled": false
            },
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "enabled": true,
              "storageSize": "8Gi"
            },
            "replicaCount": 1,
            "route": {
              "enabled": false,
              "name": "docker",
              "portName": "docker"
            },
            "secret": {
              "enabled": false,
              "mountPath": "/etc/secret-volume",
              "readOnly": true
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "statefulset": {
              "enabled": false
            },
            "tolerations": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxrm-operator-bundle@sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "bundle_path_digest": "sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-06T23:01:46.934000+00:00",
      "csv_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.\nThe flow of open source and third-party components into and through an organization\ncreates a complex software supply chain.\nNexus Repository delivers speed, efficiency, and quality to the governance\nand management of all dependencies, libraries, and applications for your DevOps teams.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Improves reliability with repeatable, fast access to secure dependencies\n* **Developer Productivity**:\n  Streamline developer workflows by enabling the sharing of components and applications across teams\n* **Supply Chain Performance**:\n  Improve speed-to-market and reduced build times with release advanced staging and component tagging\n* **CI/CD Integrations**:\n  Increase DevOps scalability with integrations to the most popular build and deployment tools\n\nVersion control systems and package registries do not scale when managing proprietary,\nopen source, and third-party components.\nOrganizations need a central binary and build artifact repository to manage dependencies\nacross the entire software supply chain.\n\n## Limitations\n\nHigh Availability Clustering (HA-C) is not supported for Nexus Repository Pro for OpenShift.\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus Repository Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to that service for nexus.port (8081).\n\nBy default, the Nexus Repository starts up in OSS mode until a license is installed.\n\nThe Nexus Repository can be further configured via the NexusRepo custom resource definition:\n\n| Parameter                                   | Description                         | Default                                 |\n| ------------------------------------------  | ----------------------------------  | ----------------------------------------|\n| `statefulset.enabled`                       | Use statefulset instead of deployment | `false` |\n| `deploymentStrategy.type`                   | Deployment Strategy     |  `Recreate` |\n| `nexus.env`                                 | Nexus environment variables         | `See example.` |\n| `nexus.resources`                           | Nexus resource requests and limits  | `{}`                                    |\n| `nexus.dockerPort`                          | Port to access docker               | `5003`                                  |\n| `nexus.nexusPort`                           | Internal port for Nexus service     | `8081`                                  |\n| `nexus.service.type`                        | Service for Nexus                   |`NodePort`                                |\n| `nexus.service.clusterIp`                   | Specific cluster IP when service type is cluster IP. Use None for headless service |`nil`   |\n| `nexus.securityContext`                     | Security Context |\n| `nexus.labels`                              | Service labels                      | `{}`                                    |\n| `nexus.podAnnotations`                      | Pod Annotations                     | `{}`\n| `nexus.livenessProbe.initialDelaySeconds`   | LivenessProbe initial delay         | 30                                      |\n| `nexus.livenessProbe.periodSeconds`         | Seconds between polls               | 30                                      |\n| `nexus.livenessProbe.failureThreshold`      | Number of attempts before failure   | 6                                       |\n| `nexus.livenessProbe.timeoutSeconds`        | Time in seconds after liveness probe times out    | `nil`                     |\n| `nexus.livenessProbe.path`                  | Path for LivenessProbe              | /                                       |\n| `nexus.readinessProbe.initialDelaySeconds`  | ReadinessProbe initial delay        | 30                                      |\n| `nexus.readinessProbe.periodSeconds`        | Seconds between polls               | 30                                      |\n| `nexus.readinessProbe.failureThreshold`     | Number of attempts before failure   | 6                                       |\n| `nexus.readinessProbe.timeoutSeconds`       | Time in seconds after readiness probe times out    | `nil`                    |\n| `nexus.readinessProbe.path`                 | Path for ReadinessProbe             | /                                       |\n| `nexus.hostAliases`                         | Aliases for IPs in /etc/hosts       | []                                      |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `tolerations`                               | tolerations list                    | `[]`                                    |\n| `config.enabled`                            | Enable configmap                    | `false`                                 |\n| `config.mountPath`                          | Path to mount the config            | `/sonatype-nexus-conf`                  |\n| `config.data`                               | Configmap data                      | `nil`                                   |\n| `deployment.terminationGracePeriodSeconds`  | Time to allow for clean shutdown    | 120                                     |\n| `deployment.annotations`                    | Annotations to enhance deployment configuration  | `{}`                       |\n| `deployment.initContainers`                 | Init containers to run before main containers  | `nil`                        |\n| `deployment.postStart.command`              | Command to run after starting the nexus container  | `nil`                    |\n| `deployment.preStart.command`               | Command to run before starting the nexus container  | `nil`                   |\n| `deployment.additionalContainers`           | Add additional Container         | `nil`                                      |\n| `deployment.additionalVolumes`              | Add additional Volumes           | `nil`                                      |\n| `deployment.additionalVolumeMounts`         | Add additional Volume mounts     | `nil`                                      |\n| `secret.enabled`                            | Enable secret                    | `false`                                    |\n| `secret.mountPath`                          | Path to mount the secret         | `/etc/secret-volume`                       |\n| `secret.readOnly`                           | Secret readonly state            | `true`                                     |\n| `secret.data`                               | Secret data                      | `nil`                                      |\n| `service.enabled`                           | Enable additional service        | `nil`                                      |\n| `service.name`                              | Service name                     | `nil`                                      |\n| `service.portName`                          | Service port name                | `nil`                                      |\n| `service.labels`                            | Service labels                   | `nil`                                      |\n| `service.annotations`                       | Service annotations              | `nil`                                      |\n| `service.loadBalancerSourceRanges`          | Service LoadBalancer source IP whitelist | `nil`                              |\n| `service.targetPort`                        | Service port                     | `nil`                                      |\n| `service.port`                              | Port for exposing service        | `nil`                                      |\n| `route.enabled`         | Set to true to create route for additional service | `false` |\n| `route.name`            | Name of route                                      | `docker` |\n| `route.portName`        | Target port name of service                        | `docker` |\n| `route.labels`          | Labels to be added to route                        | `{}` |\n| `route.annotations`     | Annotations to be added to route                   | `{}` |\n| `route.path`            | Host name of Route e.g jenkins.example.com         | nil |",
      "csv_display_name": "Nexus Repository Operator",
      "csv_metadata_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.",
      "csv_name": "nxrm-operator-certified.v3.41.1-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:12:13.737000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "nxrm-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusRepo",
          "plural": "nexusrepos",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified-6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6-annotation"
        },
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus-repository-manager-af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<3.41.1-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "3.41.1-1",
      "version_original": "3.41.1-1"
    },
    {
      "_id": "6317d16e776505c5d05b2b34",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusRepo",
          "metadata": {
            "name": "example-nexusrepo"
          },
          "spec": {
            "config": {
              "enabled": false,
              "mountPath": "/sonatype-nexus-conf"
            },
            "deployment": {
              "annotations": {},
              "postStart": {},
              "preStart": {},
              "terminationGracePeriodSeconds": 120
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "ingress": {
              "annotations": {},
              "enabled": false,
              "path": "/",
              "tls": {
                "enabled": true,
                "secretName": "nexus-tls"
              }
            },
            "nexus": {
              "dockerPort": 5003,
              "env": [
                {
                  "name": "INSTALL4J_ADD_VM_PARAMS",
                  "value": "-Xms2703M -Xmx2703M -XX:MaxDirectMemorySize=2703M -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
                },
                {
                  "name": "NEXUS_SECURITY_RANDOMPASSWORD",
                  "value": "false"
                }
              ],
              "hostAliases": [],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "nexusPort": 8081,
              "podAnnotations": {},
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "resources": {},
              "securityContext": {},
              "service": {
                "type": "NodePort"
              }
            },
            "nexusProxyRoute": {
              "enabled": false
            },
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "enabled": true,
              "storageSize": "8Gi"
            },
            "replicaCount": 1,
            "route": {
              "enabled": false,
              "name": "docker",
              "portName": "docker"
            },
            "secret": {
              "enabled": false,
              "mountPath": "/etc/secret-volume",
              "readOnly": true
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "statefulset": {
              "enabled": false
            },
            "tolerations": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxrm-operator-bundle@sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "bundle_path_digest": "sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-06T23:02:06.035000+00:00",
      "csv_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.\nThe flow of open source and third-party components into and through an organization\ncreates a complex software supply chain.\nNexus Repository delivers speed, efficiency, and quality to the governance\nand management of all dependencies, libraries, and applications for your DevOps teams.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Improves reliability with repeatable, fast access to secure dependencies\n* **Developer Productivity**:\n  Streamline developer workflows by enabling the sharing of components and applications across teams\n* **Supply Chain Performance**:\n  Improve speed-to-market and reduced build times with release advanced staging and component tagging\n* **CI/CD Integrations**:\n  Increase DevOps scalability with integrations to the most popular build and deployment tools\n\nVersion control systems and package registries do not scale when managing proprietary,\nopen source, and third-party components.\nOrganizations need a central binary and build artifact repository to manage dependencies\nacross the entire software supply chain.\n\n## Limitations\n\nHigh Availability Clustering (HA-C) is not supported for Nexus Repository Pro for OpenShift.\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus Repository Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to that service for nexus.port (8081).\n\nBy default, the Nexus Repository starts up in OSS mode until a license is installed.\n\nThe Nexus Repository can be further configured via the NexusRepo custom resource definition:\n\n| Parameter                                   | Description                         | Default                                 |\n| ------------------------------------------  | ----------------------------------  | ----------------------------------------|\n| `statefulset.enabled`                       | Use statefulset instead of deployment | `false` |\n| `deploymentStrategy.type`                   | Deployment Strategy     |  `Recreate` |\n| `nexus.env`                                 | Nexus environment variables         | `See example.` |\n| `nexus.resources`                           | Nexus resource requests and limits  | `{}`                                    |\n| `nexus.dockerPort`                          | Port to access docker               | `5003`                                  |\n| `nexus.nexusPort`                           | Internal port for Nexus service     | `8081`                                  |\n| `nexus.service.type`                        | Service for Nexus                   |`NodePort`                                |\n| `nexus.service.clusterIp`                   | Specific cluster IP when service type is cluster IP. Use None for headless service |`nil`   |\n| `nexus.securityContext`                     | Security Context |\n| `nexus.labels`                              | Service labels                      | `{}`                                    |\n| `nexus.podAnnotations`                      | Pod Annotations                     | `{}`\n| `nexus.livenessProbe.initialDelaySeconds`   | LivenessProbe initial delay         | 30                                      |\n| `nexus.livenessProbe.periodSeconds`         | Seconds between polls               | 30                                      |\n| `nexus.livenessProbe.failureThreshold`      | Number of attempts before failure   | 6                                       |\n| `nexus.livenessProbe.timeoutSeconds`        | Time in seconds after liveness probe times out    | `nil`                     |\n| `nexus.livenessProbe.path`                  | Path for LivenessProbe              | /                                       |\n| `nexus.readinessProbe.initialDelaySeconds`  | ReadinessProbe initial delay        | 30                                      |\n| `nexus.readinessProbe.periodSeconds`        | Seconds between polls               | 30                                      |\n| `nexus.readinessProbe.failureThreshold`     | Number of attempts before failure   | 6                                       |\n| `nexus.readinessProbe.timeoutSeconds`       | Time in seconds after readiness probe times out    | `nil`                    |\n| `nexus.readinessProbe.path`                 | Path for ReadinessProbe             | /                                       |\n| `nexus.hostAliases`                         | Aliases for IPs in /etc/hosts       | []                                      |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `tolerations`                               | tolerations list                    | `[]`                                    |\n| `config.enabled`                            | Enable configmap                    | `false`                                 |\n| `config.mountPath`                          | Path to mount the config            | `/sonatype-nexus-conf`                  |\n| `config.data`                               | Configmap data                      | `nil`                                   |\n| `deployment.terminationGracePeriodSeconds`  | Time to allow for clean shutdown    | 120                                     |\n| `deployment.annotations`                    | Annotations to enhance deployment configuration  | `{}`                       |\n| `deployment.initContainers`                 | Init containers to run before main containers  | `nil`                        |\n| `deployment.postStart.command`              | Command to run after starting the nexus container  | `nil`                    |\n| `deployment.preStart.command`               | Command to run before starting the nexus container  | `nil`                   |\n| `deployment.additionalContainers`           | Add additional Container         | `nil`                                      |\n| `deployment.additionalVolumes`              | Add additional Volumes           | `nil`                                      |\n| `deployment.additionalVolumeMounts`         | Add additional Volume mounts     | `nil`                                      |\n| `secret.enabled`                            | Enable secret                    | `false`                                    |\n| `secret.mountPath`                          | Path to mount the secret         | `/etc/secret-volume`                       |\n| `secret.readOnly`                           | Secret readonly state            | `true`                                     |\n| `secret.data`                               | Secret data                      | `nil`                                      |\n| `service.enabled`                           | Enable additional service        | `nil`                                      |\n| `service.name`                              | Service name                     | `nil`                                      |\n| `service.portName`                          | Service port name                | `nil`                                      |\n| `service.labels`                            | Service labels                   | `nil`                                      |\n| `service.annotations`                       | Service annotations              | `nil`                                      |\n| `service.loadBalancerSourceRanges`          | Service LoadBalancer source IP whitelist | `nil`                              |\n| `service.targetPort`                        | Service port                     | `nil`                                      |\n| `service.port`                              | Port for exposing service        | `nil`                                      |\n| `route.enabled`         | Set to true to create route for additional service | `false` |\n| `route.name`            | Name of route                                      | `docker` |\n| `route.portName`        | Target port name of service                        | `docker` |\n| `route.labels`          | Labels to be added to route                        | `{}` |\n| `route.annotations`     | Annotations to be added to route                   | `{}` |\n| `route.path`            | Host name of Route e.g jenkins.example.com         | nil |",
      "csv_display_name": "Nexus Repository Operator",
      "csv_metadata_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.",
      "csv_name": "nxrm-operator-certified.v3.41.1-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:59:18.747000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "nxrm-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusRepo",
          "plural": "nexusrepos",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified-6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6-annotation"
        },
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus-repository-manager-af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<3.41.1-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "3.41.1-1",
      "version_original": "3.41.1-1"
    },
    {
      "_id": "6317d3d7577fb84aecd6684f",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusRepo",
          "metadata": {
            "name": "example-nexusrepo"
          },
          "spec": {
            "config": {
              "enabled": false,
              "mountPath": "/sonatype-nexus-conf"
            },
            "deployment": {
              "annotations": {},
              "postStart": {},
              "preStart": {},
              "terminationGracePeriodSeconds": 120
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "ingress": {
              "annotations": {},
              "enabled": false,
              "path": "/",
              "tls": {
                "enabled": true,
                "secretName": "nexus-tls"
              }
            },
            "nexus": {
              "dockerPort": 5003,
              "env": [
                {
                  "name": "INSTALL4J_ADD_VM_PARAMS",
                  "value": "-Xms2703M -Xmx2703M -XX:MaxDirectMemorySize=2703M -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
                },
                {
                  "name": "NEXUS_SECURITY_RANDOMPASSWORD",
                  "value": "false"
                }
              ],
              "hostAliases": [],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "nexusPort": 8081,
              "podAnnotations": {},
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "path": "/",
                "periodSeconds": 30
              },
              "resources": {},
              "securityContext": {},
              "service": {
                "type": "NodePort"
              }
            },
            "nexusProxyRoute": {
              "enabled": false
            },
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "enabled": true,
              "storageSize": "8Gi"
            },
            "replicaCount": 1,
            "route": {
              "enabled": false,
              "name": "docker",
              "portName": "docker"
            },
            "secret": {
              "enabled": false,
              "mountPath": "/etc/secret-volume",
              "readOnly": true
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "statefulset": {
              "enabled": false
            },
            "tolerations": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxrm-operator-bundle@sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "bundle_path_digest": "sha256:4afdcff709d830c131720b11dff6d265db4af6f921829b81e09e07d9394a597c",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-06T23:12:23.199000+00:00",
      "csv_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.\nThe flow of open source and third-party components into and through an organization\ncreates a complex software supply chain.\nNexus Repository delivers speed, efficiency, and quality to the governance\nand management of all dependencies, libraries, and applications for your DevOps teams.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Improves reliability with repeatable, fast access to secure dependencies\n* **Developer Productivity**:\n  Streamline developer workflows by enabling the sharing of components and applications across teams\n* **Supply Chain Performance**:\n  Improve speed-to-market and reduced build times with release advanced staging and component tagging\n* **CI/CD Integrations**:\n  Increase DevOps scalability with integrations to the most popular build and deployment tools\n\nVersion control systems and package registries do not scale when managing proprietary,\nopen source, and third-party components.\nOrganizations need a central binary and build artifact repository to manage dependencies\nacross the entire software supply chain.\n\n## Limitations\n\nHigh Availability Clustering (HA-C) is not supported for Nexus Repository Pro for OpenShift.\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus Repository Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to that service for nexus.port (8081).\n\nBy default, the Nexus Repository starts up in OSS mode until a license is installed.\n\nThe Nexus Repository can be further configured via the NexusRepo custom resource definition:\n\n| Parameter                                   | Description                         | Default                                 |\n| ------------------------------------------  | ----------------------------------  | ----------------------------------------|\n| `statefulset.enabled`                       | Use statefulset instead of deployment | `false` |\n| `deploymentStrategy.type`                   | Deployment Strategy     |  `Recreate` |\n| `nexus.env`                                 | Nexus environment variables         | `See example.` |\n| `nexus.resources`                           | Nexus resource requests and limits  | `{}`                                    |\n| `nexus.dockerPort`                          | Port to access docker               | `5003`                                  |\n| `nexus.nexusPort`                           | Internal port for Nexus service     | `8081`                                  |\n| `nexus.service.type`                        | Service for Nexus                   |`NodePort`                                |\n| `nexus.service.clusterIp`                   | Specific cluster IP when service type is cluster IP. Use None for headless service |`nil`   |\n| `nexus.securityContext`                     | Security Context |\n| `nexus.labels`                              | Service labels                      | `{}`                                    |\n| `nexus.podAnnotations`                      | Pod Annotations                     | `{}`\n| `nexus.livenessProbe.initialDelaySeconds`   | LivenessProbe initial delay         | 30                                      |\n| `nexus.livenessProbe.periodSeconds`         | Seconds between polls               | 30                                      |\n| `nexus.livenessProbe.failureThreshold`      | Number of attempts before failure   | 6                                       |\n| `nexus.livenessProbe.timeoutSeconds`        | Time in seconds after liveness probe times out    | `nil`                     |\n| `nexus.livenessProbe.path`                  | Path for LivenessProbe              | /                                       |\n| `nexus.readinessProbe.initialDelaySeconds`  | ReadinessProbe initial delay        | 30                                      |\n| `nexus.readinessProbe.periodSeconds`        | Seconds between polls               | 30                                      |\n| `nexus.readinessProbe.failureThreshold`     | Number of attempts before failure   | 6                                       |\n| `nexus.readinessProbe.timeoutSeconds`       | Time in seconds after readiness probe times out    | `nil`                    |\n| `nexus.readinessProbe.path`                 | Path for ReadinessProbe             | /                                       |\n| `nexus.hostAliases`                         | Aliases for IPs in /etc/hosts       | []                                      |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `tolerations`                               | tolerations list                    | `[]`                                    |\n| `config.enabled`                            | Enable configmap                    | `false`                                 |\n| `config.mountPath`                          | Path to mount the config            | `/sonatype-nexus-conf`                  |\n| `config.data`                               | Configmap data                      | `nil`                                   |\n| `deployment.terminationGracePeriodSeconds`  | Time to allow for clean shutdown    | 120                                     |\n| `deployment.annotations`                    | Annotations to enhance deployment configuration  | `{}`                       |\n| `deployment.initContainers`                 | Init containers to run before main containers  | `nil`                        |\n| `deployment.postStart.command`              | Command to run after starting the nexus container  | `nil`                    |\n| `deployment.preStart.command`               | Command to run before starting the nexus container  | `nil`                   |\n| `deployment.additionalContainers`           | Add additional Container         | `nil`                                      |\n| `deployment.additionalVolumes`              | Add additional Volumes           | `nil`                                      |\n| `deployment.additionalVolumeMounts`         | Add additional Volume mounts     | `nil`                                      |\n| `secret.enabled`                            | Enable secret                    | `false`                                    |\n| `secret.mountPath`                          | Path to mount the secret         | `/etc/secret-volume`                       |\n| `secret.readOnly`                           | Secret readonly state            | `true`                                     |\n| `secret.data`                               | Secret data                      | `nil`                                      |\n| `service.enabled`                           | Enable additional service        | `nil`                                      |\n| `service.name`                              | Service name                     | `nil`                                      |\n| `service.portName`                          | Service port name                | `nil`                                      |\n| `service.labels`                            | Service labels                   | `nil`                                      |\n| `service.annotations`                       | Service annotations              | `nil`                                      |\n| `service.loadBalancerSourceRanges`          | Service LoadBalancer source IP whitelist | `nil`                              |\n| `service.targetPort`                        | Service port                     | `nil`                                      |\n| `service.port`                              | Port for exposing service        | `nil`                                      |\n| `route.enabled`         | Set to true to create route for additional service | `false` |\n| `route.name`            | Name of route                                      | `docker` |\n| `route.portName`        | Target port name of service                        | `docker` |\n| `route.labels`          | Labels to be added to route                        | `{}` |\n| `route.annotations`     | Annotations to be added to route                   | `{}` |\n| `route.path`            | Host name of Route e.g jenkins.example.com         | nil |",
      "csv_display_name": "Nexus Repository Operator",
      "csv_metadata_description": "Nexus Repository is the central source of control to efficiently manage all binaries\nand build artifacts across your DevOps pipeline.",
      "csv_name": "nxrm-operator-certified.v3.41.1-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:12:42.426000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "nxrm-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusRepo",
          "plural": "nexusrepos",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified-6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6-annotation"
        },
        {
          "digest": "sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "image": "registry.connect.redhat.com/sonatype/nxrm-operator-certified@sha256:6c34ee9a3db1f05985100b251212578d51d4ef1bc8171282c8e07c154cba8ee6",
          "name": "nxrm-operator-certified"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus"
        },
        {
          "digest": "sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "image": "registry.connect.redhat.com/sonatype/nexus-repository-manager@sha256:af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f",
          "name": "nexus-repository-manager-af94979b9e02e03c8ec593cbff3b2a41824bfcdc2815441f1e4fb55fca47e95f-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<3.41.1-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "3.41.1-1",
      "version_original": "3.41.1-1"
    },
    {
      "_id": "63185450c5edbef70bd21caf",
      "alm_examples": [
        {
          "api_version": "apps.apimatic.io/v1beta2",
          "kind": "CodeGen",
          "metadata": {
            "name": "codegen-sample"
          },
          "spec": {
            "licenseSpec": {
              "licenseSourceType": "LicenseBlob",
              "licenseSourceValue": "PExpY2Vuc2U+DQogIDxJZD41MDVlNzM4Ny0xZmIxLTQ4ZDQtOGRmMS1iYjk3NGEyNjM2MDM8L0lkPg0KICA8VHlwZT5TdGFuZGFyZDwvVHlwZT4NCiAgPEV4cGlyYXRpb24+RnJpLCAxNyBNYXkgMjA1MiAwNzoxOTozOSBHTVQ8L0V4cGlyYXRpb24+DQogIDxRdWFudGl0eT4yPC9RdWFudGl0eT4NCiAgPFByb2R1Y3RGZWF0dXJlcz4NCiAgICA8RmVhdHVyZSBuYW1lPSJpbXBvcnRGb3JtYXRzIj5BUElCbHVlUHJpbnQsQVBJRWxlbWVudHMsUG9zdG1hbjIsV3NkbCxXQURMMjAwOSxXQURMMjAwNixSYW1sLFJhbWwxMCxTd2FnZ2VyMjAsU3dhZ2dlcllhbWwsU3dhZ2dlcjEwLE9wZW5BcGkzSnNvbixPcGVuQXBpM1lhbWwsSU9Eb2NzLElPRG9jc1YwMzE0LEluc29tbmlhLEluc29tbmlhWWFtbCxSQU1MQXNKc29uLEdvb2dsZURpc2NvdmVyeSxQb3N0bWFuPC9GZWF0dXJlPg0KICAgIDxGZWF0dXJlIG5hbWU9ImV4cG9ydEZvcm1hdHMiPlN3YWdnZXIyMCxTd2FnZ2VyWWFtbCxTd2FnZ2VyMTAsT3BlbkFwaTNKc29uLE9wZW5BcGkzWWFtbCxXc2RsLEFQSUJsdWVQcmludCxBUElFbGVtZW50cyxQb3N0bWFuMixXQURMMjAwOSxXQURMMjAwNixXU0RMLElPRG9jcyxJT0RvY3NWMDMxNCxSQU1MLFJBTUwxMCxHb29nbGVEaXNjb3ZlcnksUG9zdG1hbjIwLEluc29tbmlhLEluc29tbmlhWWFtbDwvRmVhdHVyZT4NCiAgICA8RmVhdHVyZSBuYW1lPSJwbGF0Zm9ybXMiPjwvRmVhdHVyZT4NCiAgPC9Qcm9kdWN0RmVhdHVyZXM+DQogIDxDdXN0b21lcj4NCiAgICA8TmFtZT5EZXZlbG9wZXI8L05hbWU+DQogICAgPEVtYWlsPmRldmVsb3BlckBhcGltYXRpYy5pbzwvRW1haWw+DQogIDwvQ3VzdG9tZXI+DQogIDxTaWduYXR1cmU+TUVVQ0lRRE1yTlY0dE1PUzEwUExiZ1Z0QkVvTHZ6ZGd1UDkzUnk5Tm9pMHBsS2lWa2dJZ1ZOVWtoWTVoS2xiZFBLc1pMcDZrcnZKODV0WUdHUHFBV1gxblkyUUx2NjQ9PC9TaWduYXR1cmU+DQo8L0xpY2Vuc2U+"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-bundle@sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "bundle_path_digest": "sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-07T08:20:32.632000+00:00",
      "csv_description": "APIMatic CodeGen Operator deploys the APIMatic CodeGen application to Kubernetes and RedHat with all necessary resources and configurations. More information can be found [here](https://github.com/apimatic/apimatic-codegen-operator/blob/main/README.md)",
      "csv_display_name": "APIMatic CodeGen Operator",
      "csv_metadata_description": "API CodeGen Operator deploys the APIMatic CodeGen Application to Kubernetes and OpenShift clusters",
      "csv_name": "apimatic-codegen-operator.v1.9.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:40:04.310000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "apimatic-codegen-operator",
      "provided_apis": [
        {
          "group": "apps.apimatic.io",
          "kind": "CodeGen",
          "plural": "codegens",
          "version": "v1beta2"
        }
      ],
      "provider": "APIMatic.io",
      "related_images": [
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "apimatic-codegen-operator-ubi8-4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e-annotation"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": "<1.9.6",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.9.6",
      "version_original": "1.9.6"
    },
    {
      "_id": "631854d6b3d3587ecb637db8",
      "alm_examples": [
        {
          "api_version": "apps.apimatic.io/v1beta2",
          "kind": "CodeGen",
          "metadata": {
            "name": "codegen-sample"
          },
          "spec": {
            "licenseSpec": {
              "licenseSourceType": "LicenseBlob",
              "licenseSourceValue": "PExpY2Vuc2U+DQogIDxJZD41MDVlNzM4Ny0xZmIxLTQ4ZDQtOGRmMS1iYjk3NGEyNjM2MDM8L0lkPg0KICA8VHlwZT5TdGFuZGFyZDwvVHlwZT4NCiAgPEV4cGlyYXRpb24+RnJpLCAxNyBNYXkgMjA1MiAwNzoxOTozOSBHTVQ8L0V4cGlyYXRpb24+DQogIDxRdWFudGl0eT4yPC9RdWFudGl0eT4NCiAgPFByb2R1Y3RGZWF0dXJlcz4NCiAgICA8RmVhdHVyZSBuYW1lPSJpbXBvcnRGb3JtYXRzIj5BUElCbHVlUHJpbnQsQVBJRWxlbWVudHMsUG9zdG1hbjIsV3NkbCxXQURMMjAwOSxXQURMMjAwNixSYW1sLFJhbWwxMCxTd2FnZ2VyMjAsU3dhZ2dlcllhbWwsU3dhZ2dlcjEwLE9wZW5BcGkzSnNvbixPcGVuQXBpM1lhbWwsSU9Eb2NzLElPRG9jc1YwMzE0LEluc29tbmlhLEluc29tbmlhWWFtbCxSQU1MQXNKc29uLEdvb2dsZURpc2NvdmVyeSxQb3N0bWFuPC9GZWF0dXJlPg0KICAgIDxGZWF0dXJlIG5hbWU9ImV4cG9ydEZvcm1hdHMiPlN3YWdnZXIyMCxTd2FnZ2VyWWFtbCxTd2FnZ2VyMTAsT3BlbkFwaTNKc29uLE9wZW5BcGkzWWFtbCxXc2RsLEFQSUJsdWVQcmludCxBUElFbGVtZW50cyxQb3N0bWFuMixXQURMMjAwOSxXQURMMjAwNixXU0RMLElPRG9jcyxJT0RvY3NWMDMxNCxSQU1MLFJBTUwxMCxHb29nbGVEaXNjb3ZlcnksUG9zdG1hbjIwLEluc29tbmlhLEluc29tbmlhWWFtbDwvRmVhdHVyZT4NCiAgICA8RmVhdHVyZSBuYW1lPSJwbGF0Zm9ybXMiPjwvRmVhdHVyZT4NCiAgPC9Qcm9kdWN0RmVhdHVyZXM+DQogIDxDdXN0b21lcj4NCiAgICA8TmFtZT5EZXZlbG9wZXI8L05hbWU+DQogICAgPEVtYWlsPmRldmVsb3BlckBhcGltYXRpYy5pbzwvRW1haWw+DQogIDwvQ3VzdG9tZXI+DQogIDxTaWduYXR1cmU+TUVVQ0lRRE1yTlY0dE1PUzEwUExiZ1Z0QkVvTHZ6ZGd1UDkzUnk5Tm9pMHBsS2lWa2dJZ1ZOVWtoWTVoS2xiZFBLc1pMcDZrcnZKODV0WUdHUHFBV1gxblkyUUx2NjQ9PC9TaWduYXR1cmU+DQo8L0xpY2Vuc2U+"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-bundle@sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "bundle_path_digest": "sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-07T08:22:46.331000+00:00",
      "csv_description": "APIMatic CodeGen Operator deploys the APIMatic CodeGen application to Kubernetes and RedHat with all necessary resources and configurations. More information can be found [here](https://github.com/apimatic/apimatic-codegen-operator/blob/main/README.md)",
      "csv_display_name": "APIMatic CodeGen Operator",
      "csv_metadata_description": "API CodeGen Operator deploys the APIMatic CodeGen Application to Kubernetes and OpenShift clusters",
      "csv_name": "apimatic-codegen-operator.v1.9.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:09:04.690000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "apimatic-codegen-operator",
      "provided_apis": [
        {
          "group": "apps.apimatic.io",
          "kind": "CodeGen",
          "plural": "codegens",
          "version": "v1beta2"
        }
      ],
      "provider": "APIMatic.io",
      "related_images": [
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "apimatic-codegen-operator-ubi8-4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e-annotation"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": "<1.9.6",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.9.6",
      "version_original": "1.9.6"
    },
    {
      "_id": "631854f95f8562c1affb84a4",
      "alm_examples": [
        {
          "api_version": "apps.apimatic.io/v1beta2",
          "kind": "CodeGen",
          "metadata": {
            "name": "codegen-sample"
          },
          "spec": {
            "licenseSpec": {
              "licenseSourceType": "LicenseBlob",
              "licenseSourceValue": "PExpY2Vuc2U+DQogIDxJZD41MDVlNzM4Ny0xZmIxLTQ4ZDQtOGRmMS1iYjk3NGEyNjM2MDM8L0lkPg0KICA8VHlwZT5TdGFuZGFyZDwvVHlwZT4NCiAgPEV4cGlyYXRpb24+RnJpLCAxNyBNYXkgMjA1MiAwNzoxOTozOSBHTVQ8L0V4cGlyYXRpb24+DQogIDxRdWFudGl0eT4yPC9RdWFudGl0eT4NCiAgPFByb2R1Y3RGZWF0dXJlcz4NCiAgICA8RmVhdHVyZSBuYW1lPSJpbXBvcnRGb3JtYXRzIj5BUElCbHVlUHJpbnQsQVBJRWxlbWVudHMsUG9zdG1hbjIsV3NkbCxXQURMMjAwOSxXQURMMjAwNixSYW1sLFJhbWwxMCxTd2FnZ2VyMjAsU3dhZ2dlcllhbWwsU3dhZ2dlcjEwLE9wZW5BcGkzSnNvbixPcGVuQXBpM1lhbWwsSU9Eb2NzLElPRG9jc1YwMzE0LEluc29tbmlhLEluc29tbmlhWWFtbCxSQU1MQXNKc29uLEdvb2dsZURpc2NvdmVyeSxQb3N0bWFuPC9GZWF0dXJlPg0KICAgIDxGZWF0dXJlIG5hbWU9ImV4cG9ydEZvcm1hdHMiPlN3YWdnZXIyMCxTd2FnZ2VyWWFtbCxTd2FnZ2VyMTAsT3BlbkFwaTNKc29uLE9wZW5BcGkzWWFtbCxXc2RsLEFQSUJsdWVQcmludCxBUElFbGVtZW50cyxQb3N0bWFuMixXQURMMjAwOSxXQURMMjAwNixXU0RMLElPRG9jcyxJT0RvY3NWMDMxNCxSQU1MLFJBTUwxMCxHb29nbGVEaXNjb3ZlcnksUG9zdG1hbjIwLEluc29tbmlhLEluc29tbmlhWWFtbDwvRmVhdHVyZT4NCiAgICA8RmVhdHVyZSBuYW1lPSJwbGF0Zm9ybXMiPjwvRmVhdHVyZT4NCiAgPC9Qcm9kdWN0RmVhdHVyZXM+DQogIDxDdXN0b21lcj4NCiAgICA8TmFtZT5EZXZlbG9wZXI8L05hbWU+DQogICAgPEVtYWlsPmRldmVsb3BlckBhcGltYXRpYy5pbzwvRW1haWw+DQogIDwvQ3VzdG9tZXI+DQogIDxTaWduYXR1cmU+TUVVQ0lRRE1yTlY0dE1PUzEwUExiZ1Z0QkVvTHZ6ZGd1UDkzUnk5Tm9pMHBsS2lWa2dJZ1ZOVWtoWTVoS2xiZFBLc1pMcDZrcnZKODV0WUdHUHFBV1gxblkyUUx2NjQ9PC9TaWduYXR1cmU+DQo8L0xpY2Vuc2U+"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-bundle@sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "bundle_path_digest": "sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-07T08:23:21.756000+00:00",
      "csv_description": "APIMatic CodeGen Operator deploys the APIMatic CodeGen application to Kubernetes and RedHat with all necessary resources and configurations. More information can be found [here](https://github.com/apimatic/apimatic-codegen-operator/blob/main/README.md)",
      "csv_display_name": "APIMatic CodeGen Operator",
      "csv_metadata_description": "API CodeGen Operator deploys the APIMatic CodeGen Application to Kubernetes and OpenShift clusters",
      "csv_name": "apimatic-codegen-operator.v1.9.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:48:41.649000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "apimatic-codegen-operator",
      "provided_apis": [
        {
          "group": "apps.apimatic.io",
          "kind": "CodeGen",
          "plural": "codegens",
          "version": "v1beta2"
        }
      ],
      "provider": "APIMatic.io",
      "related_images": [
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "apimatic-codegen-operator-ubi8-4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e-annotation"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": "<1.9.6",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.9.6",
      "version_original": "1.9.6"
    },
    {
      "_id": "631854ffb3d3587ecb637de9",
      "alm_examples": [
        {
          "api_version": "apps.apimatic.io/v1beta2",
          "kind": "CodeGen",
          "metadata": {
            "name": "codegen-sample"
          },
          "spec": {
            "licenseSpec": {
              "licenseSourceType": "LicenseBlob",
              "licenseSourceValue": "PExpY2Vuc2U+DQogIDxJZD41MDVlNzM4Ny0xZmIxLTQ4ZDQtOGRmMS1iYjk3NGEyNjM2MDM8L0lkPg0KICA8VHlwZT5TdGFuZGFyZDwvVHlwZT4NCiAgPEV4cGlyYXRpb24+RnJpLCAxNyBNYXkgMjA1MiAwNzoxOTozOSBHTVQ8L0V4cGlyYXRpb24+DQogIDxRdWFudGl0eT4yPC9RdWFudGl0eT4NCiAgPFByb2R1Y3RGZWF0dXJlcz4NCiAgICA8RmVhdHVyZSBuYW1lPSJpbXBvcnRGb3JtYXRzIj5BUElCbHVlUHJpbnQsQVBJRWxlbWVudHMsUG9zdG1hbjIsV3NkbCxXQURMMjAwOSxXQURMMjAwNixSYW1sLFJhbWwxMCxTd2FnZ2VyMjAsU3dhZ2dlcllhbWwsU3dhZ2dlcjEwLE9wZW5BcGkzSnNvbixPcGVuQXBpM1lhbWwsSU9Eb2NzLElPRG9jc1YwMzE0LEluc29tbmlhLEluc29tbmlhWWFtbCxSQU1MQXNKc29uLEdvb2dsZURpc2NvdmVyeSxQb3N0bWFuPC9GZWF0dXJlPg0KICAgIDxGZWF0dXJlIG5hbWU9ImV4cG9ydEZvcm1hdHMiPlN3YWdnZXIyMCxTd2FnZ2VyWWFtbCxTd2FnZ2VyMTAsT3BlbkFwaTNKc29uLE9wZW5BcGkzWWFtbCxXc2RsLEFQSUJsdWVQcmludCxBUElFbGVtZW50cyxQb3N0bWFuMixXQURMMjAwOSxXQURMMjAwNixXU0RMLElPRG9jcyxJT0RvY3NWMDMxNCxSQU1MLFJBTUwxMCxHb29nbGVEaXNjb3ZlcnksUG9zdG1hbjIwLEluc29tbmlhLEluc29tbmlhWWFtbDwvRmVhdHVyZT4NCiAgICA8RmVhdHVyZSBuYW1lPSJwbGF0Zm9ybXMiPjwvRmVhdHVyZT4NCiAgPC9Qcm9kdWN0RmVhdHVyZXM+DQogIDxDdXN0b21lcj4NCiAgICA8TmFtZT5EZXZlbG9wZXI8L05hbWU+DQogICAgPEVtYWlsPmRldmVsb3BlckBhcGltYXRpYy5pbzwvRW1haWw+DQogIDwvQ3VzdG9tZXI+DQogIDxTaWduYXR1cmU+TUVVQ0lRRE1yTlY0dE1PUzEwUExiZ1Z0QkVvTHZ6ZGd1UDkzUnk5Tm9pMHBsS2lWa2dJZ1ZOVWtoWTVoS2xiZFBLc1pMcDZrcnZKODV0WUdHUHFBV1gxblkyUUx2NjQ9PC9TaWduYXR1cmU+DQo8L0xpY2Vuc2U+"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-bundle@sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "bundle_path_digest": "sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-07T08:23:27.445000+00:00",
      "csv_description": "APIMatic CodeGen Operator deploys the APIMatic CodeGen application to Kubernetes and RedHat with all necessary resources and configurations. More information can be found [here](https://github.com/apimatic/apimatic-codegen-operator/blob/main/README.md)",
      "csv_display_name": "APIMatic CodeGen Operator",
      "csv_metadata_description": "API CodeGen Operator deploys the APIMatic CodeGen Application to Kubernetes and OpenShift clusters",
      "csv_name": "apimatic-codegen-operator.v1.9.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:42:56.744000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "apimatic-codegen-operator",
      "provided_apis": [
        {
          "group": "apps.apimatic.io",
          "kind": "CodeGen",
          "plural": "codegens",
          "version": "v1beta2"
        }
      ],
      "provider": "APIMatic.io",
      "related_images": [
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "apimatic-codegen-operator-ubi8-4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e-annotation"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": "<1.9.6",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.9.6",
      "version_original": "1.9.6"
    },
    {
      "_id": "63185860ea427da2bb5b3687",
      "alm_examples": [
        {
          "api_version": "apps.apimatic.io/v1beta2",
          "kind": "CodeGen",
          "metadata": {
            "name": "codegen-sample"
          },
          "spec": {
            "licenseSpec": {
              "licenseSourceType": "LicenseBlob",
              "licenseSourceValue": "PExpY2Vuc2U+DQogIDxJZD41MDVlNzM4Ny0xZmIxLTQ4ZDQtOGRmMS1iYjk3NGEyNjM2MDM8L0lkPg0KICA8VHlwZT5TdGFuZGFyZDwvVHlwZT4NCiAgPEV4cGlyYXRpb24+RnJpLCAxNyBNYXkgMjA1MiAwNzoxOTozOSBHTVQ8L0V4cGlyYXRpb24+DQogIDxRdWFudGl0eT4yPC9RdWFudGl0eT4NCiAgPFByb2R1Y3RGZWF0dXJlcz4NCiAgICA8RmVhdHVyZSBuYW1lPSJpbXBvcnRGb3JtYXRzIj5BUElCbHVlUHJpbnQsQVBJRWxlbWVudHMsUG9zdG1hbjIsV3NkbCxXQURMMjAwOSxXQURMMjAwNixSYW1sLFJhbWwxMCxTd2FnZ2VyMjAsU3dhZ2dlcllhbWwsU3dhZ2dlcjEwLE9wZW5BcGkzSnNvbixPcGVuQXBpM1lhbWwsSU9Eb2NzLElPRG9jc1YwMzE0LEluc29tbmlhLEluc29tbmlhWWFtbCxSQU1MQXNKc29uLEdvb2dsZURpc2NvdmVyeSxQb3N0bWFuPC9GZWF0dXJlPg0KICAgIDxGZWF0dXJlIG5hbWU9ImV4cG9ydEZvcm1hdHMiPlN3YWdnZXIyMCxTd2FnZ2VyWWFtbCxTd2FnZ2VyMTAsT3BlbkFwaTNKc29uLE9wZW5BcGkzWWFtbCxXc2RsLEFQSUJsdWVQcmludCxBUElFbGVtZW50cyxQb3N0bWFuMixXQURMMjAwOSxXQURMMjAwNixXU0RMLElPRG9jcyxJT0RvY3NWMDMxNCxSQU1MLFJBTUwxMCxHb29nbGVEaXNjb3ZlcnksUG9zdG1hbjIwLEluc29tbmlhLEluc29tbmlhWWFtbDwvRmVhdHVyZT4NCiAgICA8RmVhdHVyZSBuYW1lPSJwbGF0Zm9ybXMiPjwvRmVhdHVyZT4NCiAgPC9Qcm9kdWN0RmVhdHVyZXM+DQogIDxDdXN0b21lcj4NCiAgICA8TmFtZT5EZXZlbG9wZXI8L05hbWU+DQogICAgPEVtYWlsPmRldmVsb3BlckBhcGltYXRpYy5pbzwvRW1haWw+DQogIDwvQ3VzdG9tZXI+DQogIDxTaWduYXR1cmU+TUVVQ0lRRE1yTlY0dE1PUzEwUExiZ1Z0QkVvTHZ6ZGd1UDkzUnk5Tm9pMHBsS2lWa2dJZ1ZOVWtoWTVoS2xiZFBLc1pMcDZrcnZKODV0WUdHUHFBV1gxblkyUUx2NjQ9PC9TaWduYXR1cmU+DQo8L0xpY2Vuc2U+"
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-bundle@sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "bundle_path_digest": "sha256:ecba9e94c54b77359d110c2d04d11c9b296be5c7831dd457585a028c0c9516d6",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-07T08:37:52.712000+00:00",
      "csv_description": "APIMatic CodeGen Operator deploys the APIMatic CodeGen application to Kubernetes and RedHat with all necessary resources and configurations. More information can be found [here](https://github.com/apimatic/apimatic-codegen-operator/blob/main/README.md)",
      "csv_display_name": "APIMatic CodeGen Operator",
      "csv_metadata_description": "API CodeGen Operator deploys the APIMatic CodeGen Application to Kubernetes and OpenShift clusters",
      "csv_name": "apimatic-codegen-operator.v1.9.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:43:37.591000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "apimatic-codegen-operator",
      "provided_apis": [
        {
          "group": "apps.apimatic.io",
          "kind": "CodeGen",
          "plural": "codegens",
          "version": "v1beta2"
        }
      ],
      "provider": "APIMatic.io",
      "related_images": [
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "apimatic-codegen-operator-ubi8-4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e-annotation"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "image": "registry.connect.redhat.com/apimatic/apimatic-codegen-operator-ubi8@sha256:4bd056986f57384ab4e0df13c026fc7ae7f4b27374816943c4901ca9fae7de2e",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": "<1.9.6",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.9.6",
      "version_original": "1.9.6"
    },
    {
      "_id": "6319fab77122993c713a75ef",
      "alm_examples": [
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Backup",
          "metadata": {
            "name": "backup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-sample"
          },
          "spec": {
            "instances": 3,
            "logLevel": "info",
            "primaryUpdateStrategy": "unsupervised",
            "storage": {
              "size": "1Gi"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Pooler",
          "metadata": {
            "name": "pooler-sample-rw"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "instances": 1,
            "pgbouncer": {
              "poolMode": "session"
            },
            "type": "rw"
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "ScheduledBackup",
          "metadata": {
            "name": "scheduledbackup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "schedule": "0 0 0 * * *"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le",
        "s390x"
      ],
      "bundle_path": "registry.connect.redhat.com/enterprisedb/cloud-native-postgresql@sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "bundle_path_digest": "sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T14:22:47.580000+00:00",
      "csv_description": "EDB Postgres for Kubernetes is an operator designed, developed, and supported by EDB that covers the full \nlifecycle of a highly available Postgres database clusters with a primary/standby architecture, using native\nstreaming replication. It is based on the open source CloudNativePG operator, and provides additional value\nsuch as compatibility with Oracle using EDB Postgres Advanced Server and additional supported platforms such\nas IBM Power and OpenShift.\n\nKey features available include:\n\n* Kubernetes API integration for high availability\n* Self-healing through failover and automated recreation of replicas\n* Capacity management with scale up/down capabilities\n* Planned switchovers for scheduled maintenance\n* Read-only and read-write Kubernetes services definitions\n* Rolling updates for Postgres minor versions and operator upgrades\n* Continuous backup and point-in-time recovery\n* Connection Pooling with PgBouncer\n* Integrated metrics exporter out of the box\n* PostgreSQL replication across multiple Kubernetes clusters\n* Red Hat certified operator for OpenShift\n\nThe operator has been renamed from Cloud Native PostgreSQL. Existing users of Cloud Native PostgreSQL will not\nexperience any change, as the underlying components and resources have not changed.\n",
      "csv_display_name": "EDB Postgres for Kubernetes",
      "csv_metadata_description": "Operator to manage Postgres high availability clusters with a primary/standby architecture.",
      "csv_name": "cloud-native-postgresql.v1.16.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:43:05.662000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "cloud-native-postgresql",
      "provided_apis": [
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Pooler",
          "plural": "poolers",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "ScheduledBackup",
          "plural": "scheduledbackups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Cluster",
          "plural": "clusters",
          "version": "v1"
        }
      ],
      "provider": "EnterpriseDB Corporation",
      "related_images": [
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "cloud-native-postgresql-fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f-annotation"
        },
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": ">=1.15.3 < 1.16.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.16.2",
      "version_original": "1.16.2"
    },
    {
      "_id": "6319fafb649384639b988919",
      "alm_examples": [
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Backup",
          "metadata": {
            "name": "backup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-sample"
          },
          "spec": {
            "instances": 3,
            "logLevel": "info",
            "primaryUpdateStrategy": "unsupervised",
            "storage": {
              "size": "1Gi"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Pooler",
          "metadata": {
            "name": "pooler-sample-rw"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "instances": 1,
            "pgbouncer": {
              "poolMode": "session"
            },
            "type": "rw"
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "ScheduledBackup",
          "metadata": {
            "name": "scheduledbackup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "schedule": "0 0 0 * * *"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le",
        "s390x"
      ],
      "bundle_path": "registry.connect.redhat.com/enterprisedb/cloud-native-postgresql@sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "bundle_path_digest": "sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T14:23:55.434000+00:00",
      "csv_description": "EDB Postgres for Kubernetes is an operator designed, developed, and supported by EDB that covers the full \nlifecycle of a highly available Postgres database clusters with a primary/standby architecture, using native\nstreaming replication. It is based on the open source CloudNativePG operator, and provides additional value\nsuch as compatibility with Oracle using EDB Postgres Advanced Server and additional supported platforms such\nas IBM Power and OpenShift.\n\nKey features available include:\n\n* Kubernetes API integration for high availability\n* Self-healing through failover and automated recreation of replicas\n* Capacity management with scale up/down capabilities\n* Planned switchovers for scheduled maintenance\n* Read-only and read-write Kubernetes services definitions\n* Rolling updates for Postgres minor versions and operator upgrades\n* Continuous backup and point-in-time recovery\n* Connection Pooling with PgBouncer\n* Integrated metrics exporter out of the box\n* PostgreSQL replication across multiple Kubernetes clusters\n* Red Hat certified operator for OpenShift\n\nThe operator has been renamed from Cloud Native PostgreSQL. Existing users of Cloud Native PostgreSQL will not\nexperience any change, as the underlying components and resources have not changed.\n",
      "csv_display_name": "EDB Postgres for Kubernetes",
      "csv_metadata_description": "Operator to manage Postgres high availability clusters with a primary/standby architecture.",
      "csv_name": "cloud-native-postgresql.v1.16.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:03:31.113000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "cloud-native-postgresql",
      "provided_apis": [
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Backup",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Cluster",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Pooler",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "ScheduledBackup",
          "version": "v1"
        }
      ],
      "provider": "EnterpriseDB Corporation",
      "related_images": [
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "cloud-native-postgresql-fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f-annotation"
        },
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": ">=1.15.3 < 1.16.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "1.16.2",
      "version_original": "1.16.2"
    },
    {
      "_id": "6319fb242b0e562c41686ab6",
      "alm_examples": [
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Backup",
          "metadata": {
            "name": "backup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-sample"
          },
          "spec": {
            "instances": 3,
            "logLevel": "info",
            "primaryUpdateStrategy": "unsupervised",
            "storage": {
              "size": "1Gi"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Pooler",
          "metadata": {
            "name": "pooler-sample-rw"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "instances": 1,
            "pgbouncer": {
              "poolMode": "session"
            },
            "type": "rw"
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "ScheduledBackup",
          "metadata": {
            "name": "scheduledbackup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "schedule": "0 0 0 * * *"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le",
        "s390x"
      ],
      "bundle_path": "registry.connect.redhat.com/enterprisedb/cloud-native-postgresql@sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "bundle_path_digest": "sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T14:24:36.828000+00:00",
      "csv_description": "EDB Postgres for Kubernetes is an operator designed, developed, and supported by EDB that covers the full \nlifecycle of a highly available Postgres database clusters with a primary/standby architecture, using native\nstreaming replication. It is based on the open source CloudNativePG operator, and provides additional value\nsuch as compatibility with Oracle using EDB Postgres Advanced Server and additional supported platforms such\nas IBM Power and OpenShift.\n\nKey features available include:\n\n* Kubernetes API integration for high availability\n* Self-healing through failover and automated recreation of replicas\n* Capacity management with scale up/down capabilities\n* Planned switchovers for scheduled maintenance\n* Read-only and read-write Kubernetes services definitions\n* Rolling updates for Postgres minor versions and operator upgrades\n* Continuous backup and point-in-time recovery\n* Connection Pooling with PgBouncer\n* Integrated metrics exporter out of the box\n* PostgreSQL replication across multiple Kubernetes clusters\n* Red Hat certified operator for OpenShift\n\nThe operator has been renamed from Cloud Native PostgreSQL. Existing users of Cloud Native PostgreSQL will not\nexperience any change, as the underlying components and resources have not changed.\n",
      "csv_display_name": "EDB Postgres for Kubernetes",
      "csv_metadata_description": "Operator to manage Postgres high availability clusters with a primary/standby architecture.",
      "csv_name": "cloud-native-postgresql.v1.16.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:46:10.929000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "cloud-native-postgresql",
      "provided_apis": [
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Pooler",
          "plural": "poolers",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "ScheduledBackup",
          "plural": "scheduledbackups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Cluster",
          "plural": "clusters",
          "version": "v1"
        }
      ],
      "provider": "EnterpriseDB Corporation",
      "related_images": [
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "cloud-native-postgresql-fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f-annotation"
        },
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": ">=1.15.3 < 1.16.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.16.2",
      "version_original": "1.16.2"
    },
    {
      "_id": "6319fb8cec6f9987c2997350",
      "alm_examples": [
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Backup",
          "metadata": {
            "name": "backup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-sample"
          },
          "spec": {
            "instances": 3,
            "logLevel": "info",
            "primaryUpdateStrategy": "unsupervised",
            "storage": {
              "size": "1Gi"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Pooler",
          "metadata": {
            "name": "pooler-sample-rw"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "instances": 1,
            "pgbouncer": {
              "poolMode": "session"
            },
            "type": "rw"
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "ScheduledBackup",
          "metadata": {
            "name": "scheduledbackup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "schedule": "0 0 0 * * *"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le",
        "s390x"
      ],
      "bundle_path": "registry.connect.redhat.com/enterprisedb/cloud-native-postgresql@sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "bundle_path_digest": "sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T14:26:20.824000+00:00",
      "csv_description": "EDB Postgres for Kubernetes is an operator designed, developed, and supported by EDB that covers the full \nlifecycle of a highly available Postgres database clusters with a primary/standby architecture, using native\nstreaming replication. It is based on the open source CloudNativePG operator, and provides additional value\nsuch as compatibility with Oracle using EDB Postgres Advanced Server and additional supported platforms such\nas IBM Power and OpenShift.\n\nKey features available include:\n\n* Kubernetes API integration for high availability\n* Self-healing through failover and automated recreation of replicas\n* Capacity management with scale up/down capabilities\n* Planned switchovers for scheduled maintenance\n* Read-only and read-write Kubernetes services definitions\n* Rolling updates for Postgres minor versions and operator upgrades\n* Continuous backup and point-in-time recovery\n* Connection Pooling with PgBouncer\n* Integrated metrics exporter out of the box\n* PostgreSQL replication across multiple Kubernetes clusters\n* Red Hat certified operator for OpenShift\n\nThe operator has been renamed from Cloud Native PostgreSQL. Existing users of Cloud Native PostgreSQL will not\nexperience any change, as the underlying components and resources have not changed.\n",
      "csv_display_name": "EDB Postgres for Kubernetes",
      "csv_metadata_description": "Operator to manage Postgres high availability clusters with a primary/standby architecture.",
      "csv_name": "cloud-native-postgresql.v1.16.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:02:23.317000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "cloud-native-postgresql",
      "provided_apis": [
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Cluster",
          "plural": "clusters",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Pooler",
          "plural": "poolers",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "ScheduledBackup",
          "plural": "scheduledbackups",
          "version": "v1"
        }
      ],
      "provider": "EnterpriseDB Corporation",
      "related_images": [
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "cloud-native-postgresql-fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f-annotation"
        },
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": ">=1.15.3 < 1.16.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.16.2",
      "version_original": "1.16.2"
    },
    {
      "_id": "6319fcbe69a273f0af2b1ea5",
      "alm_examples": [
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Backup",
          "metadata": {
            "name": "backup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-sample"
          },
          "spec": {
            "instances": 3,
            "logLevel": "info",
            "primaryUpdateStrategy": "unsupervised",
            "storage": {
              "size": "1Gi"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Pooler",
          "metadata": {
            "name": "pooler-sample-rw"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "instances": 1,
            "pgbouncer": {
              "poolMode": "session"
            },
            "type": "rw"
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "ScheduledBackup",
          "metadata": {
            "name": "scheduledbackup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "schedule": "0 0 0 * * *"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le",
        "s390x"
      ],
      "bundle_path": "registry.connect.redhat.com/enterprisedb/cloud-native-postgresql@sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "bundle_path_digest": "sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T14:31:26.422000+00:00",
      "csv_description": "EDB Postgres for Kubernetes is an operator designed, developed, and supported by EDB that covers the full \nlifecycle of a highly available Postgres database clusters with a primary/standby architecture, using native\nstreaming replication. It is based on the open source CloudNativePG operator, and provides additional value\nsuch as compatibility with Oracle using EDB Postgres Advanced Server and additional supported platforms such\nas IBM Power and OpenShift.\n\nKey features available include:\n\n* Kubernetes API integration for high availability\n* Self-healing through failover and automated recreation of replicas\n* Capacity management with scale up/down capabilities\n* Planned switchovers for scheduled maintenance\n* Read-only and read-write Kubernetes services definitions\n* Rolling updates for Postgres minor versions and operator upgrades\n* Continuous backup and point-in-time recovery\n* Connection Pooling with PgBouncer\n* Integrated metrics exporter out of the box\n* PostgreSQL replication across multiple Kubernetes clusters\n* Red Hat certified operator for OpenShift\n\nThe operator has been renamed from Cloud Native PostgreSQL. Existing users of Cloud Native PostgreSQL will not\nexperience any change, as the underlying components and resources have not changed.\n",
      "csv_display_name": "EDB Postgres for Kubernetes",
      "csv_metadata_description": "Operator to manage Postgres high availability clusters with a primary/standby architecture.",
      "csv_name": "cloud-native-postgresql.v1.16.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:45:39.323000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "cloud-native-postgresql",
      "provided_apis": [
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Pooler",
          "plural": "poolers",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "ScheduledBackup",
          "plural": "scheduledbackups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Cluster",
          "plural": "clusters",
          "version": "v1"
        }
      ],
      "provider": "EnterpriseDB Corporation",
      "related_images": [
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "cloud-native-postgresql-fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f-annotation"
        },
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": ">=1.15.3 < 1.16.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.16.2",
      "version_original": "1.16.2"
    },
    {
      "_id": "6319fdfce5ee24344c97912a",
      "alm_examples": [
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Backup",
          "metadata": {
            "name": "backup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-sample"
          },
          "spec": {
            "instances": 3,
            "logLevel": "info",
            "primaryUpdateStrategy": "unsupervised",
            "storage": {
              "size": "1Gi"
            }
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Pooler",
          "metadata": {
            "name": "pooler-sample-rw"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "instances": 1,
            "pgbouncer": {
              "poolMode": "session"
            },
            "type": "rw"
          }
        },
        {
          "api_version": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "ScheduledBackup",
          "metadata": {
            "name": "scheduledbackup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "schedule": "0 0 0 * * *"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le",
        "s390x"
      ],
      "bundle_path": "registry.connect.redhat.com/enterprisedb/cloud-native-postgresql@sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "bundle_path_digest": "sha256:29d2bdf940600526db9e348680f4b0c6a441b159d5c7601480a93d840862e405",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T14:36:44.190000+00:00",
      "csv_description": "EDB Postgres for Kubernetes is an operator designed, developed, and supported by EDB that covers the full \nlifecycle of a highly available Postgres database clusters with a primary/standby architecture, using native\nstreaming replication. It is based on the open source CloudNativePG operator, and provides additional value\nsuch as compatibility with Oracle using EDB Postgres Advanced Server and additional supported platforms such\nas IBM Power and OpenShift.\n\nKey features available include:\n\n* Kubernetes API integration for high availability\n* Self-healing through failover and automated recreation of replicas\n* Capacity management with scale up/down capabilities\n* Planned switchovers for scheduled maintenance\n* Read-only and read-write Kubernetes services definitions\n* Rolling updates for Postgres minor versions and operator upgrades\n* Continuous backup and point-in-time recovery\n* Connection Pooling with PgBouncer\n* Integrated metrics exporter out of the box\n* PostgreSQL replication across multiple Kubernetes clusters\n* Red Hat certified operator for OpenShift\n\nThe operator has been renamed from Cloud Native PostgreSQL. Existing users of Cloud Native PostgreSQL will not\nexperience any change, as the underlying components and resources have not changed.\n",
      "csv_display_name": "EDB Postgres for Kubernetes",
      "csv_metadata_description": "Operator to manage Postgres high availability clusters with a primary/standby architecture.",
      "csv_name": "cloud-native-postgresql.v1.16.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:29:59.215000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "cloud-native-postgresql",
      "provided_apis": [
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "ScheduledBackup",
          "plural": "scheduledbackups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Backup",
          "plural": "backups",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Cluster",
          "plural": "clusters",
          "version": "v1"
        },
        {
          "group": "postgresql.k8s.enterprisedb.io",
          "kind": "Pooler",
          "plural": "poolers",
          "version": "v1"
        }
      ],
      "provider": "EnterpriseDB Corporation",
      "related_images": [
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "cloud-native-postgresql-fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f-annotation"
        },
        {
          "digest": "sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "image": "quay.io/enterprisedb/cloud-native-postgresql@sha256:fc031fc001d857f5ba22c2bf776521318c1bfee07f9928f8767829c7d0877b2f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": ">=1.15.3 < 1.16.2",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.16.2",
      "version_original": "1.16.2"
    },
    {
      "_id": "631a19df7beba81ffd6f9f31",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T16:35:43.550000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:40:56.109000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a19e07b4a446557978fc9",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T16:35:44.740000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:40:59.303000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a19e1649384639b989720",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T16:35:45.126000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:41:08.606000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1c9b778c198f6e686067",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T16:47:23.365000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:43:50.948000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1cabad2e331948d10c54",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T16:47:39.299000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:43:54.884000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1cb0778c198f6e68607c",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T16:47:44.007000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:43:59.376000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1dd698244e6fcd9876ed",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T16:52:38.429000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:46:16.024000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1dd698244e6fcd9876ef",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T16:52:38.879000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:52:22.046000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1dd7e0886f15d82b1d96",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T16:52:39.313000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:32:40.598000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1ed7cc56faa0a4996404",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T16:56:55.369000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:02:02.140000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1ed88fb97f44736f9c8b",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T16:56:56.013000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:05:23.936000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a1ee2cc56faa0a4996409",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T16:57:06.916000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:31:58.776000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a210577e4229ab49876f0",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T17:06:13.900000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:04:16.890000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a2109778c198f6e6861fb",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T17:06:17.226000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:04:22.558000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a210c8fb97f44736f9d47",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T17:06:20.598000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:04:27.330000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a2117ea1e7e6bc02b1df3",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T17:06:31.503000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:31:00.910000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a2127ea1e7e6bc02b1df7",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T17:06:47.267000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:29:39.804000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a2127778c198f6e68620c",
      "alm_examples": [
        {
          "api_version": "bookkeeper.streamnative.io/v1alpha1",
          "kind": "BookKeeperCluster",
          "metadata": {
            "name": "bookkeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/bookkeeper-operator-bundle@sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "bundle_path_digest": "sha256:9a440c5ebc41c9563b5fcf3f6adc7c2257c08cfa125b403ab461631a82faed66",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T17:06:47.801000+00:00",
      "csv_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes and automates tasks related to operating a Bookkeeper cluster. It provides a full management life-cycle for BookKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage BookKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool\n",
      "csv_display_name": "BookKeeper Operator",
      "csv_metadata_description": "The BookKeeper Operator manages BookKeeper clusters deployed to Kubernetes",
      "csv_name": "bookkeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:55:17.574000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "bookkeeper-operator",
      "provided_apis": [
        {
          "group": "bookkeeper.streamnative.io",
          "kind": "BookKeeperCluster",
          "plural": "bookkeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "bookkeeper-operator-1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "image": "quay.io/streamnativeio/bookkeeper-operator@sha256:1c2e5c59ae472cba31908bde8545a43583164d798b2565a26967b35a7752c308",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a23811038925a7e3a74a7",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T17:16:49.153000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:12:27.700000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a2381778c198f6e6862d2",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T17:16:49.580000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:12:33.925000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a238122883e0adad10d11",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T17:16:49.967000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:12:40.403000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a250377e4229ab498782d",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T17:23:15.933000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:14:22.253000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a250ccc56faa0a4996608",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T17:23:24.370000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:06:55.070000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a2510cc56faa0a499660b",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T17:23:28.087000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:35:22.034000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a2617cc56faa0a4996673",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T17:27:51.852000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:43:59.387000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a26193c54e817ac978f86",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T17:27:53.572000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:40:47.291000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a261a541dec4e752b1e05",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T17:27:54.140000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:54:57.606000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a27cd77e4229ab4987956",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "beta",
      "creation_date": "2022-09-08T17:35:09.165000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:56:53.041000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a27cdcc56faa0a4996733",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T17:35:09.754000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:41:33.715000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a27ceb75cf9b446d10c5c",
      "alm_examples": [
        {
          "api_version": "zookeeper.streamnative.io/v1alpha1",
          "kind": "ZooKeeperCluster",
          "metadata": {
            "name": "zookeepercluster-sample"
          },
          "spec": {
            "foo": "bar"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/streamnative/zookeeper-operator-bundle@sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "bundle_path_digest": "sha256:3df1296c086435b79b12630787873333654ec83b914d7b0fa90f84dd4660a035",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T17:35:10.251000+00:00",
      "csv_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes and automates tasks related to operating a ZooKeeper cluster. It provides a full management life-cycle for ZooKeeper, including deployment, upgrades, scaling, and configuration changes. You can manage ZooKeeper clusters using the Kubernetes Application Programming Interface (API) and the kubectl tool.\n",
      "csv_display_name": "ZooKeeper Operator",
      "csv_metadata_description": "The ZooKeeper Operator manages ZooKeeper clusters deployed to Kubernetes.",
      "csv_name": "zookeeper-operator.v0.12.2",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:05:11.684000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "zookeeper-operator",
      "provided_apis": [
        {
          "group": "zookeeper.streamnative.io",
          "kind": "ZooKeeperCluster",
          "plural": "zookeeperclusters",
          "version": "v1alpha1"
        }
      ],
      "provider": "StreamNative",
      "related_images": [
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "zookeeper-operator-ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2-annotation"
        },
        {
          "digest": "sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "image": "quay.io/streamnativeio/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "image": "quay.io/streamnativeio/zookeeper-operator@sha256:ea7b0e36452ba80e7020af4c2b86f95bc26d28821c73e3e845eba4c0cf2cabc2",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "0.12.2",
      "version_original": "0.12.2"
    },
    {
      "_id": "631a5773cf58b14c11978c9c",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T20:58:27.927000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:57:39.298000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5787cf58b14c11978ca2",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T20:58:47.387000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:57:44.778000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a583ff34fd628ee685bae",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T21:01:51.299000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:05:35.351000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5846f1c98d3072d10ba6",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T21:01:58.391000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:04:35.245000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5852636a6a6ed32b1dbf",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T21:02:10.953000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T12:03:02.433000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5853f1c98d3072d10baf",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T21:02:11.399000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:03:08.558000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5a134bef971b1a7b03c4",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T21:09:39.153000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:51:13.822000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5a1390cf589f5a9962da",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T21:09:39.851000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:55:44.193000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5acfcf58b14c11978d2a",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T21:12:47.623000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:35:36.901000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5ad51028e6893b3a75b6",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T21:12:53.120000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:07:27.803000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5c6ff1c98d3072d10ca3",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-08T21:19:43.081000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-09-19T11:36:38.644000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631a5c70636a6a6ed32b1ef1",
      "alm_examples": [
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageCluster",
          "metadata": {
            "annotations": {
              "portworx.io/is-openshift": "true"
            },
            "name": "portworx",
            "namespace": "test-operator"
          },
          "spec": {}
        },
        {
          "api_version": "core.libopenstorage.org/v1",
          "kind": "StorageNode",
          "metadata": {
            "name": "example",
            "namespace": "test-operator"
          },
          "spec": {}
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portworx/portworx-certified-bundle@sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "bundle_path_digest": "sha256:d5ac56a6085190ca9ce357395a84e588b0551e6d0a8af46264c91126b1f1e230",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-08T21:19:44.914000+00:00",
      "csv_description": "Portworx-Enterprise is the most widely-used and reliable cloud-native\nstorage solution for production workloads and provides high-availability,\ndata protection and security for containerized applications.\n\nPortworx Enterprise enables you to migrate entire applications, including\ndata, between clusters in a single data center or cloud, or between clouds,\nwith a single kubectl command.\n\nThe cloud native storage and data management platform that enterprises trust\nto manage data in containers now has an operator which simplifies the install,\nconfiguration, upgrades and manages the Portworx Enterprise cluster lifecycle.\n\nLearn more about the Portworx Enterprise\n[the data platform for Kubernetes](https://portworx.com/products/introduction)\n\nTo learn more about the platform features, please visit our\n[product features page](https://portworx.com/products/features)\n\n### About Portworx\n\nPortworx is the solution for running stateful containers in production,\ndesigned with DevOps in mind. With Portworx, users can manage any database\nor stateful service on any infrastructure using any container scheduler,\nincluding Kubernetes, Mesosphere DC/OS, and Docker Swarm. Portworx solves\nthe five most common problems DevOps teams encounter when running stateful\nservices in production: persistence, high availability, data automation,\nsecurity, and support for multiple data stores and infrastructure.\n\n### How to install StorageCluster\n\nTo customize your cluster's configuration (specification), use the\n[Spec Generator](https://central.portworx.com/) from PX-Central.\n\n### Prerequisite\n\nEnsure ports 17001-17020 on worker nodes are reachable from master and other worker nodes.\n\n### Tutorials\n\n* [Portworx Enterprise on Openshift](https://portworx.com/openshift)\n\n* [Stateful applications on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes/application-install-with-kubernetes)\n\n* [Portworx Enterprise on Kubernetes](https://docs.portworx.com/portworx-install-with-kubernetes)\n\n* [Kafka on Kubernetes](https://portworx.com/kafka-kubernetes)\n\n* [Elastisearch on Kubernetes](https://portworx.com/elasticsearch-kubernetes)\n\n* [PostgreSQL on Kubernetes](https://portworx.com/postgres-kubernetes/)\n\n* [MongoDB on Kubernetes](https://portworx.com/mongodb-kubernetes/)\n\n* [Cassandra on Kubernetes](https://portworx.com/cassandra-kubernetes/)\n\n* [Kubernetes backup and recovery](https://portworx.com/kubernetes-backup/)\n\n* [Disaster Recovery for Kubernetes](https://portworx.com/kubernetes-disaster-recovery/)\n\n### Uninstall\n\nDeleting the StorageCluster object for Portworx cluster does not stop Portworx\nservice running on the nodes, to avoid application downtime.\n\nTo uninstall Portworx completely without wiping the data, you should add the\nfollowing delete strategy to the StorageCluster spec:\n```\nspec:\n  deleteStrategy:\n    type: Uninstall\n```\n**Caution:** To uninstall Portworx and **wipe all the data**, you should use the following\ndelete strategy:\n```\nspec:\n  deleteStrategy:\n    type: UninstallAndWipe\n```\n",
      "csv_display_name": "Portworx Enterprise",
      "csv_metadata_description": "Cloud native storage solution for production workloads",
      "csv_name": "portworx-operator.v1.9.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:37:34.359000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "portworx-certified",
      "provided_apis": [
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageNode",
          "plural": "storagenodes",
          "version": "v1alpha1"
        },
        {
          "group": "core.libopenstorage.org",
          "kind": "StorageCluster",
          "plural": "storageclusters",
          "version": "v1"
        }
      ],
      "provider": "Portworx",
      "related_images": [
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "openstorage-operator-9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089-annotation"
        },
        {
          "digest": "sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "image": "registry.connect.redhat.com/portworx/openstorage-operator@sha256:9971d9ddce03e9c174dbd2acd6904c89b0bdba4a9c61ea5223569bcd2972b089",
          "name": "portworx-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.9.1",
      "version_original": "1.9.1"
    },
    {
      "_id": "631b01e1848914dd3f3a832d",
      "alm_examples": [
        {
          "api_version": "apps.gitlab.com/v1beta2",
          "kind": "Runner",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "gitlabUrl": "https://gitlab.com",
            "imagePullPolicy": "Always",
            "tags": "openshift, test",
            "token": "gitlab-dev-runner-secret"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le"
      ],
      "bundle_path": "registry.connect.redhat.com/gitlab/gitlab-runner-operator-bundle@sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "bundle_path_digest": "sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "capabilities": [
        "Deep Insights"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-09T09:05:37.161000+00:00",
      "csv_description": "GitLab Runner is the lightweight, highly-scalable agent that runs your build jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.\n\nThe GitLab Runner operator manages the lifecycle of GitLab Runner in Kubernetes or Openshift clusters. The operator aims to automate the tasks needed to run your CI/CD jobs in your container orchestration platform.\n\n## Prerequisites\n\n  Install cert-manager:\n\n  ```shell\n  kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\n  ```\n\n## GitLab Runner version\n\nThis version of **GitLab Runner Operator** ships with **GitLab Runner v15.2.1**.\n\nTo use a different version of **GitLab Runner** change the [`runnerImage` and `helperImage` properties](https://docs.gitlab.com/runner/configuration/configuring_runner_operator.html#operator-properties).\n\n## Usage\n\n To link a GitLab Runner instance to a self-hosted GitLab instance or the hosted [GitLab](https://gitlab.com), you first need to:\n\n 1. Create a secret containing the `runner-registration-token` from your GitLab project.\n\n   ```\n  cat > gitlab-runner-secret.yml << EOF\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: gitlab-runner-secret\n  type: Opaque\n  stringData:\n    runner-registration-token: REPLACE_ME # your project runner secret\n  EOF\n  ```\n\n  ```\n  oc apply -f gitlab-runner-secret.yml\n  ```\n\n 2. Create the Custom Resource Definition (CRD) file and include the following information. The tags value must be openshift for the job to run.\n\n   ```\n   cat > gitlab-runner.yml << EOF\n   apiVersion: apps.gitlab.com/v1beta2\n   kind: Runner\n   metadata:\n     name: gitlab-runner\n   spec:\n     gitlabUrl: https://gitlab.example.com\n     buildImage: alpine\n     token: gitlab-runner-secret\n     tags: openshift\n   EOF\n   ```\n\n  ```\n  oc apply -f gitlab-runner.yml\n  ```\n\n## Full documentation\n\nVisit [Install GitLab Runner Operator](https://docs.gitlab.com/runner/install/operator.html)\n",
      "csv_display_name": "GitLab Runner",
      "csv_metadata_description": "GitLab Runner operator manages lifecycle of GitLab Runner instances",
      "csv_name": "gitlab-runner-operator.v1.10.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:46:05.545000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "gitlab-runner-operator",
      "provided_apis": [
        {
          "group": "apps.gitlab.com",
          "kind": "Runner",
          "plural": "runners",
          "version": "v1beta2"
        }
      ],
      "provider": "GitLab, Inc.",
      "related_images": [
        {
          "digest": "sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-ocp@sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "name": "gitlab-runner"
        },
        {
          "digest": "sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-helper-ocp@sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "name": "gitlab-runner-helper"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gitlab-runner-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gl-openshift/gitlab-runner-operator/gitlab-runner-operator-8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409-annotation"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.10.0",
      "version_original": "1.10.0"
    },
    {
      "_id": "631b01f884467d3a677b0a9c",
      "alm_examples": [
        {
          "api_version": "apps.gitlab.com/v1beta2",
          "kind": "Runner",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "gitlabUrl": "https://gitlab.com",
            "imagePullPolicy": "Always",
            "tags": "openshift, test",
            "token": "gitlab-dev-runner-secret"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le"
      ],
      "bundle_path": "registry.connect.redhat.com/gitlab/gitlab-runner-operator-bundle@sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "bundle_path_digest": "sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "capabilities": [
        "Deep Insights"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-09T09:06:00.929000+00:00",
      "csv_description": "GitLab Runner is the lightweight, highly-scalable agent that runs your build jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.\n\nThe GitLab Runner operator manages the lifecycle of GitLab Runner in Kubernetes or Openshift clusters. The operator aims to automate the tasks needed to run your CI/CD jobs in your container orchestration platform.\n\n## Prerequisites\n\n  Install cert-manager:\n\n  ```shell\n  kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\n  ```\n\n## GitLab Runner version\n\nThis version of **GitLab Runner Operator** ships with **GitLab Runner v15.2.1**.\n\nTo use a different version of **GitLab Runner** change the [`runnerImage` and `helperImage` properties](https://docs.gitlab.com/runner/configuration/configuring_runner_operator.html#operator-properties).\n\n## Usage\n\n To link a GitLab Runner instance to a self-hosted GitLab instance or the hosted [GitLab](https://gitlab.com), you first need to:\n\n 1. Create a secret containing the `runner-registration-token` from your GitLab project.\n\n   ```\n  cat > gitlab-runner-secret.yml << EOF\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: gitlab-runner-secret\n  type: Opaque\n  stringData:\n    runner-registration-token: REPLACE_ME # your project runner secret\n  EOF\n  ```\n\n  ```\n  oc apply -f gitlab-runner-secret.yml\n  ```\n\n 2. Create the Custom Resource Definition (CRD) file and include the following information. The tags value must be openshift for the job to run.\n\n   ```\n   cat > gitlab-runner.yml << EOF\n   apiVersion: apps.gitlab.com/v1beta2\n   kind: Runner\n   metadata:\n     name: gitlab-runner\n   spec:\n     gitlabUrl: https://gitlab.example.com\n     buildImage: alpine\n     token: gitlab-runner-secret\n     tags: openshift\n   EOF\n   ```\n\n  ```\n  oc apply -f gitlab-runner.yml\n  ```\n\n## Full documentation\n\nVisit [Install GitLab Runner Operator](https://docs.gitlab.com/runner/install/operator.html)\n",
      "csv_display_name": "GitLab Runner",
      "csv_metadata_description": "GitLab Runner operator manages lifecycle of GitLab Runner instances",
      "csv_name": "gitlab-runner-operator.v1.10.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:50:09.823000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "gitlab-runner-operator",
      "provided_apis": [
        {
          "group": "apps.gitlab.com",
          "kind": "Runner",
          "plural": "runners",
          "version": "v1beta2"
        }
      ],
      "provider": "GitLab, Inc.",
      "related_images": [
        {
          "digest": "sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-ocp@sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "name": "gitlab-runner"
        },
        {
          "digest": "sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-helper-ocp@sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "name": "gitlab-runner-helper"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gitlab-runner-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gl-openshift/gitlab-runner-operator/gitlab-runner-operator-8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409-annotation"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.10.0",
      "version_original": "1.10.0"
    },
    {
      "_id": "631b028bbed05a6252d11a88",
      "alm_examples": [
        {
          "api_version": "apps.gitlab.com/v1beta2",
          "kind": "Runner",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "gitlabUrl": "https://gitlab.com",
            "imagePullPolicy": "Always",
            "tags": "openshift, test",
            "token": "gitlab-dev-runner-secret"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le"
      ],
      "bundle_path": "registry.connect.redhat.com/gitlab/gitlab-runner-operator-bundle@sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "bundle_path_digest": "sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "capabilities": [
        "Deep Insights"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-09T09:08:27.833000+00:00",
      "csv_description": "GitLab Runner is the lightweight, highly-scalable agent that runs your build jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.\n\nThe GitLab Runner operator manages the lifecycle of GitLab Runner in Kubernetes or Openshift clusters. The operator aims to automate the tasks needed to run your CI/CD jobs in your container orchestration platform.\n\n## Prerequisites\n\n  Install cert-manager:\n\n  ```shell\n  kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\n  ```\n\n## GitLab Runner version\n\nThis version of **GitLab Runner Operator** ships with **GitLab Runner v15.2.1**.\n\nTo use a different version of **GitLab Runner** change the [`runnerImage` and `helperImage` properties](https://docs.gitlab.com/runner/configuration/configuring_runner_operator.html#operator-properties).\n\n## Usage\n\n To link a GitLab Runner instance to a self-hosted GitLab instance or the hosted [GitLab](https://gitlab.com), you first need to:\n\n 1. Create a secret containing the `runner-registration-token` from your GitLab project.\n\n   ```\n  cat > gitlab-runner-secret.yml << EOF\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: gitlab-runner-secret\n  type: Opaque\n  stringData:\n    runner-registration-token: REPLACE_ME # your project runner secret\n  EOF\n  ```\n\n  ```\n  oc apply -f gitlab-runner-secret.yml\n  ```\n\n 2. Create the Custom Resource Definition (CRD) file and include the following information. The tags value must be openshift for the job to run.\n\n   ```\n   cat > gitlab-runner.yml << EOF\n   apiVersion: apps.gitlab.com/v1beta2\n   kind: Runner\n   metadata:\n     name: gitlab-runner\n   spec:\n     gitlabUrl: https://gitlab.example.com\n     buildImage: alpine\n     token: gitlab-runner-secret\n     tags: openshift\n   EOF\n   ```\n\n  ```\n  oc apply -f gitlab-runner.yml\n  ```\n\n## Full documentation\n\nVisit [Install GitLab Runner Operator](https://docs.gitlab.com/runner/install/operator.html)\n",
      "csv_display_name": "GitLab Runner",
      "csv_metadata_description": "GitLab Runner operator manages lifecycle of GitLab Runner instances",
      "csv_name": "gitlab-runner-operator.v1.10.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:18:41.231000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "gitlab-runner-operator",
      "provided_apis": [
        {
          "group": "apps.gitlab.com",
          "kind": "Runner",
          "plural": "runners",
          "version": "v1beta2"
        }
      ],
      "provider": "GitLab, Inc.",
      "related_images": [
        {
          "digest": "sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-ocp@sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "name": "gitlab-runner"
        },
        {
          "digest": "sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-helper-ocp@sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "name": "gitlab-runner-helper"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gitlab-runner-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gl-openshift/gitlab-runner-operator/gitlab-runner-operator-8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409-annotation"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.10.0",
      "version_original": "1.10.0"
    },
    {
      "_id": "631b061b9435773fe1d10c1e",
      "alm_examples": [
        {
          "api_version": "apps.gitlab.com/v1beta2",
          "kind": "Runner",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "gitlabUrl": "https://gitlab.com",
            "imagePullPolicy": "Always",
            "tags": "openshift, test",
            "token": "gitlab-dev-runner-secret"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le"
      ],
      "bundle_path": "registry.connect.redhat.com/gitlab/gitlab-runner-operator-bundle@sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "bundle_path_digest": "sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "capabilities": [
        "Deep Insights"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-09T09:23:39.694000+00:00",
      "csv_description": "GitLab Runner is the lightweight, highly-scalable agent that runs your build jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.\n\nThe GitLab Runner operator manages the lifecycle of GitLab Runner in Kubernetes or Openshift clusters. The operator aims to automate the tasks needed to run your CI/CD jobs in your container orchestration platform.\n\n## Prerequisites\n\n  Install cert-manager:\n\n  ```shell\n  kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\n  ```\n\n## GitLab Runner version\n\nThis version of **GitLab Runner Operator** ships with **GitLab Runner v15.2.1**.\n\nTo use a different version of **GitLab Runner** change the [`runnerImage` and `helperImage` properties](https://docs.gitlab.com/runner/configuration/configuring_runner_operator.html#operator-properties).\n\n## Usage\n\n To link a GitLab Runner instance to a self-hosted GitLab instance or the hosted [GitLab](https://gitlab.com), you first need to:\n\n 1. Create a secret containing the `runner-registration-token` from your GitLab project.\n\n   ```\n  cat > gitlab-runner-secret.yml << EOF\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: gitlab-runner-secret\n  type: Opaque\n  stringData:\n    runner-registration-token: REPLACE_ME # your project runner secret\n  EOF\n  ```\n\n  ```\n  oc apply -f gitlab-runner-secret.yml\n  ```\n\n 2. Create the Custom Resource Definition (CRD) file and include the following information. The tags value must be openshift for the job to run.\n\n   ```\n   cat > gitlab-runner.yml << EOF\n   apiVersion: apps.gitlab.com/v1beta2\n   kind: Runner\n   metadata:\n     name: gitlab-runner\n   spec:\n     gitlabUrl: https://gitlab.example.com\n     buildImage: alpine\n     token: gitlab-runner-secret\n     tags: openshift\n   EOF\n   ```\n\n  ```\n  oc apply -f gitlab-runner.yml\n  ```\n\n## Full documentation\n\nVisit [Install GitLab Runner Operator](https://docs.gitlab.com/runner/install/operator.html)\n",
      "csv_display_name": "GitLab Runner",
      "csv_metadata_description": "GitLab Runner operator manages lifecycle of GitLab Runner instances",
      "csv_name": "gitlab-runner-operator.v1.10.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:29:04.421000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "gitlab-runner-operator",
      "provided_apis": [
        {
          "group": "apps.gitlab.com",
          "kind": "Runner",
          "plural": "runners",
          "version": "v1beta2"
        }
      ],
      "provider": "GitLab, Inc.",
      "related_images": [
        {
          "digest": "sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-ocp@sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "name": "gitlab-runner"
        },
        {
          "digest": "sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-helper-ocp@sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "name": "gitlab-runner-helper"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gitlab-runner-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gl-openshift/gitlab-runner-operator/gitlab-runner-operator-8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409-annotation"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.10.0",
      "version_original": "1.10.0"
    },
    {
      "_id": "631b06398d0acdaa298044f0",
      "alm_examples": [
        {
          "api_version": "apps.gitlab.com/v1beta2",
          "kind": "Runner",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "gitlabUrl": "https://gitlab.com",
            "imagePullPolicy": "Always",
            "tags": "openshift, test",
            "token": "gitlab-dev-runner-secret"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [
          "Disconnected"
        ],
        "valid_subscription": []
      },
      "architectures": [
        "amd64",
        "ppc64le"
      ],
      "bundle_path": "registry.connect.redhat.com/gitlab/gitlab-runner-operator-bundle@sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "bundle_path_digest": "sha256:249e7249c989e5b9adf2ca27a96e52255bcedb03bfb41c2433e74c724ad433c3",
      "capabilities": [
        "Deep Insights"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-09T09:24:09.069000+00:00",
      "csv_description": "GitLab Runner is the lightweight, highly-scalable agent that runs your build jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.\n\nThe GitLab Runner operator manages the lifecycle of GitLab Runner in Kubernetes or Openshift clusters. The operator aims to automate the tasks needed to run your CI/CD jobs in your container orchestration platform.\n\n## Prerequisites\n\n  Install cert-manager:\n\n  ```shell\n  kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml\n  ```\n\n## GitLab Runner version\n\nThis version of **GitLab Runner Operator** ships with **GitLab Runner v15.2.1**.\n\nTo use a different version of **GitLab Runner** change the [`runnerImage` and `helperImage` properties](https://docs.gitlab.com/runner/configuration/configuring_runner_operator.html#operator-properties).\n\n## Usage\n\n To link a GitLab Runner instance to a self-hosted GitLab instance or the hosted [GitLab](https://gitlab.com), you first need to:\n\n 1. Create a secret containing the `runner-registration-token` from your GitLab project.\n\n   ```\n  cat > gitlab-runner-secret.yml << EOF\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: gitlab-runner-secret\n  type: Opaque\n  stringData:\n    runner-registration-token: REPLACE_ME # your project runner secret\n  EOF\n  ```\n\n  ```\n  oc apply -f gitlab-runner-secret.yml\n  ```\n\n 2. Create the Custom Resource Definition (CRD) file and include the following information. The tags value must be openshift for the job to run.\n\n   ```\n   cat > gitlab-runner.yml << EOF\n   apiVersion: apps.gitlab.com/v1beta2\n   kind: Runner\n   metadata:\n     name: gitlab-runner\n   spec:\n     gitlabUrl: https://gitlab.example.com\n     buildImage: alpine\n     token: gitlab-runner-secret\n     tags: openshift\n   EOF\n   ```\n\n  ```\n  oc apply -f gitlab-runner.yml\n  ```\n\n## Full documentation\n\nVisit [Install GitLab Runner Operator](https://docs.gitlab.com/runner/install/operator.html)\n",
      "csv_display_name": "GitLab Runner",
      "csv_metadata_description": "GitLab Runner operator manages lifecycle of GitLab Runner instances",
      "csv_name": "gitlab-runner-operator.v1.10.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:06:02.127000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "gitlab-runner-operator",
      "provided_apis": [
        {
          "group": "apps.gitlab.com",
          "kind": "Runner",
          "plural": "runners",
          "version": "v1beta2"
        }
      ],
      "provider": "GitLab, Inc.",
      "related_images": [
        {
          "digest": "sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-ocp@sha256:93c7be4cf43263334824dcd1030ed61bf8c06a095e245b8aeaa5444453fdd613",
          "name": "gitlab-runner"
        },
        {
          "digest": "sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "image": "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-helper-ocp@sha256:cb796e3c768c8504c1b93c10b29dcf03b698c716e3f5764996dd46597dadcfc8",
          "name": "gitlab-runner-helper"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gitlab-runner-operator"
        },
        {
          "digest": "sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "image": "gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "gl-openshift/gitlab-runner-operator/gitlab-runner-operator-8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409-annotation"
        },
        {
          "digest": "sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "image": "registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator@sha256:8737cdd14ec55d2321c9eb2bb7a1e70088af95d1d6eb17bc6c09d58225880409",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.10.0",
      "version_original": "1.10.0"
    },
    {
      "_id": "63208c8695f6149e57162d1e",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusIQ",
          "metadata": {
            "name": "example-nexusiq"
          },
          "spec": {
            "deployment": {
              "postStart": {}
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "fullnameOverride": "",
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [],
              "path": "/",
              "tls": []
            },
            "iq": {
              "adminPort": 8071,
              "applicationPort": 8070,
              "configYaml": {
                "createSampleData": true,
                "logging": {
                  "appenders": [
                    {
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "INFO",
                      "type": "console"
                    },
                    {
                      "archivedFileCount": 50,
                      "archivedLogFilenamePattern": "/var/log/nexus-iq-server/clm-server-%d.log.gz",
                      "currentLogFilename": "/var/log/nexus-iq-server/clm-server.log",
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "ALL",
                      "type": "file"
                    }
                  ],
                  "level": "DEBUG",
                  "loggers": {
                    "com.sonatype.insight.audit": {
                      "appenders": [
                        {
                          "archivedFileCount": 50,
                          "archivedLogFilenamePattern": "/var/log/nexus-iq-server/audit-%d.log.gz",
                          "currentLogFilename": "/var/log/nexus-iq-server/audit.log",
                          "type": "file"
                        }
                      ]
                    },
                    "com.sonatype.insight.policy.violation": {
                      "appenders": [
                        {
                          "threshold": "INFO",
                          "type": "console"
                        }
                      ]
                    },
                    "com.sonatype.insight.scan": "INFO",
                    "eu.medsea.mimeutil.MimeUtil2": "INFO",
                    "org.apache.http": "INFO",
                    "org.apache.http.wire": "ERROR",
                    "org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter": "INFO",
                    "org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReader": "WARN",
                    "org.eclipse.jetty": "INFO"
                  }
                },
                "server": {
                  "adminConnectors": [
                    {
                      "port": 8071,
                      "type": "http"
                    }
                  ],
                  "applicationConnectors": [
                    {
                      "port": 8070,
                      "type": "http"
                    }
                  ],
                  "requestLog": {
                    "appenders": [
                      {
                        "archivedFileCount": 50,
                        "archivedLogFilenamePattern": "/var/log/nexus-iq-server/request-%d.log.gz",
                        "currentLogFilename": "/var/log/nexus-iq-server/request.log",
                        "logFormat": "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\"",
                        "type": "file"
                      }
                    ]
                  }
                },
                "sonatypeWork": "/sonatype-work"
              },
              "env": [
                {
                  "name": "JAVA_OPTS",
                  "value": "-Djava.util.prefs.userRoot=$(SONATYPE_WORK)/javaprefs"
                }
              ],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "licenseSecret": "",
              "memory": "1Gi",
              "name": "nxiq"
            },
            "nameOverride": "",
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "storageSize": "1Gi"
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "serviceAccount": {
              "create": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxiq-operator-bundle@sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "bundle_path_digest": "sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-13T13:58:30.660000+00:00",
      "csv_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.\nDevelopers leveraging open source require a solution that helps them make safer choices\nwhile still delivering at DevOps speed.\nNexus Lifecycle empowers developers and security teams to choose the best components\nand govern open source usage, ensuring organizations continue to innovate with less risk.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Generate a precise software bill of materials for all applications\n  to identify open source components and gather contextual direct\n  and transitive dependency information for faster action.\n* **One-Click Remediation**:\n  Upgrade to the best components and versions based on real-time intelligence.\n  Available in your preferred IDE or a GitHub pull request.\n* **Automated Open Source Policy Enforcement**:\n  Create custom security, license, and architectural policies based\n  on application type or organization and contextually enforce those policies\n  across every stage of the SDLC.\n* **Continuous Monitoring**:\n  Real-time notifications of newly discovered defects,\n  as well as vulnerabilities based on component,\n  risk level or application/container affected.\n\n## Extras\n\n* IDE Integrations: Eclipse, IntelliJ, and Visual Studio\n* Source Control Integrations: GitHub, GitLab, and Bitbucket\n* Chrome Browser Extension\n* Red Hat Clair for Container Scanning\n\n## Limitations\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus IQ Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to the new service for iq.applicationPort (8070).\n2. Visit the URL provided by the Route, login, and set new credentials.\n  The default credentials are `admin`/`admin123`.\n\nThe Nexus IQ Server can be further configured via the NexusIQ custom resource definition:\n\n| Parameter            | Description                                                  | Default           |\n| -------------------- | ------------------------------------------------------------ | ----------------- |\n| `iq.applicationPort` | Port of the application connector. Must match the value in the `configYaml` property | `8070`            |\n| `iq.adminPort`       | Port of the application connector. Must match the value in the `configYaml` property | `8071`            |\n| `iq.memory`          | The amount of RAM to allocate                                | `1Gi`             |\n| `iq.env`             | Customize the server environment, including `JAVA_OPTS`      | See example YAML show when ceating a NexusIQ. |\n| `iq.licenseSecret`   | The base-64 encoded license file to be installed at startup  | `\"\"`              |\n| `iq.configYaml`      | A YAML block which will be used as a configuration block for IQ Server. | See example YAML shown when creating a NexusIQ. |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `deploymentStrategy.type`                   | Deployment Strategy                 |  `Recreate` |\n| `initContainers`                            | Containers to run before starting the server | `nil` |\n| `deployment.postStart.command`              | Command to run after starting the IQ Server container  | `nil`                    |\n| `deployment.terminationGracePeriodSeconds` | Time to allow for clean shutdown                        | 120                      |\n| `persistence.storageClass` | The provisioner class                        | `-` (disables dynamic provisioning)            |\n| `persistence.storageSize` | The amount of drive space to allocate                        | `1Gi`             |\n| `persistence.accessMode` | Default access mode                        | `ReadWriteOnce`             |\n| `persistence.volumeConfiguration` | A YAML block to configure the persistent volume type. Defaults to `hostPath` which should not be used in production | `hostPath`             |\n\n## Configuring IQ Server\n\nYou can define the `config.yml` for IQ Server in your CRD on startup.\nIt is the `iq.configYaml` property. For more details, see the [Configuring IQ Server](https://help.sonatype.com/iqserver/configuring) help page.\n\n## Installing the License\n\nThe license file can be installed via the UI when IQ server is running, or it can be done as a part of the deploy.\nIf you leave the `licenseFile` field empty/commented, IQ Server will start and prompt you to manually install the license\nwhen you first enter the GUI.\n\n### Installing the License Automatically\nTo do it automatically, first encode your `.lic` file in Base 64 with no line breaks, eg:\n\n```bash\nbase64 --wrap=0 mylicense.lic > lic.base64\n```\n\nThen add this value to your CRD file as `iq.licenseSecret`, eg:\n\n```yaml\niq:\n  licenseSecret: bXkgc2FtcGxlIGxpY2Vuc2U=\n```\n\nSpecify the `licenseFile` path in `iq.configYaml` as:\n\n```yaml\niq:\n  configYaml:\n    sonatypeWork: /sonatype-work\n    createSampleData: true\n    # add this line and the `licenseSecret` above to autoconfigure licensing\n    licenseFile: /etc/nexus-iq-license/license_lic\n    server:\n      applicationConnectors:\n        - type: http\n          port: 8070\n      adminConnectors:\n        - type: http\n          port: 8071\n```\n\n## Running Commands Before Initialization of the Server\n\nIf you need custom initialization, you can use standard Kubernetes\n[`initContainers`](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)\nto run any series of containers and commands you need.\n\n```yaml\ninitContainers:\n  - name: an-init-container\n    image: busybox:1.28\n    command: ['/bin/sh', '-c', 'echo \"initializing\"']\n```",
      "csv_display_name": "Nexus IQ Operator",
      "csv_metadata_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.",
      "csv_name": "nxiq-operator-certified.v1.143.0-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:55:29.641000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "nxiq-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusIQ",
          "plural": "nexusiqs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified-7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9-annotation"
        },
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "iq"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "nexus-iq-server-b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.143.0-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "1.143.0-1",
      "version_original": "1.143.0-1"
    },
    {
      "_id": "63208d8db2235c50e9ff1720",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusIQ",
          "metadata": {
            "name": "example-nexusiq"
          },
          "spec": {
            "deployment": {
              "postStart": {}
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "fullnameOverride": "",
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [],
              "path": "/",
              "tls": []
            },
            "iq": {
              "adminPort": 8071,
              "applicationPort": 8070,
              "configYaml": {
                "createSampleData": true,
                "logging": {
                  "appenders": [
                    {
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "INFO",
                      "type": "console"
                    },
                    {
                      "archivedFileCount": 50,
                      "archivedLogFilenamePattern": "/var/log/nexus-iq-server/clm-server-%d.log.gz",
                      "currentLogFilename": "/var/log/nexus-iq-server/clm-server.log",
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "ALL",
                      "type": "file"
                    }
                  ],
                  "level": "DEBUG",
                  "loggers": {
                    "com.sonatype.insight.audit": {
                      "appenders": [
                        {
                          "archivedFileCount": 50,
                          "archivedLogFilenamePattern": "/var/log/nexus-iq-server/audit-%d.log.gz",
                          "currentLogFilename": "/var/log/nexus-iq-server/audit.log",
                          "type": "file"
                        }
                      ]
                    },
                    "com.sonatype.insight.policy.violation": {
                      "appenders": [
                        {
                          "threshold": "INFO",
                          "type": "console"
                        }
                      ]
                    },
                    "com.sonatype.insight.scan": "INFO",
                    "eu.medsea.mimeutil.MimeUtil2": "INFO",
                    "org.apache.http": "INFO",
                    "org.apache.http.wire": "ERROR",
                    "org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter": "INFO",
                    "org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReader": "WARN",
                    "org.eclipse.jetty": "INFO"
                  }
                },
                "server": {
                  "adminConnectors": [
                    {
                      "port": 8071,
                      "type": "http"
                    }
                  ],
                  "applicationConnectors": [
                    {
                      "port": 8070,
                      "type": "http"
                    }
                  ],
                  "requestLog": {
                    "appenders": [
                      {
                        "archivedFileCount": 50,
                        "archivedLogFilenamePattern": "/var/log/nexus-iq-server/request-%d.log.gz",
                        "currentLogFilename": "/var/log/nexus-iq-server/request.log",
                        "logFormat": "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\"",
                        "type": "file"
                      }
                    ]
                  }
                },
                "sonatypeWork": "/sonatype-work"
              },
              "env": [
                {
                  "name": "JAVA_OPTS",
                  "value": "-Djava.util.prefs.userRoot=$(SONATYPE_WORK)/javaprefs"
                }
              ],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "licenseSecret": "",
              "memory": "1Gi",
              "name": "nxiq"
            },
            "nameOverride": "",
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "storageSize": "1Gi"
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "serviceAccount": {
              "create": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxiq-operator-bundle@sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "bundle_path_digest": "sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-13T14:02:53.412000+00:00",
      "csv_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.\nDevelopers leveraging open source require a solution that helps them make safer choices\nwhile still delivering at DevOps speed.\nNexus Lifecycle empowers developers and security teams to choose the best components\nand govern open source usage, ensuring organizations continue to innovate with less risk.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Generate a precise software bill of materials for all applications\n  to identify open source components and gather contextual direct\n  and transitive dependency information for faster action.\n* **One-Click Remediation**:\n  Upgrade to the best components and versions based on real-time intelligence.\n  Available in your preferred IDE or a GitHub pull request.\n* **Automated Open Source Policy Enforcement**:\n  Create custom security, license, and architectural policies based\n  on application type or organization and contextually enforce those policies\n  across every stage of the SDLC.\n* **Continuous Monitoring**:\n  Real-time notifications of newly discovered defects,\n  as well as vulnerabilities based on component,\n  risk level or application/container affected.\n\n## Extras\n\n* IDE Integrations: Eclipse, IntelliJ, and Visual Studio\n* Source Control Integrations: GitHub, GitLab, and Bitbucket\n* Chrome Browser Extension\n* Red Hat Clair for Container Scanning\n\n## Limitations\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus IQ Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to the new service for iq.applicationPort (8070).\n2. Visit the URL provided by the Route, login, and set new credentials.\n  The default credentials are `admin`/`admin123`.\n\nThe Nexus IQ Server can be further configured via the NexusIQ custom resource definition:\n\n| Parameter            | Description                                                  | Default           |\n| -------------------- | ------------------------------------------------------------ | ----------------- |\n| `iq.applicationPort` | Port of the application connector. Must match the value in the `configYaml` property | `8070`            |\n| `iq.adminPort`       | Port of the application connector. Must match the value in the `configYaml` property | `8071`            |\n| `iq.memory`          | The amount of RAM to allocate                                | `1Gi`             |\n| `iq.env`             | Customize the server environment, including `JAVA_OPTS`      | See example YAML show when ceating a NexusIQ. |\n| `iq.licenseSecret`   | The base-64 encoded license file to be installed at startup  | `\"\"`              |\n| `iq.configYaml`      | A YAML block which will be used as a configuration block for IQ Server. | See example YAML shown when creating a NexusIQ. |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `deploymentStrategy.type`                   | Deployment Strategy                 |  `Recreate` |\n| `initContainers`                            | Containers to run before starting the server | `nil` |\n| `deployment.postStart.command`              | Command to run after starting the IQ Server container  | `nil`                    |\n| `deployment.terminationGracePeriodSeconds` | Time to allow for clean shutdown                        | 120                      |\n| `persistence.storageClass` | The provisioner class                        | `-` (disables dynamic provisioning)            |\n| `persistence.storageSize` | The amount of drive space to allocate                        | `1Gi`             |\n| `persistence.accessMode` | Default access mode                        | `ReadWriteOnce`             |\n| `persistence.volumeConfiguration` | A YAML block to configure the persistent volume type. Defaults to `hostPath` which should not be used in production | `hostPath`             |\n\n## Configuring IQ Server\n\nYou can define the `config.yml` for IQ Server in your CRD on startup.\nIt is the `iq.configYaml` property. For more details, see the [Configuring IQ Server](https://help.sonatype.com/iqserver/configuring) help page.\n\n## Installing the License\n\nThe license file can be installed via the UI when IQ server is running, or it can be done as a part of the deploy.\nIf you leave the `licenseFile` field empty/commented, IQ Server will start and prompt you to manually install the license\nwhen you first enter the GUI.\n\n### Installing the License Automatically\nTo do it automatically, first encode your `.lic` file in Base 64 with no line breaks, eg:\n\n```bash\nbase64 --wrap=0 mylicense.lic > lic.base64\n```\n\nThen add this value to your CRD file as `iq.licenseSecret`, eg:\n\n```yaml\niq:\n  licenseSecret: bXkgc2FtcGxlIGxpY2Vuc2U=\n```\n\nSpecify the `licenseFile` path in `iq.configYaml` as:\n\n```yaml\niq:\n  configYaml:\n    sonatypeWork: /sonatype-work\n    createSampleData: true\n    # add this line and the `licenseSecret` above to autoconfigure licensing\n    licenseFile: /etc/nexus-iq-license/license_lic\n    server:\n      applicationConnectors:\n        - type: http\n          port: 8070\n      adminConnectors:\n        - type: http\n          port: 8071\n```\n\n## Running Commands Before Initialization of the Server\n\nIf you need custom initialization, you can use standard Kubernetes\n[`initContainers`](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)\nto run any series of containers and commands you need.\n\n```yaml\ninitContainers:\n  - name: an-init-container\n    image: busybox:1.28\n    command: ['/bin/sh', '-c', 'echo \"initializing\"']\n```",
      "csv_display_name": "Nexus IQ Operator",
      "csv_metadata_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.",
      "csv_name": "nxiq-operator-certified.v1.143.0-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:22:22.051000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "nxiq-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusIQ",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified-7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9-annotation"
        },
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "iq"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "nexus-iq-server-b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.143.0-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "1.143.0-1",
      "version_original": "1.143.0-1"
    },
    {
      "_id": "63208fa002d5613a211724bc",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusIQ",
          "metadata": {
            "name": "example-nexusiq"
          },
          "spec": {
            "deployment": {
              "postStart": {}
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "fullnameOverride": "",
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [],
              "path": "/",
              "tls": []
            },
            "iq": {
              "adminPort": 8071,
              "applicationPort": 8070,
              "configYaml": {
                "createSampleData": true,
                "logging": {
                  "appenders": [
                    {
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "INFO",
                      "type": "console"
                    },
                    {
                      "archivedFileCount": 50,
                      "archivedLogFilenamePattern": "/var/log/nexus-iq-server/clm-server-%d.log.gz",
                      "currentLogFilename": "/var/log/nexus-iq-server/clm-server.log",
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "ALL",
                      "type": "file"
                    }
                  ],
                  "level": "DEBUG",
                  "loggers": {
                    "com.sonatype.insight.audit": {
                      "appenders": [
                        {
                          "archivedFileCount": 50,
                          "archivedLogFilenamePattern": "/var/log/nexus-iq-server/audit-%d.log.gz",
                          "currentLogFilename": "/var/log/nexus-iq-server/audit.log",
                          "type": "file"
                        }
                      ]
                    },
                    "com.sonatype.insight.policy.violation": {
                      "appenders": [
                        {
                          "threshold": "INFO",
                          "type": "console"
                        }
                      ]
                    },
                    "com.sonatype.insight.scan": "INFO",
                    "eu.medsea.mimeutil.MimeUtil2": "INFO",
                    "org.apache.http": "INFO",
                    "org.apache.http.wire": "ERROR",
                    "org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter": "INFO",
                    "org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReader": "WARN",
                    "org.eclipse.jetty": "INFO"
                  }
                },
                "server": {
                  "adminConnectors": [
                    {
                      "port": 8071,
                      "type": "http"
                    }
                  ],
                  "applicationConnectors": [
                    {
                      "port": 8070,
                      "type": "http"
                    }
                  ],
                  "requestLog": {
                    "appenders": [
                      {
                        "archivedFileCount": 50,
                        "archivedLogFilenamePattern": "/var/log/nexus-iq-server/request-%d.log.gz",
                        "currentLogFilename": "/var/log/nexus-iq-server/request.log",
                        "logFormat": "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\"",
                        "type": "file"
                      }
                    ]
                  }
                },
                "sonatypeWork": "/sonatype-work"
              },
              "env": [
                {
                  "name": "JAVA_OPTS",
                  "value": "-Djava.util.prefs.userRoot=$(SONATYPE_WORK)/javaprefs"
                }
              ],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "licenseSecret": "",
              "memory": "1Gi",
              "name": "nxiq"
            },
            "nameOverride": "",
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "storageSize": "1Gi"
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "serviceAccount": {
              "create": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxiq-operator-bundle@sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "bundle_path_digest": "sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-13T14:11:44.679000+00:00",
      "csv_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.\nDevelopers leveraging open source require a solution that helps them make safer choices\nwhile still delivering at DevOps speed.\nNexus Lifecycle empowers developers and security teams to choose the best components\nand govern open source usage, ensuring organizations continue to innovate with less risk.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Generate a precise software bill of materials for all applications\n  to identify open source components and gather contextual direct\n  and transitive dependency information for faster action.\n* **One-Click Remediation**:\n  Upgrade to the best components and versions based on real-time intelligence.\n  Available in your preferred IDE or a GitHub pull request.\n* **Automated Open Source Policy Enforcement**:\n  Create custom security, license, and architectural policies based\n  on application type or organization and contextually enforce those policies\n  across every stage of the SDLC.\n* **Continuous Monitoring**:\n  Real-time notifications of newly discovered defects,\n  as well as vulnerabilities based on component,\n  risk level or application/container affected.\n\n## Extras\n\n* IDE Integrations: Eclipse, IntelliJ, and Visual Studio\n* Source Control Integrations: GitHub, GitLab, and Bitbucket\n* Chrome Browser Extension\n* Red Hat Clair for Container Scanning\n\n## Limitations\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus IQ Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to the new service for iq.applicationPort (8070).\n2. Visit the URL provided by the Route, login, and set new credentials.\n  The default credentials are `admin`/`admin123`.\n\nThe Nexus IQ Server can be further configured via the NexusIQ custom resource definition:\n\n| Parameter            | Description                                                  | Default           |\n| -------------------- | ------------------------------------------------------------ | ----------------- |\n| `iq.applicationPort` | Port of the application connector. Must match the value in the `configYaml` property | `8070`            |\n| `iq.adminPort`       | Port of the application connector. Must match the value in the `configYaml` property | `8071`            |\n| `iq.memory`          | The amount of RAM to allocate                                | `1Gi`             |\n| `iq.env`             | Customize the server environment, including `JAVA_OPTS`      | See example YAML show when ceating a NexusIQ. |\n| `iq.licenseSecret`   | The base-64 encoded license file to be installed at startup  | `\"\"`              |\n| `iq.configYaml`      | A YAML block which will be used as a configuration block for IQ Server. | See example YAML shown when creating a NexusIQ. |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `deploymentStrategy.type`                   | Deployment Strategy                 |  `Recreate` |\n| `initContainers`                            | Containers to run before starting the server | `nil` |\n| `deployment.postStart.command`              | Command to run after starting the IQ Server container  | `nil`                    |\n| `deployment.terminationGracePeriodSeconds` | Time to allow for clean shutdown                        | 120                      |\n| `persistence.storageClass` | The provisioner class                        | `-` (disables dynamic provisioning)            |\n| `persistence.storageSize` | The amount of drive space to allocate                        | `1Gi`             |\n| `persistence.accessMode` | Default access mode                        | `ReadWriteOnce`             |\n| `persistence.volumeConfiguration` | A YAML block to configure the persistent volume type. Defaults to `hostPath` which should not be used in production | `hostPath`             |\n\n## Configuring IQ Server\n\nYou can define the `config.yml` for IQ Server in your CRD on startup.\nIt is the `iq.configYaml` property. For more details, see the [Configuring IQ Server](https://help.sonatype.com/iqserver/configuring) help page.\n\n## Installing the License\n\nThe license file can be installed via the UI when IQ server is running, or it can be done as a part of the deploy.\nIf you leave the `licenseFile` field empty/commented, IQ Server will start and prompt you to manually install the license\nwhen you first enter the GUI.\n\n### Installing the License Automatically\nTo do it automatically, first encode your `.lic` file in Base 64 with no line breaks, eg:\n\n```bash\nbase64 --wrap=0 mylicense.lic > lic.base64\n```\n\nThen add this value to your CRD file as `iq.licenseSecret`, eg:\n\n```yaml\niq:\n  licenseSecret: bXkgc2FtcGxlIGxpY2Vuc2U=\n```\n\nSpecify the `licenseFile` path in `iq.configYaml` as:\n\n```yaml\niq:\n  configYaml:\n    sonatypeWork: /sonatype-work\n    createSampleData: true\n    # add this line and the `licenseSecret` above to autoconfigure licensing\n    licenseFile: /etc/nexus-iq-license/license_lic\n    server:\n      applicationConnectors:\n        - type: http\n          port: 8070\n      adminConnectors:\n        - type: http\n          port: 8071\n```\n\n## Running Commands Before Initialization of the Server\n\nIf you need custom initialization, you can use standard Kubernetes\n[`initContainers`](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)\nto run any series of containers and commands you need.\n\n```yaml\ninitContainers:\n  - name: an-init-container\n    image: busybox:1.28\n    command: ['/bin/sh', '-c', 'echo \"initializing\"']\n```",
      "csv_display_name": "Nexus IQ Operator",
      "csv_metadata_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.",
      "csv_name": "nxiq-operator-certified.v1.143.0-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:22:42.459000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "nxiq-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusIQ",
          "plural": "nexusiqs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified-7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9-annotation"
        },
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "iq"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "nexus-iq-server-b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.143.0-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "1.143.0-1",
      "version_original": "1.143.0-1"
    },
    {
      "_id": "63208fa384a9de327001fbc4",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusIQ",
          "metadata": {
            "name": "example-nexusiq"
          },
          "spec": {
            "deployment": {
              "postStart": {}
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "fullnameOverride": "",
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [],
              "path": "/",
              "tls": []
            },
            "iq": {
              "adminPort": 8071,
              "applicationPort": 8070,
              "configYaml": {
                "createSampleData": true,
                "logging": {
                  "appenders": [
                    {
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "INFO",
                      "type": "console"
                    },
                    {
                      "archivedFileCount": 50,
                      "archivedLogFilenamePattern": "/var/log/nexus-iq-server/clm-server-%d.log.gz",
                      "currentLogFilename": "/var/log/nexus-iq-server/clm-server.log",
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "ALL",
                      "type": "file"
                    }
                  ],
                  "level": "DEBUG",
                  "loggers": {
                    "com.sonatype.insight.audit": {
                      "appenders": [
                        {
                          "archivedFileCount": 50,
                          "archivedLogFilenamePattern": "/var/log/nexus-iq-server/audit-%d.log.gz",
                          "currentLogFilename": "/var/log/nexus-iq-server/audit.log",
                          "type": "file"
                        }
                      ]
                    },
                    "com.sonatype.insight.policy.violation": {
                      "appenders": [
                        {
                          "threshold": "INFO",
                          "type": "console"
                        }
                      ]
                    },
                    "com.sonatype.insight.scan": "INFO",
                    "eu.medsea.mimeutil.MimeUtil2": "INFO",
                    "org.apache.http": "INFO",
                    "org.apache.http.wire": "ERROR",
                    "org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter": "INFO",
                    "org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReader": "WARN",
                    "org.eclipse.jetty": "INFO"
                  }
                },
                "server": {
                  "adminConnectors": [
                    {
                      "port": 8071,
                      "type": "http"
                    }
                  ],
                  "applicationConnectors": [
                    {
                      "port": 8070,
                      "type": "http"
                    }
                  ],
                  "requestLog": {
                    "appenders": [
                      {
                        "archivedFileCount": 50,
                        "archivedLogFilenamePattern": "/var/log/nexus-iq-server/request-%d.log.gz",
                        "currentLogFilename": "/var/log/nexus-iq-server/request.log",
                        "logFormat": "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\"",
                        "type": "file"
                      }
                    ]
                  }
                },
                "sonatypeWork": "/sonatype-work"
              },
              "env": [
                {
                  "name": "JAVA_OPTS",
                  "value": "-Djava.util.prefs.userRoot=$(SONATYPE_WORK)/javaprefs"
                }
              ],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "licenseSecret": "",
              "memory": "1Gi",
              "name": "nxiq"
            },
            "nameOverride": "",
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "storageSize": "1Gi"
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "serviceAccount": {
              "create": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxiq-operator-bundle@sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "bundle_path_digest": "sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-13T14:11:47.561000+00:00",
      "csv_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.\nDevelopers leveraging open source require a solution that helps them make safer choices\nwhile still delivering at DevOps speed.\nNexus Lifecycle empowers developers and security teams to choose the best components\nand govern open source usage, ensuring organizations continue to innovate with less risk.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Generate a precise software bill of materials for all applications\n  to identify open source components and gather contextual direct\n  and transitive dependency information for faster action.\n* **One-Click Remediation**:\n  Upgrade to the best components and versions based on real-time intelligence.\n  Available in your preferred IDE or a GitHub pull request.\n* **Automated Open Source Policy Enforcement**:\n  Create custom security, license, and architectural policies based\n  on application type or organization and contextually enforce those policies\n  across every stage of the SDLC.\n* **Continuous Monitoring**:\n  Real-time notifications of newly discovered defects,\n  as well as vulnerabilities based on component,\n  risk level or application/container affected.\n\n## Extras\n\n* IDE Integrations: Eclipse, IntelliJ, and Visual Studio\n* Source Control Integrations: GitHub, GitLab, and Bitbucket\n* Chrome Browser Extension\n* Red Hat Clair for Container Scanning\n\n## Limitations\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus IQ Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to the new service for iq.applicationPort (8070).\n2. Visit the URL provided by the Route, login, and set new credentials.\n  The default credentials are `admin`/`admin123`.\n\nThe Nexus IQ Server can be further configured via the NexusIQ custom resource definition:\n\n| Parameter            | Description                                                  | Default           |\n| -------------------- | ------------------------------------------------------------ | ----------------- |\n| `iq.applicationPort` | Port of the application connector. Must match the value in the `configYaml` property | `8070`            |\n| `iq.adminPort`       | Port of the application connector. Must match the value in the `configYaml` property | `8071`            |\n| `iq.memory`          | The amount of RAM to allocate                                | `1Gi`             |\n| `iq.env`             | Customize the server environment, including `JAVA_OPTS`      | See example YAML show when ceating a NexusIQ. |\n| `iq.licenseSecret`   | The base-64 encoded license file to be installed at startup  | `\"\"`              |\n| `iq.configYaml`      | A YAML block which will be used as a configuration block for IQ Server. | See example YAML shown when creating a NexusIQ. |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `deploymentStrategy.type`                   | Deployment Strategy                 |  `Recreate` |\n| `initContainers`                            | Containers to run before starting the server | `nil` |\n| `deployment.postStart.command`              | Command to run after starting the IQ Server container  | `nil`                    |\n| `deployment.terminationGracePeriodSeconds` | Time to allow for clean shutdown                        | 120                      |\n| `persistence.storageClass` | The provisioner class                        | `-` (disables dynamic provisioning)            |\n| `persistence.storageSize` | The amount of drive space to allocate                        | `1Gi`             |\n| `persistence.accessMode` | Default access mode                        | `ReadWriteOnce`             |\n| `persistence.volumeConfiguration` | A YAML block to configure the persistent volume type. Defaults to `hostPath` which should not be used in production | `hostPath`             |\n\n## Configuring IQ Server\n\nYou can define the `config.yml` for IQ Server in your CRD on startup.\nIt is the `iq.configYaml` property. For more details, see the [Configuring IQ Server](https://help.sonatype.com/iqserver/configuring) help page.\n\n## Installing the License\n\nThe license file can be installed via the UI when IQ server is running, or it can be done as a part of the deploy.\nIf you leave the `licenseFile` field empty/commented, IQ Server will start and prompt you to manually install the license\nwhen you first enter the GUI.\n\n### Installing the License Automatically\nTo do it automatically, first encode your `.lic` file in Base 64 with no line breaks, eg:\n\n```bash\nbase64 --wrap=0 mylicense.lic > lic.base64\n```\n\nThen add this value to your CRD file as `iq.licenseSecret`, eg:\n\n```yaml\niq:\n  licenseSecret: bXkgc2FtcGxlIGxpY2Vuc2U=\n```\n\nSpecify the `licenseFile` path in `iq.configYaml` as:\n\n```yaml\niq:\n  configYaml:\n    sonatypeWork: /sonatype-work\n    createSampleData: true\n    # add this line and the `licenseSecret` above to autoconfigure licensing\n    licenseFile: /etc/nexus-iq-license/license_lic\n    server:\n      applicationConnectors:\n        - type: http\n          port: 8070\n      adminConnectors:\n        - type: http\n          port: 8071\n```\n\n## Running Commands Before Initialization of the Server\n\nIf you need custom initialization, you can use standard Kubernetes\n[`initContainers`](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)\nto run any series of containers and commands you need.\n\n```yaml\ninitContainers:\n  - name: an-init-container\n    image: busybox:1.28\n    command: ['/bin/sh', '-c', 'echo \"initializing\"']\n```",
      "csv_display_name": "Nexus IQ Operator",
      "csv_metadata_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.",
      "csv_name": "nxiq-operator-certified.v1.143.0-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:54:41.546000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "nxiq-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusIQ",
          "plural": "nexusiqs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified-7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9-annotation"
        },
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "iq"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "nexus-iq-server-b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.143.0-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.143.0-1",
      "version_original": "1.143.0-1"
    },
    {
      "_id": "6320902ab180bb9cb665dd8a",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusIQ",
          "metadata": {
            "name": "example-nexusiq"
          },
          "spec": {
            "deployment": {
              "postStart": {}
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "fullnameOverride": "",
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [],
              "path": "/",
              "tls": []
            },
            "iq": {
              "adminPort": 8071,
              "applicationPort": 8070,
              "configYaml": {
                "createSampleData": true,
                "logging": {
                  "appenders": [
                    {
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "INFO",
                      "type": "console"
                    },
                    {
                      "archivedFileCount": 50,
                      "archivedLogFilenamePattern": "/var/log/nexus-iq-server/clm-server-%d.log.gz",
                      "currentLogFilename": "/var/log/nexus-iq-server/clm-server.log",
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "ALL",
                      "type": "file"
                    }
                  ],
                  "level": "DEBUG",
                  "loggers": {
                    "com.sonatype.insight.audit": {
                      "appenders": [
                        {
                          "archivedFileCount": 50,
                          "archivedLogFilenamePattern": "/var/log/nexus-iq-server/audit-%d.log.gz",
                          "currentLogFilename": "/var/log/nexus-iq-server/audit.log",
                          "type": "file"
                        }
                      ]
                    },
                    "com.sonatype.insight.policy.violation": {
                      "appenders": [
                        {
                          "threshold": "INFO",
                          "type": "console"
                        }
                      ]
                    },
                    "com.sonatype.insight.scan": "INFO",
                    "eu.medsea.mimeutil.MimeUtil2": "INFO",
                    "org.apache.http": "INFO",
                    "org.apache.http.wire": "ERROR",
                    "org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter": "INFO",
                    "org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReader": "WARN",
                    "org.eclipse.jetty": "INFO"
                  }
                },
                "server": {
                  "adminConnectors": [
                    {
                      "port": 8071,
                      "type": "http"
                    }
                  ],
                  "applicationConnectors": [
                    {
                      "port": 8070,
                      "type": "http"
                    }
                  ],
                  "requestLog": {
                    "appenders": [
                      {
                        "archivedFileCount": 50,
                        "archivedLogFilenamePattern": "/var/log/nexus-iq-server/request-%d.log.gz",
                        "currentLogFilename": "/var/log/nexus-iq-server/request.log",
                        "logFormat": "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\"",
                        "type": "file"
                      }
                    ]
                  }
                },
                "sonatypeWork": "/sonatype-work"
              },
              "env": [
                {
                  "name": "JAVA_OPTS",
                  "value": "-Djava.util.prefs.userRoot=$(SONATYPE_WORK)/javaprefs"
                }
              ],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "licenseSecret": "",
              "memory": "1Gi",
              "name": "nxiq"
            },
            "nameOverride": "",
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "storageSize": "1Gi"
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "serviceAccount": {
              "create": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxiq-operator-bundle@sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "bundle_path_digest": "sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-13T14:14:02.633000+00:00",
      "csv_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.\nDevelopers leveraging open source require a solution that helps them make safer choices\nwhile still delivering at DevOps speed.\nNexus Lifecycle empowers developers and security teams to choose the best components\nand govern open source usage, ensuring organizations continue to innovate with less risk.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Generate a precise software bill of materials for all applications\n  to identify open source components and gather contextual direct\n  and transitive dependency information for faster action.\n* **One-Click Remediation**:\n  Upgrade to the best components and versions based on real-time intelligence.\n  Available in your preferred IDE or a GitHub pull request.\n* **Automated Open Source Policy Enforcement**:\n  Create custom security, license, and architectural policies based\n  on application type or organization and contextually enforce those policies\n  across every stage of the SDLC.\n* **Continuous Monitoring**:\n  Real-time notifications of newly discovered defects,\n  as well as vulnerabilities based on component,\n  risk level or application/container affected.\n\n## Extras\n\n* IDE Integrations: Eclipse, IntelliJ, and Visual Studio\n* Source Control Integrations: GitHub, GitLab, and Bitbucket\n* Chrome Browser Extension\n* Red Hat Clair for Container Scanning\n\n## Limitations\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus IQ Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to the new service for iq.applicationPort (8070).\n2. Visit the URL provided by the Route, login, and set new credentials.\n  The default credentials are `admin`/`admin123`.\n\nThe Nexus IQ Server can be further configured via the NexusIQ custom resource definition:\n\n| Parameter            | Description                                                  | Default           |\n| -------------------- | ------------------------------------------------------------ | ----------------- |\n| `iq.applicationPort` | Port of the application connector. Must match the value in the `configYaml` property | `8070`            |\n| `iq.adminPort`       | Port of the application connector. Must match the value in the `configYaml` property | `8071`            |\n| `iq.memory`          | The amount of RAM to allocate                                | `1Gi`             |\n| `iq.env`             | Customize the server environment, including `JAVA_OPTS`      | See example YAML show when ceating a NexusIQ. |\n| `iq.licenseSecret`   | The base-64 encoded license file to be installed at startup  | `\"\"`              |\n| `iq.configYaml`      | A YAML block which will be used as a configuration block for IQ Server. | See example YAML shown when creating a NexusIQ. |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `deploymentStrategy.type`                   | Deployment Strategy                 |  `Recreate` |\n| `initContainers`                            | Containers to run before starting the server | `nil` |\n| `deployment.postStart.command`              | Command to run after starting the IQ Server container  | `nil`                    |\n| `deployment.terminationGracePeriodSeconds` | Time to allow for clean shutdown                        | 120                      |\n| `persistence.storageClass` | The provisioner class                        | `-` (disables dynamic provisioning)            |\n| `persistence.storageSize` | The amount of drive space to allocate                        | `1Gi`             |\n| `persistence.accessMode` | Default access mode                        | `ReadWriteOnce`             |\n| `persistence.volumeConfiguration` | A YAML block to configure the persistent volume type. Defaults to `hostPath` which should not be used in production | `hostPath`             |\n\n## Configuring IQ Server\n\nYou can define the `config.yml` for IQ Server in your CRD on startup.\nIt is the `iq.configYaml` property. For more details, see the [Configuring IQ Server](https://help.sonatype.com/iqserver/configuring) help page.\n\n## Installing the License\n\nThe license file can be installed via the UI when IQ server is running, or it can be done as a part of the deploy.\nIf you leave the `licenseFile` field empty/commented, IQ Server will start and prompt you to manually install the license\nwhen you first enter the GUI.\n\n### Installing the License Automatically\nTo do it automatically, first encode your `.lic` file in Base 64 with no line breaks, eg:\n\n```bash\nbase64 --wrap=0 mylicense.lic > lic.base64\n```\n\nThen add this value to your CRD file as `iq.licenseSecret`, eg:\n\n```yaml\niq:\n  licenseSecret: bXkgc2FtcGxlIGxpY2Vuc2U=\n```\n\nSpecify the `licenseFile` path in `iq.configYaml` as:\n\n```yaml\niq:\n  configYaml:\n    sonatypeWork: /sonatype-work\n    createSampleData: true\n    # add this line and the `licenseSecret` above to autoconfigure licensing\n    licenseFile: /etc/nexus-iq-license/license_lic\n    server:\n      applicationConnectors:\n        - type: http\n          port: 8070\n      adminConnectors:\n        - type: http\n          port: 8071\n```\n\n## Running Commands Before Initialization of the Server\n\nIf you need custom initialization, you can use standard Kubernetes\n[`initContainers`](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)\nto run any series of containers and commands you need.\n\n```yaml\ninitContainers:\n  - name: an-init-container\n    image: busybox:1.28\n    command: ['/bin/sh', '-c', 'echo \"initializing\"']\n```",
      "csv_display_name": "Nexus IQ Operator",
      "csv_metadata_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.",
      "csv_name": "nxiq-operator-certified.v1.143.0-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:00:36.596000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "nxiq-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusIQ",
          "plural": "nexusiqs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified-7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9-annotation"
        },
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "iq"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "nexus-iq-server-b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.143.0-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "1.143.0-1",
      "version_original": "1.143.0-1"
    },
    {
      "_id": "63209248b180bb9cb665ddf0",
      "alm_examples": [
        {
          "api_version": "sonatype.com/v1alpha1",
          "kind": "NexusIQ",
          "metadata": {
            "name": "example-nexusiq"
          },
          "spec": {
            "deployment": {
              "postStart": {}
            },
            "deploymentStrategy": {
              "type": "Recreate"
            },
            "fullnameOverride": "",
            "imagePullSecrets": [],
            "ingress": {
              "annotations": {},
              "enabled": false,
              "hosts": [],
              "path": "/",
              "tls": []
            },
            "iq": {
              "adminPort": 8071,
              "applicationPort": 8070,
              "configYaml": {
                "createSampleData": true,
                "logging": {
                  "appenders": [
                    {
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "INFO",
                      "type": "console"
                    },
                    {
                      "archivedFileCount": 50,
                      "archivedLogFilenamePattern": "/var/log/nexus-iq-server/clm-server-%d.log.gz",
                      "currentLogFilename": "/var/log/nexus-iq-server/clm-server.log",
                      "logFormat": "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n",
                      "threshold": "ALL",
                      "type": "file"
                    }
                  ],
                  "level": "DEBUG",
                  "loggers": {
                    "com.sonatype.insight.audit": {
                      "appenders": [
                        {
                          "archivedFileCount": 50,
                          "archivedLogFilenamePattern": "/var/log/nexus-iq-server/audit-%d.log.gz",
                          "currentLogFilename": "/var/log/nexus-iq-server/audit.log",
                          "type": "file"
                        }
                      ]
                    },
                    "com.sonatype.insight.policy.violation": {
                      "appenders": [
                        {
                          "threshold": "INFO",
                          "type": "console"
                        }
                      ]
                    },
                    "com.sonatype.insight.scan": "INFO",
                    "eu.medsea.mimeutil.MimeUtil2": "INFO",
                    "org.apache.http": "INFO",
                    "org.apache.http.wire": "ERROR",
                    "org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter": "INFO",
                    "org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReader": "WARN",
                    "org.eclipse.jetty": "INFO"
                  }
                },
                "server": {
                  "adminConnectors": [
                    {
                      "port": 8071,
                      "type": "http"
                    }
                  ],
                  "applicationConnectors": [
                    {
                      "port": 8070,
                      "type": "http"
                    }
                  ],
                  "requestLog": {
                    "appenders": [
                      {
                        "archivedFileCount": 50,
                        "archivedLogFilenamePattern": "/var/log/nexus-iq-server/request-%d.log.gz",
                        "currentLogFilename": "/var/log/nexus-iq-server/request.log",
                        "logFormat": "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\"",
                        "type": "file"
                      }
                    ]
                  }
                },
                "sonatypeWork": "/sonatype-work"
              },
              "env": [
                {
                  "name": "JAVA_OPTS",
                  "value": "-Djava.util.prefs.userRoot=$(SONATYPE_WORK)/javaprefs"
                }
              ],
              "imageName": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
              "imagePullPolicy": "IfNotPresent",
              "imagePullSecret": "",
              "licenseSecret": "",
              "memory": "1Gi",
              "name": "nxiq"
            },
            "nameOverride": "",
            "persistence": {
              "accessMode": "ReadWriteOnce",
              "storageSize": "1Gi"
            },
            "service": {
              "annotations": {},
              "enabled": false,
              "labels": {},
              "ports": [
                {
                  "name": "nexus-service",
                  "port": 80,
                  "targetPort": 80
                }
              ]
            },
            "serviceAccount": {
              "create": true
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/sonatype/nxiq-operator-bundle@sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "bundle_path_digest": "sha256:039f7010d712626b18defcee774c72de68b885366878273982d2b6f1ae07c894",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2022-09-13T14:23:04.636000+00:00",
      "csv_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.\nDevelopers leveraging open source require a solution that helps them make safer choices\nwhile still delivering at DevOps speed.\nNexus Lifecycle empowers developers and security teams to choose the best components\nand govern open source usage, ensuring organizations continue to innovate with less risk.\n\n## Core Capabilities\n\n* **Dependency Management**:\n  Generate a precise software bill of materials for all applications\n  to identify open source components and gather contextual direct\n  and transitive dependency information for faster action.\n* **One-Click Remediation**:\n  Upgrade to the best components and versions based on real-time intelligence.\n  Available in your preferred IDE or a GitHub pull request.\n* **Automated Open Source Policy Enforcement**:\n  Create custom security, license, and architectural policies based\n  on application type or organization and contextually enforce those policies\n  across every stage of the SDLC.\n* **Continuous Monitoring**:\n  Real-time notifications of newly discovered defects,\n  as well as vulnerabilities based on component,\n  risk level or application/container affected.\n\n## Extras\n\n* IDE Integrations: Eclipse, IntelliJ, and Visual Studio\n* Source Control Integrations: GitHub, GitLab, and Bitbucket\n* Chrome Browser Extension\n* Red Hat Clair for Container Scanning\n\n## Limitations\n\nThis operator will be released on a quarterly basis.\n\n## Controlling Automatic vs Manual Update\n\nIf you use the default configuration for the Nexus IQ Operator installation,\nplease notice that on any new operator release, the corresponding deployments are\nalso updated without user intervention, resulting in unscheduled downtime.\n\nIf you want to avoid this unscheduled downtime, we recommend installing the operator\ninto **its own namespace** with **manual approval** for updates.\n\n## Usage\n\nOnce the server instance is created by the operator and running,\nyou'll want to expose the service as you see fit:\n1. Create a Route to the new service for iq.applicationPort (8070).\n2. Visit the URL provided by the Route, login, and set new credentials.\n  The default credentials are `admin`/`admin123`.\n\nThe Nexus IQ Server can be further configured via the NexusIQ custom resource definition:\n\n| Parameter            | Description                                                  | Default           |\n| -------------------- | ------------------------------------------------------------ | ----------------- |\n| `iq.applicationPort` | Port of the application connector. Must match the value in the `configYaml` property | `8070`            |\n| `iq.adminPort`       | Port of the application connector. Must match the value in the `configYaml` property | `8071`            |\n| `iq.memory`          | The amount of RAM to allocate                                | `1Gi`             |\n| `iq.env`             | Customize the server environment, including `JAVA_OPTS`      | See example YAML show when ceating a NexusIQ. |\n| `iq.licenseSecret`   | The base-64 encoded license file to be installed at startup  | `\"\"`              |\n| `iq.configYaml`      | A YAML block which will be used as a configuration block for IQ Server. | See example YAML shown when creating a NexusIQ. |\n| `ingress.enabled`                           | Create an ingress for Nexus         | `true`                                  |\n| `ingress.annotations`                       | Annotations to enhance ingress configuration  | `{}`                          |\n| `ingress.tls.enabled`                       | Enable TLS                          | `true`                                 |\n| `ingress.tls.secretName`                    | Name of the secret storing TLS cert, `false` to use the Ingress' default certificate | `nexus-tls`                             |\n| `ingress.path`                              | Path for ingress rules. GCP users should set to `/*` | `/`                    |\n| `deploymentStrategy.type`                   | Deployment Strategy                 |  `Recreate` |\n| `initContainers`                            | Containers to run before starting the server | `nil` |\n| `deployment.postStart.command`              | Command to run after starting the IQ Server container  | `nil`                    |\n| `deployment.terminationGracePeriodSeconds` | Time to allow for clean shutdown                        | 120                      |\n| `persistence.storageClass` | The provisioner class                        | `-` (disables dynamic provisioning)            |\n| `persistence.storageSize` | The amount of drive space to allocate                        | `1Gi`             |\n| `persistence.accessMode` | Default access mode                        | `ReadWriteOnce`             |\n| `persistence.volumeConfiguration` | A YAML block to configure the persistent volume type. Defaults to `hostPath` which should not be used in production | `hostPath`             |\n\n## Configuring IQ Server\n\nYou can define the `config.yml` for IQ Server in your CRD on startup.\nIt is the `iq.configYaml` property. For more details, see the [Configuring IQ Server](https://help.sonatype.com/iqserver/configuring) help page.\n\n## Installing the License\n\nThe license file can be installed via the UI when IQ server is running, or it can be done as a part of the deploy.\nIf you leave the `licenseFile` field empty/commented, IQ Server will start and prompt you to manually install the license\nwhen you first enter the GUI.\n\n### Installing the License Automatically\nTo do it automatically, first encode your `.lic` file in Base 64 with no line breaks, eg:\n\n```bash\nbase64 --wrap=0 mylicense.lic > lic.base64\n```\n\nThen add this value to your CRD file as `iq.licenseSecret`, eg:\n\n```yaml\niq:\n  licenseSecret: bXkgc2FtcGxlIGxpY2Vuc2U=\n```\n\nSpecify the `licenseFile` path in `iq.configYaml` as:\n\n```yaml\niq:\n  configYaml:\n    sonatypeWork: /sonatype-work\n    createSampleData: true\n    # add this line and the `licenseSecret` above to autoconfigure licensing\n    licenseFile: /etc/nexus-iq-license/license_lic\n    server:\n      applicationConnectors:\n        - type: http\n          port: 8070\n      adminConnectors:\n        - type: http\n          port: 8071\n```\n\n## Running Commands Before Initialization of the Server\n\nIf you need custom initialization, you can use standard Kubernetes\n[`initContainers`](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)\nto run any series of containers and commands you need.\n\n```yaml\ninitContainers:\n  - name: an-init-container\n    image: busybox:1.28\n    command: ['/bin/sh', '-c', 'echo \"initializing\"']\n```",
      "csv_display_name": "Nexus IQ Operator",
      "csv_metadata_description": "Nexus Lifecycle is an open source governance platform that continuously identifies risk,\nautomatically enforces policy, and provides visibility throughout the entire SDLC.",
      "csv_name": "nxiq-operator-certified.v1.143.0-1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:43:17.302000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "nxiq-operator-certified",
      "provided_apis": [
        {
          "group": "sonatype.com",
          "kind": "NexusIQ",
          "plural": "nexusiqs",
          "version": "v1alpha1"
        }
      ],
      "provider": "Sonatype",
      "related_images": [
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified-7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9-annotation"
        },
        {
          "digest": "sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "image": "registry.connect.redhat.com/sonatype/nxiq-operator-certified@sha256:7a38ff3bc23296c2d2dd4146462951a99410b21b28b94c3cfa5bfd872d0e4ec9",
          "name": "nxiq-operator-certified"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "iq"
        },
        {
          "digest": "sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "image": "registry.connect.redhat.com/sonatype/nexus-iq-server@sha256:b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db",
          "name": "nexus-iq-server-b40c9d810e8bd614822a1aa287a155100592c7081f683369056207c5ea4dc1db-annotation"
        }
      ],
      "replaces": null,
      "skip_range": "<1.143.0-1",
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "1.143.0-1",
      "version_original": "1.143.0-1"
    },
    {
      "_id": "6320f23102d5613a211732b1",
      "alm_examples": [
        {
          "api_version": "postgres-operator.crunchydata.com/v1beta1",
          "kind": "PostgresCluster",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "instances": [
              {
                "dataVolumeClaimSpec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                },
                "replicas": 1
              }
            ],
            "postgresVersion": 13
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "bundle_path_digest": "sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "v5",
      "creation_date": "2022-09-13T21:12:17.592000+00:00",
      "csv_description": "[PGO](https://github.com/CrunchyData/postgres-operator), the\n[Postgres Operator](https://github.com/CrunchyData/postgres-operator) from\n[Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that\nautomatically manages your [PostgreSQL](https://www.postgresql.org) clusters.\n\nDesigned for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)\nwith Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres\ncluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.\nEven better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!\n\nWith conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive\nchanges with minimal downtime, PGO is ready to support your Postgres data at every stage of your\nrelease pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired\nstate so you do not need to worry about it.\n\nPGO is developed with many years of production experience in automating Postgres management on\nKubernetes, providing a seamless cloud native Postgres solution to keep your data always available.\n\n- **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],\n  while fully customizing your Pods and PostgreSQL configuration!\n- **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].\n  Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!\n  Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled\n  backups as well and set your backup retention policy\n- **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and\n  [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].\n  Set how long you want your backups retained for. Works great with very large databases!\n- **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.\n- **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.\n- **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.\n- **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].\n- **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.\n  Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!\n- **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running\n  and fully customize your deployments, including:\n    - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.\n    - Use your own container image repository, including support `imagePullSecrets` and private repositories\n    - [Customize your PostgreSQL configuration][customize-cluster]\n\nand much more!\n\n[backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/\n[clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster\n[customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/\n[disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/\n[high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/\n[monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/\n[pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/\n[resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/\n[tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls\n\n[k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n[k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/\n\n[pgBackRest]: https://www.pgbackrest.org\n[pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[pgMonitor]: https://github.com/CrunchyData/pgmonitor\n\n\n## Post-Installation\n\n### Tutorial\n\nWant to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!\n\n[tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial",
      "csv_display_name": "Crunchy Postgres for Kubernetes",
      "csv_metadata_description": "Production Postgres Made Easy",
      "csv_name": "postgresoperator.v5.2.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:58:24.191000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "crunchy-postgres-operator",
      "provided_apis": [
        {
          "group": "postgres-operator.crunchydata.com",
          "kind": "PostgresCluster",
          "plural": "postgresclusters",
          "version": "v1beta1"
        }
      ],
      "provider": "Crunchy Data",
      "related_images": [
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "PGADMIN"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "PGBACKREST"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "PGBOUNCER"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "PGEXPORTER"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "POSTGRES_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "POSTGRES_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "POSTGRES_13_GIS_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "POSTGRES_13_GIS_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "POSTGRES_14_GIS_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "POSTGRES_14_GIS_3.2"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator-4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961-annotation"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "operator"
        },
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "pgadmin"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "pgbackrest"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "pgbouncer"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "pgexporter"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "postgres_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "postgres_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "postgres_13_gis_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "postgres_13_gis_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "postgres_14_gis_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "postgres_14_gis_3.2"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "5.2.0",
      "version_original": "5.2.0"
    },
    {
      "_id": "6320f31702d5613a211732c6",
      "alm_examples": [
        {
          "api_version": "postgres-operator.crunchydata.com/v1beta1",
          "kind": "PostgresCluster",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "instances": [
              {
                "dataVolumeClaimSpec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                },
                "replicas": 1
              }
            ],
            "postgresVersion": 13
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "bundle_path_digest": "sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "v5",
      "creation_date": "2022-09-13T21:16:07.339000+00:00",
      "csv_description": "[PGO](https://github.com/CrunchyData/postgres-operator), the\n[Postgres Operator](https://github.com/CrunchyData/postgres-operator) from\n[Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that\nautomatically manages your [PostgreSQL](https://www.postgresql.org) clusters.\n\nDesigned for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)\nwith Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres\ncluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.\nEven better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!\n\nWith conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive\nchanges with minimal downtime, PGO is ready to support your Postgres data at every stage of your\nrelease pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired\nstate so you do not need to worry about it.\n\nPGO is developed with many years of production experience in automating Postgres management on\nKubernetes, providing a seamless cloud native Postgres solution to keep your data always available.\n\n- **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],\n  while fully customizing your Pods and PostgreSQL configuration!\n- **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].\n  Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!\n  Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled\n  backups as well and set your backup retention policy\n- **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and\n  [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].\n  Set how long you want your backups retained for. Works great with very large databases!\n- **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.\n- **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.\n- **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.\n- **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].\n- **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.\n  Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!\n- **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running\n  and fully customize your deployments, including:\n    - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.\n    - Use your own container image repository, including support `imagePullSecrets` and private repositories\n    - [Customize your PostgreSQL configuration][customize-cluster]\n\nand much more!\n\n[backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/\n[clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster\n[customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/\n[disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/\n[high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/\n[monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/\n[pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/\n[resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/\n[tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls\n\n[k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n[k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/\n\n[pgBackRest]: https://www.pgbackrest.org\n[pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[pgMonitor]: https://github.com/CrunchyData/pgmonitor\n\n\n## Post-Installation\n\n### Tutorial\n\nWant to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!\n\n[tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial",
      "csv_display_name": "Crunchy Postgres for Kubernetes",
      "csv_metadata_description": "Production Postgres Made Easy",
      "csv_name": "postgresoperator.v5.2.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:23:41.963000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "crunchy-postgres-operator",
      "provided_apis": [
        {
          "group": "postgres-operator.crunchydata.com",
          "kind": "PostgresCluster",
          "version": "v1beta1"
        }
      ],
      "provider": "Crunchy Data",
      "related_images": [
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "PGADMIN"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "PGBACKREST"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "PGBOUNCER"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "PGEXPORTER"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "POSTGRES_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "POSTGRES_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "POSTGRES_13_GIS_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "POSTGRES_13_GIS_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "POSTGRES_14_GIS_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "POSTGRES_14_GIS_3.2"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator-4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961-annotation"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "operator"
        },
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "pgadmin"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "pgbackrest"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "pgbouncer"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "pgexporter"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "postgres_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "postgres_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "postgres_13_gis_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "postgres_13_gis_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "postgres_14_gis_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "postgres_14_gis_3.2"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "5.2.0",
      "version_original": "5.2.0"
    },
    {
      "_id": "6320f344b2235c50e9ff25df",
      "alm_examples": [
        {
          "api_version": "postgres-operator.crunchydata.com/v1beta1",
          "kind": "PostgresCluster",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "instances": [
              {
                "dataVolumeClaimSpec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                },
                "replicas": 1
              }
            ],
            "postgresVersion": 13
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "bundle_path_digest": "sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "v5",
      "creation_date": "2022-09-13T21:16:52.528000+00:00",
      "csv_description": "[PGO](https://github.com/CrunchyData/postgres-operator), the\n[Postgres Operator](https://github.com/CrunchyData/postgres-operator) from\n[Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that\nautomatically manages your [PostgreSQL](https://www.postgresql.org) clusters.\n\nDesigned for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)\nwith Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres\ncluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.\nEven better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!\n\nWith conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive\nchanges with minimal downtime, PGO is ready to support your Postgres data at every stage of your\nrelease pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired\nstate so you do not need to worry about it.\n\nPGO is developed with many years of production experience in automating Postgres management on\nKubernetes, providing a seamless cloud native Postgres solution to keep your data always available.\n\n- **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],\n  while fully customizing your Pods and PostgreSQL configuration!\n- **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].\n  Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!\n  Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled\n  backups as well and set your backup retention policy\n- **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and\n  [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].\n  Set how long you want your backups retained for. Works great with very large databases!\n- **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.\n- **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.\n- **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.\n- **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].\n- **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.\n  Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!\n- **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running\n  and fully customize your deployments, including:\n    - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.\n    - Use your own container image repository, including support `imagePullSecrets` and private repositories\n    - [Customize your PostgreSQL configuration][customize-cluster]\n\nand much more!\n\n[backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/\n[clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster\n[customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/\n[disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/\n[high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/\n[monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/\n[pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/\n[resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/\n[tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls\n\n[k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n[k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/\n\n[pgBackRest]: https://www.pgbackrest.org\n[pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[pgMonitor]: https://github.com/CrunchyData/pgmonitor\n\n\n## Post-Installation\n\n### Tutorial\n\nWant to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!\n\n[tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial",
      "csv_display_name": "Crunchy Postgres for Kubernetes",
      "csv_metadata_description": "Production Postgres Made Easy",
      "csv_name": "postgresoperator.v5.2.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:03:52.023000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "crunchy-postgres-operator",
      "provided_apis": [
        {
          "group": "postgres-operator.crunchydata.com",
          "kind": "PostgresCluster",
          "plural": "postgresclusters",
          "version": "v1beta1"
        }
      ],
      "provider": "Crunchy Data",
      "related_images": [
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "PGADMIN"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "PGBACKREST"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "PGBOUNCER"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "PGEXPORTER"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "POSTGRES_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "POSTGRES_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "POSTGRES_13_GIS_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "POSTGRES_13_GIS_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "POSTGRES_14_GIS_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "POSTGRES_14_GIS_3.2"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator-4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961-annotation"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "operator"
        },
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "pgadmin"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "pgbackrest"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "pgbouncer"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "pgexporter"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "postgres_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "postgres_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "postgres_13_gis_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "postgres_13_gis_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "postgres_14_gis_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "postgres_14_gis_3.2"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "5.2.0",
      "version_original": "5.2.0"
    },
    {
      "_id": "6320f5815bd22605fe3041ca",
      "alm_examples": [
        {
          "api_version": "postgres-operator.crunchydata.com/v1beta1",
          "kind": "PostgresCluster",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "instances": [
              {
                "dataVolumeClaimSpec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                },
                "replicas": 1
              }
            ],
            "postgresVersion": 13
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "bundle_path_digest": "sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "v5",
      "creation_date": "2022-09-13T21:26:25.319000+00:00",
      "csv_description": "[PGO](https://github.com/CrunchyData/postgres-operator), the\n[Postgres Operator](https://github.com/CrunchyData/postgres-operator) from\n[Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that\nautomatically manages your [PostgreSQL](https://www.postgresql.org) clusters.\n\nDesigned for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)\nwith Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres\ncluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.\nEven better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!\n\nWith conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive\nchanges with minimal downtime, PGO is ready to support your Postgres data at every stage of your\nrelease pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired\nstate so you do not need to worry about it.\n\nPGO is developed with many years of production experience in automating Postgres management on\nKubernetes, providing a seamless cloud native Postgres solution to keep your data always available.\n\n- **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],\n  while fully customizing your Pods and PostgreSQL configuration!\n- **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].\n  Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!\n  Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled\n  backups as well and set your backup retention policy\n- **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and\n  [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].\n  Set how long you want your backups retained for. Works great with very large databases!\n- **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.\n- **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.\n- **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.\n- **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].\n- **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.\n  Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!\n- **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running\n  and fully customize your deployments, including:\n    - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.\n    - Use your own container image repository, including support `imagePullSecrets` and private repositories\n    - [Customize your PostgreSQL configuration][customize-cluster]\n\nand much more!\n\n[backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/\n[clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster\n[customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/\n[disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/\n[high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/\n[monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/\n[pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/\n[resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/\n[tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls\n\n[k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n[k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/\n\n[pgBackRest]: https://www.pgbackrest.org\n[pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[pgMonitor]: https://github.com/CrunchyData/pgmonitor\n\n\n## Post-Installation\n\n### Tutorial\n\nWant to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!\n\n[tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial",
      "csv_display_name": "Crunchy Postgres for Kubernetes",
      "csv_metadata_description": "Production Postgres Made Easy",
      "csv_name": "postgresoperator.v5.2.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:02:17.773000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "crunchy-postgres-operator",
      "provided_apis": [
        {
          "group": "postgres-operator.crunchydata.com",
          "kind": "PostgresCluster",
          "plural": "postgresclusters",
          "version": "v1beta1"
        }
      ],
      "provider": "Crunchy Data",
      "related_images": [
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "PGADMIN"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "PGBACKREST"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "PGBOUNCER"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "PGEXPORTER"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "POSTGRES_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "POSTGRES_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "POSTGRES_13_GIS_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "POSTGRES_13_GIS_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "POSTGRES_14_GIS_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "POSTGRES_14_GIS_3.2"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator-4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961-annotation"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "operator"
        },
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "pgadmin"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "pgbackrest"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "pgbouncer"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "pgexporter"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "postgres_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "postgres_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "postgres_13_gis_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "postgres_13_gis_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "postgres_14_gis_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "postgres_14_gis_3.2"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "5.2.0",
      "version_original": "5.2.0"
    },
    {
      "_id": "6320f59e95f6149e57163c42",
      "alm_examples": [
        {
          "api_version": "postgres-operator.crunchydata.com/v1beta1",
          "kind": "PostgresCluster",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "instances": [
              {
                "dataVolumeClaimSpec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                },
                "replicas": 1
              }
            ],
            "postgresVersion": 13
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "bundle_path_digest": "sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "v5",
      "creation_date": "2022-09-13T21:26:54.695000+00:00",
      "csv_description": "[PGO](https://github.com/CrunchyData/postgres-operator), the\n[Postgres Operator](https://github.com/CrunchyData/postgres-operator) from\n[Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that\nautomatically manages your [PostgreSQL](https://www.postgresql.org) clusters.\n\nDesigned for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)\nwith Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres\ncluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.\nEven better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!\n\nWith conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive\nchanges with minimal downtime, PGO is ready to support your Postgres data at every stage of your\nrelease pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired\nstate so you do not need to worry about it.\n\nPGO is developed with many years of production experience in automating Postgres management on\nKubernetes, providing a seamless cloud native Postgres solution to keep your data always available.\n\n- **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],\n  while fully customizing your Pods and PostgreSQL configuration!\n- **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].\n  Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!\n  Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled\n  backups as well and set your backup retention policy\n- **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and\n  [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].\n  Set how long you want your backups retained for. Works great with very large databases!\n- **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.\n- **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.\n- **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.\n- **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].\n- **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.\n  Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!\n- **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running\n  and fully customize your deployments, including:\n    - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.\n    - Use your own container image repository, including support `imagePullSecrets` and private repositories\n    - [Customize your PostgreSQL configuration][customize-cluster]\n\nand much more!\n\n[backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/\n[clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster\n[customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/\n[disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/\n[high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/\n[monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/\n[pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/\n[resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/\n[tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls\n\n[k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n[k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/\n\n[pgBackRest]: https://www.pgbackrest.org\n[pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[pgMonitor]: https://github.com/CrunchyData/pgmonitor\n\n\n## Post-Installation\n\n### Tutorial\n\nWant to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!\n\n[tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial",
      "csv_display_name": "Crunchy Postgres for Kubernetes",
      "csv_metadata_description": "Production Postgres Made Easy",
      "csv_name": "postgresoperator.v5.2.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:55:21.106000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.7",
      "organization": "certified-operators",
      "package": "crunchy-postgres-operator",
      "provided_apis": [
        {
          "group": "postgres-operator.crunchydata.com",
          "kind": "PostgresCluster",
          "plural": "postgresclusters",
          "version": "v1beta1"
        }
      ],
      "provider": "Crunchy Data",
      "related_images": [
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "PGADMIN"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "PGBACKREST"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "PGBOUNCER"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "PGEXPORTER"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "POSTGRES_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "POSTGRES_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "POSTGRES_13_GIS_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "POSTGRES_13_GIS_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "POSTGRES_14_GIS_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "POSTGRES_14_GIS_3.2"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator-4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961-annotation"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "operator"
        },
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "pgadmin"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "pgbackrest"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "pgbouncer"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "pgexporter"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "postgres_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "postgres_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "postgres_13_gis_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "postgres_13_gis_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "postgres_14_gis_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "postgres_14_gis_3.2"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.7",
      "version": "5.2.0",
      "version_original": "5.2.0"
    },
    {
      "_id": "6320f7da263c8891608384d0",
      "alm_examples": [
        {
          "api_version": "postgres-operator.crunchydata.com/v1beta1",
          "kind": "PostgresCluster",
          "metadata": {
            "name": "example"
          },
          "spec": {
            "instances": [
              {
                "dataVolumeClaimSpec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                },
                "replicas": 1
              }
            ],
            "postgresVersion": 13
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "bundle_path_digest": "sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "v5",
      "creation_date": "2022-09-13T21:36:26.784000+00:00",
      "csv_description": "[PGO](https://github.com/CrunchyData/postgres-operator), the\n[Postgres Operator](https://github.com/CrunchyData/postgres-operator) from\n[Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that\nautomatically manages your [PostgreSQL](https://www.postgresql.org) clusters.\n\nDesigned for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)\nwith Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres\ncluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.\nEven better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!\n\nWith conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive\nchanges with minimal downtime, PGO is ready to support your Postgres data at every stage of your\nrelease pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired\nstate so you do not need to worry about it.\n\nPGO is developed with many years of production experience in automating Postgres management on\nKubernetes, providing a seamless cloud native Postgres solution to keep your data always available.\n\n- **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],\n  while fully customizing your Pods and PostgreSQL configuration!\n- **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].\n  Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!\n  Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled\n  backups as well and set your backup retention policy\n- **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and\n  [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].\n  Set how long you want your backups retained for. Works great with very large databases!\n- **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.\n- **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.\n- **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.\n- **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].\n- **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.\n  Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!\n- **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running\n  and fully customize your deployments, including:\n    - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.\n    - Use your own container image repository, including support `imagePullSecrets` and private repositories\n    - [Customize your PostgreSQL configuration][customize-cluster]\n\nand much more!\n\n[backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/\n[clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster\n[customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/\n[disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/\n[high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/\n[monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/\n[pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/\n[resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/\n[tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls\n\n[k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n[k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/\n\n[pgBackRest]: https://www.pgbackrest.org\n[pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/\n[pgMonitor]: https://github.com/CrunchyData/pgmonitor\n\n\n## Post-Installation\n\n### Tutorial\n\nWant to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!\n\n[tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial",
      "csv_display_name": "Crunchy Postgres for Kubernetes",
      "csv_metadata_description": "Production Postgres Made Easy",
      "csv_name": "postgresoperator.v5.2.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T11:40:10.964000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.6",
      "organization": "certified-operators",
      "package": "crunchy-postgres-operator",
      "provided_apis": [
        {
          "group": "postgres-operator.crunchydata.com",
          "kind": "PostgresCluster",
          "plural": "postgresclusters",
          "version": "v1beta1"
        }
      ],
      "provider": "Crunchy Data",
      "related_images": [
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "PGADMIN"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "PGBACKREST"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "PGBOUNCER"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "PGEXPORTER"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "POSTGRES_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "POSTGRES_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "POSTGRES_13_GIS_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "POSTGRES_13_GIS_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "POSTGRES_14_GIS_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "POSTGRES_14_GIS_3.2"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "postgres-operator-4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961-annotation"
        },
        {
          "digest": "sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "image": "registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961",
          "name": "operator"
        },
        {
          "digest": "sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928",
          "name": "pgadmin"
        },
        {
          "digest": "sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887",
          "name": "pgbackrest"
        },
        {
          "digest": "sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2",
          "name": "pgbouncer"
        },
        {
          "digest": "sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134",
          "name": "pgexporter"
        },
        {
          "digest": "sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3",
          "name": "postgres_13"
        },
        {
          "digest": "sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961",
          "name": "postgres_14"
        },
        {
          "digest": "sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9",
          "name": "postgres_13_gis_3.0"
        },
        {
          "digest": "sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f",
          "name": "postgres_13_gis_3.1"
        },
        {
          "digest": "sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8",
          "name": "postgres_14_gis_3.1"
        },
        {
          "digest": "sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "image": "registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4",
          "name": "postgres_14_gis_3.2"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.6",
      "version": "5.2.0",
      "version_original": "5.2.0"
    },
    {
      "_id": "632121d6eeedbe5c5aeb3f78",
      "alm_examples": [
        {
          "api_version": "rtf.operators.mulesoft.com/v1",
          "kind": "RuntimeFabric",
          "metadata": {
            "name": "runtime-fabric"
          },
          "spec": {
            "agent": {
              "app": {
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "500Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                }
              },
              "rtfd": {
                "resources": {
                  "limits": {
                    "cpu": "50m",
                    "memory": "50Mi"
                  },
                  "requests": {
                    "cpu": "20m",
                    "memory": "50Mi"
                  }
                }
              }
            },
            "global": {
              "authorizedNamespaces": false,
              "cluster": {
                "flavor": "byok",
                "type": "openshift"
              },
              "containerLogPaths": [
                "/var/lib/docker/containers",
                "/var/log/containers",
                "/var/log/pods"
              ],
              "core": {
                "affinity": {},
                "tolerations": []
              },
              "deployment": {
                "nodeSelector": ""
              },
              "image": {
                "provider": "aws",
                "pullSecretName": "rtf-pull-secret",
                "rtfRegistry": "rtf-runtime-registry.kprod.msap.io"
              },
              "logForwarding": {
                "anypointMonitoring": false
              },
              "mule": {
                "disablePerAppSA": false
              },
              "service": {}
            },
            "proxy": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/oscargcervantes/runtime-fabric-operator@sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "bundle_path_digest": "sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-14T00:35:34.643000+00:00",
      "csv_description": "Anypoint Runtime Fabric is a container service that you install in your existing Red Hat OpenShift cluster that enables you to run Mule applications, composite APIs, and API gateways across any environment with centralized management via Anypoint Platform.\n\nCapabilities of Runtime Fabric include:\n\n* Isolation between applications by running a separate Mule runtime server per application.\n* Ability to run multiple versions of Mule runtime server on the same set of resources.\n* Scaling applications across multiple replicas.\n* Automated application fail-over.\n* Application management with Anypoint Runtime Manager.\n\nRuntime Fabric supports the following Red Hat OpenShift deployment options:\n\n* Red Hat OpenShift Service on AWS\n* Microsoft Azure Red Hat OpenShift\n* Red Hat OpenShift Dedicated\n* Red Hat OpenShift on IBM Cloud\n* Self-managed Red Hat OpenShift editions (Performance Plus, OCP, Kubernetes engine)\n\nRuntime Fabric supports Red Hat OpenShift versions 4.6 to 4.10.",
      "csv_display_name": "Runtime Fabric Operator",
      "csv_metadata_description": "Runtime Fabric Operator Application from Mulesoft",
      "csv_name": "runtime-fabric-operator.v2.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:00:22.090000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.10",
      "organization": "certified-operators",
      "package": "runtime-fabric-operator",
      "provided_apis": [
        {
          "group": "rtf.operators.mulesoft.com",
          "kind": "RuntimeFabric",
          "plural": "runtimefabrics",
          "version": "v1"
        }
      ],
      "provider": "MuleSoft",
      "related_images": [
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator-7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f-annotation"
        },
        {
          "digest": "sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "image": "quay.io/mulesoft/kube-rbac-proxy@sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.10",
      "version": "2.0.0",
      "version_original": "2.0.0"
    },
    {
      "_id": "632121f6b180bb9cb665ef2c",
      "alm_examples": [
        {
          "api_version": "rtf.operators.mulesoft.com/v1",
          "kind": "RuntimeFabric",
          "metadata": {
            "name": "runtime-fabric"
          },
          "spec": {
            "agent": {
              "app": {
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "500Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                }
              },
              "rtfd": {
                "resources": {
                  "limits": {
                    "cpu": "50m",
                    "memory": "50Mi"
                  },
                  "requests": {
                    "cpu": "20m",
                    "memory": "50Mi"
                  }
                }
              }
            },
            "global": {
              "authorizedNamespaces": false,
              "cluster": {
                "flavor": "byok",
                "type": "openshift"
              },
              "containerLogPaths": [
                "/var/lib/docker/containers",
                "/var/log/containers",
                "/var/log/pods"
              ],
              "core": {
                "affinity": {},
                "tolerations": []
              },
              "deployment": {
                "nodeSelector": ""
              },
              "image": {
                "provider": "aws",
                "pullSecretName": "rtf-pull-secret",
                "rtfRegistry": "rtf-runtime-registry.kprod.msap.io"
              },
              "logForwarding": {
                "anypointMonitoring": false
              },
              "mule": {
                "disablePerAppSA": false
              },
              "service": {}
            },
            "proxy": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/oscargcervantes/runtime-fabric-operator@sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "bundle_path_digest": "sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-14T00:36:06.266000+00:00",
      "csv_description": "Anypoint Runtime Fabric is a container service that you install in your existing Red Hat OpenShift cluster that enables you to run Mule applications, composite APIs, and API gateways across any environment with centralized management via Anypoint Platform.\n\nCapabilities of Runtime Fabric include:\n\n* Isolation between applications by running a separate Mule runtime server per application.\n* Ability to run multiple versions of Mule runtime server on the same set of resources.\n* Scaling applications across multiple replicas.\n* Automated application fail-over.\n* Application management with Anypoint Runtime Manager.\n\nRuntime Fabric supports the following Red Hat OpenShift deployment options:\n\n* Red Hat OpenShift Service on AWS\n* Microsoft Azure Red Hat OpenShift\n* Red Hat OpenShift Dedicated\n* Red Hat OpenShift on IBM Cloud\n* Self-managed Red Hat OpenShift editions (Performance Plus, OCP, Kubernetes engine)\n\nRuntime Fabric supports Red Hat OpenShift versions 4.6 to 4.10.",
      "csv_display_name": "Runtime Fabric Operator",
      "csv_metadata_description": "Runtime Fabric Operator Application from Mulesoft",
      "csv_name": "runtime-fabric-operator.v2.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:07:08.423000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.9",
      "organization": "certified-operators",
      "package": "runtime-fabric-operator",
      "provided_apis": [
        {
          "group": "rtf.operators.mulesoft.com",
          "kind": "RuntimeFabric",
          "plural": "runtimefabrics",
          "version": "v1"
        }
      ],
      "provider": "MuleSoft",
      "related_images": [
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator-7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f-annotation"
        },
        {
          "digest": "sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "image": "quay.io/mulesoft/kube-rbac-proxy@sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.9",
      "version": "2.0.0",
      "version_original": "2.0.0"
    },
    {
      "_id": "632121ff02d5613a21173682",
      "alm_examples": [
        {
          "api_version": "rtf.operators.mulesoft.com/v1",
          "kind": "RuntimeFabric",
          "metadata": {
            "name": "runtime-fabric"
          },
          "spec": {
            "agent": {
              "app": {
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "500Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                }
              },
              "rtfd": {
                "resources": {
                  "limits": {
                    "cpu": "50m",
                    "memory": "50Mi"
                  },
                  "requests": {
                    "cpu": "20m",
                    "memory": "50Mi"
                  }
                }
              }
            },
            "global": {
              "authorizedNamespaces": false,
              "cluster": {
                "flavor": "byok",
                "type": "openshift"
              },
              "containerLogPaths": [
                "/var/lib/docker/containers",
                "/var/log/containers",
                "/var/log/pods"
              ],
              "core": {
                "affinity": {},
                "tolerations": []
              },
              "deployment": {
                "nodeSelector": ""
              },
              "image": {
                "provider": "aws",
                "pullSecretName": "rtf-pull-secret",
                "rtfRegistry": "rtf-runtime-registry.kprod.msap.io"
              },
              "logForwarding": {
                "anypointMonitoring": false
              },
              "mule": {
                "disablePerAppSA": false
              },
              "service": {}
            },
            "proxy": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/oscargcervantes/runtime-fabric-operator@sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "bundle_path_digest": "sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-14T00:36:15.864000+00:00",
      "csv_description": "Anypoint Runtime Fabric is a container service that you install in your existing Red Hat OpenShift cluster that enables you to run Mule applications, composite APIs, and API gateways across any environment with centralized management via Anypoint Platform.\n\nCapabilities of Runtime Fabric include:\n\n* Isolation between applications by running a separate Mule runtime server per application.\n* Ability to run multiple versions of Mule runtime server on the same set of resources.\n* Scaling applications across multiple replicas.\n* Automated application fail-over.\n* Application management with Anypoint Runtime Manager.\n\nRuntime Fabric supports the following Red Hat OpenShift deployment options:\n\n* Red Hat OpenShift Service on AWS\n* Microsoft Azure Red Hat OpenShift\n* Red Hat OpenShift Dedicated\n* Red Hat OpenShift on IBM Cloud\n* Self-managed Red Hat OpenShift editions (Performance Plus, OCP, Kubernetes engine)\n\nRuntime Fabric supports Red Hat OpenShift versions 4.6 to 4.10.",
      "csv_display_name": "Runtime Fabric Operator",
      "csv_metadata_description": "Runtime Fabric Operator Application from Mulesoft",
      "csv_name": "runtime-fabric-operator.v2.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:14:49.737000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.11",
      "organization": "certified-operators",
      "package": "runtime-fabric-operator",
      "provided_apis": [
        {
          "group": "rtf.operators.mulesoft.com",
          "kind": "RuntimeFabric",
          "version": "v1"
        }
      ],
      "provider": "MuleSoft",
      "related_images": [
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator-7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f-annotation"
        },
        {
          "digest": "sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "image": "quay.io/mulesoft/kube-rbac-proxy@sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.11",
      "version": "2.0.0",
      "version_original": "2.0.0"
    },
    {
      "_id": "6321226ceeedbe5c5aeb3f88",
      "alm_examples": [
        {
          "api_version": "rtf.operators.mulesoft.com/v1",
          "kind": "RuntimeFabric",
          "metadata": {
            "name": "runtime-fabric"
          },
          "spec": {
            "agent": {
              "app": {
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "500Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "200Mi"
                  }
                }
              },
              "rtfd": {
                "resources": {
                  "limits": {
                    "cpu": "50m",
                    "memory": "50Mi"
                  },
                  "requests": {
                    "cpu": "20m",
                    "memory": "50Mi"
                  }
                }
              }
            },
            "global": {
              "authorizedNamespaces": false,
              "cluster": {
                "flavor": "byok",
                "type": "openshift"
              },
              "containerLogPaths": [
                "/var/lib/docker/containers",
                "/var/log/containers",
                "/var/log/pods"
              ],
              "core": {
                "affinity": {},
                "tolerations": []
              },
              "deployment": {
                "nodeSelector": ""
              },
              "image": {
                "provider": "aws",
                "pullSecretName": "rtf-pull-secret",
                "rtfRegistry": "rtf-runtime-registry.kprod.msap.io"
              },
              "logForwarding": {
                "anypointMonitoring": false
              },
              "mule": {
                "disablePerAppSA": false
              },
              "service": {}
            },
            "proxy": {}
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/oscargcervantes/runtime-fabric-operator@sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "bundle_path_digest": "sha256:06dafc64ad74815cbdc9c8426400d251fc4861c40436aecc38eadbac486c86e8",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2022-09-14T00:38:04.918000+00:00",
      "csv_description": "Anypoint Runtime Fabric is a container service that you install in your existing Red Hat OpenShift cluster that enables you to run Mule applications, composite APIs, and API gateways across any environment with centralized management via Anypoint Platform.\n\nCapabilities of Runtime Fabric include:\n\n* Isolation between applications by running a separate Mule runtime server per application.\n* Ability to run multiple versions of Mule runtime server on the same set of resources.\n* Scaling applications across multiple replicas.\n* Automated application fail-over.\n* Application management with Anypoint Runtime Manager.\n\nRuntime Fabric supports the following Red Hat OpenShift deployment options:\n\n* Red Hat OpenShift Service on AWS\n* Microsoft Azure Red Hat OpenShift\n* Red Hat OpenShift Dedicated\n* Red Hat OpenShift on IBM Cloud\n* Self-managed Red Hat OpenShift editions (Performance Plus, OCP, Kubernetes engine)\n\nRuntime Fabric supports Red Hat OpenShift versions 4.6 to 4.10.",
      "csv_display_name": "Runtime Fabric Operator",
      "csv_metadata_description": "Runtime Fabric Operator Application from Mulesoft",
      "csv_name": "runtime-fabric-operator.v2.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": false,
          "type": "OwnNamespace"
        },
        {
          "supported": false,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-09-19T12:06:01.407000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "runtime-fabric-operator",
      "provided_apis": [
        {
          "group": "rtf.operators.mulesoft.com",
          "kind": "RuntimeFabric",
          "plural": "runtimefabrics",
          "version": "v1"
        }
      ],
      "provider": "MuleSoft",
      "related_images": [
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "runtime-fabric-operator-7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f-annotation"
        },
        {
          "digest": "sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "image": "quay.io/mulesoft/kube-rbac-proxy@sha256:a4f6c39b17f2ba68366c6d4e139ed18ede2ad9f3f9d5bf7477bdcbef73b43e54",
          "name": "kube-rbac-proxy"
        },
        {
          "digest": "sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "image": "quay.io/mulesoft/runtime-fabric-operator@sha256:7cfc84f28da1a6350f2c2f9c610bc425e4717757536fd908a4d0ec7ca5ff414f",
          "name": "manager"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "2.0.0",
      "version_original": "2.0.0"
    }
  ]
}
