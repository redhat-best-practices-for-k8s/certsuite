{
  "data": [
    {
      "_id": "60470f9b5a00810ecaf7c437",
      "alm_examples": [
        {
          "api_version": "csi.ibm.com/v1",
          "kind": "CSIScaleOperator",
          "metadata": {
            "labels": {
              "app.kubernetes.io/instance": "ibm-spectrum-scale-csi-operator",
              "app.kubernetes.io/managed-by": "ibm-spectrum-scale-csi-operator",
              "app.kubernetes.io/name": "ibm-spectrum-scale-csi-operator",
              "release": "ibm-spectrum-scale-csi-operator"
            },
            "name": "ibm-spectrum-scale-csi"
          },
          "spec": {
            "attacherNodeSelector": [
              {
                "key": "scale",
                "value": "true"
              }
            ],
            "clusters": [
              {
                "id": "< Primary Cluster ID - WARNING - THIS IS A STRING NEEDS YAML QUOTES! >",
                "primary": {
                  "primaryFs": "< Primary Filesystem >"
                },
                "restApi": [
                  {
                    "guiHost": "< Primary cluster GUI IP/Hostname>"
                  }
                ],
                "secrets": "secret1",
                "secureSslMode": false
              }
            ],
            "pluginNodeSelector": [
              {
                "key": "scale",
                "value": "true"
              }
            ],
            "provisionerNodeSelector": [
              {
                "key": "scale",
                "value": "true"
              }
            ],
            "scaleHostpath": "< GPFS FileSystem Path >"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [
        "amd64"
      ],
      "bundle_path": "registry.connect.redhat.com/ibm/ibm-spectrum-scale-csi-operator-bundle@sha256:26e507a96b0473964ab18c84ec899a51c05301e956c3968dae8a0243842f9b5f",
      "bundle_path_digest": "sha256:26e507a96b0473964ab18c84ec899a51c05301e956c3968dae8a0243842f9b5f",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-03-09T06:03:07.180000+00:00",
      "csv_description": "\nThe IBM Spectrum Scale CSI Operator runs within a Kubernetes cluster providing a means to \ndeploy and manage the CSI plugin for spectrum scale. For more in depth documentation please refer\nto the [knowledge center](https://www.ibm.com/support/knowledgecenter/STXKQY_CSI_SHR).\n\nThis operator should be used to deploy the CSI plugin.\n\nThe configuration process is as follows:\n\n1. [Spectrum Scale GUI Setup](#spectrum-scale-gui-setup)\n2. [Custom Resource Configuration](#custom-resource-configuration)\n\nSpectrum Scale GUI Setup \n------------------------\n> **NOTE:** This step only needs to be preformed once per GUI.\n\n> **WARNING:** If your daemonset pods (driver pods) do not come up, generally this means you have a  secret that  has not been defined in the correct namespace.\n\n1. Ensure the Spectrum Scale GUI is running by pointing your browser to the IP hosting the GUI:\n\n \n    > If you do not see a login follow on screen instructions, or review the [GUI Documentation](https://www.ibm.com/support/knowledgecenter/en/STXKQY_5.0.5/com.ibm.spectrum.scale.v5r05.doc/bl1ins_quickrefforgui.htm)\n\n\n3. Create a CsiAdmin group account on in the GUI (currently requires a CLI call):\n\n   ```\n\n   export USERNAME=\"SomeUser\"\n   export PASSWORD=\"SomePassword\"\n   /usr/lpp/mmfs/gui/cli/mkuser ${USERNAME} -p ${PASSWORD} -g CsiAdmin\n\n   ```\n\n3. Create a Kubernetes secret for the `CsiAdmin` user:\n\n  ```\n\n  export USERNAME_B64=$(echo $USERNAME | base64)\n  export PASSWORD_B64=$(echo $PASSWORD | base64)\n  export OPERATOR_NAMESPACE=\"ibm-spectrum-scale-csi-driver\"  # Set this to the namespace you deploy the operator in.\n  \n\n  cat << EOF > /tmp/csisecret.yaml\n  apiVersion: v1\n  data:\n    password: ${PASSWORD_B64}\n    username: ${USERNAME_B64}\n  kind: Secret\n  type: Opaque\n  metadata:\n    name: csisecret    # This should be in your CSIScaleOperator definition\n    namespace: ${OPERATOR_NAMESPACE} \n    labels:\n      app.kubernetes.io/name: ibm-spectrum-scale-csi-operator # Used by the operator to detect changes, set on load of CR change if secret matches name in CR and namespace.\n  EOF\n  \n\n  kubectl create -f /tmp/csisecret.yaml\n  rm -f /tmp/csisecret.yaml\n  \n  ```\n\nCustom Resource Configuration\n-----------------------------\n\nThe bundled Custom Resource example represents the minimum settings needed to run the operator.\nIf your environment needs more advanced settings (e.g. remote clusters, node mapping, etc.) please\nrefer to the sample [Custom Resource](https://raw.githubusercontent.com/IBM/ibm-spectrum-scale-csi/v2.1.0/operator/deploy/crds/csiscaleoperators.csi.ibm.com_cr.yaml).\n\n\n",
      "csv_display_name": "IBM Spectrum Scale CSI Plugin Operator",
      "csv_metadata_description": "An operator for deploying and managing the IBM Spectrum Scale CSI Driver.",
      "csv_name": "ibm-spectrum-scale-csi-operator.v2.1.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:22:07.840000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "ibm-spectrum-scale-csi",
      "provided_apis": [
        {
          "group": "csi.ibm.com",
          "kind": "CSIScaleOperator",
          "plural": "csiscaleoperators",
          "version": "v1"
        }
      ],
      "provider": "IBM",
      "related_images": [
        {
          "digest": "sha256:46a8ce82a1c68e44432136aa3f55dc52ca6201e1920dfa53de4c62d740ea62dc",
          "image": "registry.connect.redhat.com/ibm/ibm-spectrum-scale-csi-operator@sha256:46a8ce82a1c68e44432136aa3f55dc52ca6201e1920dfa53de4c62d740ea62dc",
          "name": "ibm-spectrum-scale-csi-operator-46a8ce82a1c68e44432136aa3f55dc52ca6201e1920dfa53de4c62d740ea62dc-annotation"
        },
        {
          "digest": "sha256:46a8ce82a1c68e44432136aa3f55dc52ca6201e1920dfa53de4c62d740ea62dc",
          "image": "registry.connect.redhat.com/ibm/ibm-spectrum-scale-csi-operator@sha256:46a8ce82a1c68e44432136aa3f55dc52ca6201e1920dfa53de4c62d740ea62dc",
          "name": "operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "2.1.0",
      "version_original": "2.1.0"
    },
    {
      "_id": "60470fa06280a414853ec527",
      "alm_examples": [
        {
          "api_version": "insightedge.gigaspaces.com/v1alpha1",
          "kind": "Insightedge",
          "metadata": {
            "name": "example-insightedge"
          },
          "spec": {
            "manager": {
              "antiAffinity": {
                "enabled": false
              },
              "ha": false,
              "hs": {
                "lus": 4174,
                "zkClient": 2181,
                "zkLeaderElection": 3888,
                "zkServer": 2888
              },
              "java": {
                "heap": "limit-150Mi",
                "options": "-Duser.home=/opt/gigaspaces"
              },
              "nameOverride": "insightedge-manager",
              "resources": {
                "limits": {
                  "memory": "300Mi"
                }
              },
              "service": {
                "api": {
                  "enabled": true,
                  "port": 8090
                },
                "lrmi": {
                  "enabled": false,
                  "port": 8200
                },
                "lus": {
                  "enabled": true,
                  "port": 4174
                },
                "type": "LoadBalancer"
              },
              "terminationGracePeriodSeconds": 30
            },
            "pu": {
              "antiAffinity": {
                "enabled": false
              },
              "java": {
                "heap": "limit-150Mi",
                "options": "-Duser.home=/opt/gigaspaces"
              },
              "license": "tryme",
              "livenessProbe": {
                "enabled": false,
                "failureThreshold": 3,
                "initialDelaySeconds": 30,
                "periodSeconds": 5
              },
              "manager": {
                "discoveryTimeoutSeconds": 60,
                "ports": {
                  "api": 8090
                }
              },
              "memoryXtendVolume": {
                "enabled": false,
                "volumeClaimTemplate": {
                  "accessModes": "ReadWriteOnce",
                  "persistentVolumeReclaimPolicy": "Delete"
                },
                "volumeMount": {
                  "mountPath": "/opt/gigaspaces/work/memoryxtend",
                  "name": "mx-volume"
                }
              },
              "nameOverride": "insightedge-pu",
              "readinessProbe": {
                "enabled": false,
                "failureThreshold": 3,
                "initialDelaySeconds": 30,
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "400Mi"
                }
              },
              "service": {
                "lrmi": {
                  "enabled": false,
                  "port": 8200
                },
                "type": "LoadBalancer"
              },
              "terminationGracePeriodSeconds": 30
            },
            "zeppelin": {
              "nameOverride": "insightedge-zeppelin",
              "service": {
                "api": {
                  "port": 9090
                },
                "type": "LoadBalancer"
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/gigaspaces/insightedge-operator-bundle@sha256:f4cd0ec77bc5f19409242c4e5990447281b6bd60b8d0eff848744a431c73cd22",
      "bundle_path_digest": "sha256:f4cd0ec77bc5f19409242c4e5990447281b6bd60b8d0eff848744a431c73cd22",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-03-09T06:03:12.184000+00:00",
      "csv_description": "InsightEdge is an in-memory real-time analytics platform for instant insights to action. It's an always-on platform for mission-critical applications across cloud, on-premise or hybrid. InsightEdge operationalizes machine learning and transactional processing, at scale; analyzing data as it's born, enriching it with historical context, for instant insights.\n",
      "csv_display_name": "Insightedge Enterprise Operator",
      "csv_metadata_description": "InsightEdge is an in-memory real-time analytics platform for instant insights to action. It's an always-on platform for mission-critical applications across cloud, on-premise or hybrid. InsightEdge operationalizes machine learning and transactional processing, at scale; analyzing data as it's born, enriching it with historical context, for instant insights.\n",
      "csv_name": "insightedge-enterprise-operator.v15.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T12:58:02.850000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "insightedge-enterprise-operator2",
      "provided_apis": [
        {
          "group": "insightedge.gigaspaces.com",
          "kind": "Insightedge",
          "plural": "insightedges",
          "version": "v1alpha1"
        }
      ],
      "provider": "Gigaspaces",
      "related_images": [
        {
          "digest": "sha256:d7d9b079a93b715d7ca94d64b08e73798f1b036c118c742b2bd031030bd1d17d",
          "image": "registry.connect.redhat.com/gigaspaces/insightedge-operator@sha256:d7d9b079a93b715d7ca94d64b08e73798f1b036c118c742b2bd031030bd1d17d",
          "name": "insightedge-operator-d7d9b079a93b715d7ca94d64b08e73798f1b036c118c742b2bd031030bd1d17d-annotation"
        },
        {
          "digest": "sha256:d7d9b079a93b715d7ca94d64b08e73798f1b036c118c742b2bd031030bd1d17d",
          "image": "registry.connect.redhat.com/gigaspaces/insightedge-operator@sha256:d7d9b079a93b715d7ca94d64b08e73798f1b036c118c742b2bd031030bd1d17d",
          "name": "insightedge-enterprise-operator"
        },
        {
          "digest": "sha256:5cbd8ca9553a7a3e8cd4b99d1231d92201146745c8531e159cccfc4cd3a74ceb",
          "image": "registry.connect.redhat.com/gigaspaces/insightedge@sha256:5cbd8ca9553a7a3e8cd4b99d1231d92201146745c8531e159cccfc4cd3a74ceb",
          "name": "insightedge"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "15.0.1",
      "version_original": "15.0.1"
    },
    {
      "_id": "60470fa56280a414853ec528",
      "alm_examples": [
        {
          "api_version": "dynatrace.com/v1alpha1",
          "kind": "OneAgent",
          "metadata": {
            "name": "oneagent",
            "namespace": "dynatrace"
          },
          "spec": {
            "apiUrl": "https://ENVIRONMENTID.live.dynatrace.com/api",
            "args": [
              "--set-app-log-content-access=true"
            ],
            "tolerations": [
              {
                "effect": "NoSchedule",
                "key": "node-role.kubernetes.io/master",
                "operator": "Exists"
              }
            ]
          }
        },
        {
          "api_version": "dynatrace.com/v1alpha1",
          "kind": "OneAgentAPM",
          "metadata": {
            "name": "oneagentapm",
            "namespace": "dynatrace"
          },
          "spec": {
            "apiUrl": "https://ENVIRONMENTID.live.dynatrace.com/api"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/dynatrace/dynatrace-oneagent-operator-bundle@sha256:fc750e6590bf2336144268bb09688a94e0baca2d5ebfb45b9f734b5cb5f68606",
      "bundle_path_digest": "sha256:fc750e6590bf2336144268bb09688a94e0baca2d5ebfb45b9f734b5cb5f68606",
      "capabilities": [
        "Deep Insights"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-03-09T06:03:17.290000+00:00",
      "csv_description": "The Dynatrace OneAgent Operator allows users to easily deploy full-stack monitoring for [OpenShift clusters](https://www.dynatrace.com/technologies/openshift-monitoring/). The Dynatrace OneAgent automatically monitors the workload running in containers down to the code and request level.\n\n### Installing the OneAgent\nOnce you've installed the Operator, you can create OneAgent custom resources to monitor your environment.\n\nFirst, please add a Secret within the Project you've deployed the Dynatrace Operator to, which would contain your API and PaaS tokens. Create tokens of type *Dynatrace API* (`API_TOKEN`) and *Platform as a Service* (`PAAS_TOKEN`) and use their values in the following commands respectively.\n\nFor assistance please refer to [Create user-generated access tokens](https://www.dynatrace.com/support/help/shortlink/token#create-user-generated-access-tokens).\n\n``` $ oc -n <project> create secret generic oneagent --from-literal=\"apiToken=API_TOKEN\" --from-literal=\"paasToken=PAAS_TOKEN\" ```\n\nYou may update this Secret at any time to rotate the tokens.\n\nThen please add an OneAgent object in the Project where the Operator has been deployed, configured to your needs.\n\n### Required Parameters\n* `apiUrl` - provide the URL to the API of your Dynatrace environment. In Dynatrace SaaS it will look like `https://<ENVIRONMENTID>.live.dynatrace.com/api` . In Dynatrace Managed like `https://<YourDynatraceServerURL>/e/<ENVIRONMENTID>/api` .\n\n### Advanced Options\n* **Image Override** - use a copy of the OneAgent container image from a registry other than Docker's or Red Hat's\n* **NodeSelectors** - select a subset of your cluster's nodes to run the Dynatrace OneAgent on, based on labels\n* **Tolerations** - add specific tolerations to the agent so that it can monitor all of the nodes in your cluster; we include the default toleration so that Dynatrace OneAgent also monitors the master nodes\n* **Priority Class Name** - define the priorityClassName for OneAgent pods\n* **Environment variables** - define environment variables for the OneAgent container\n* **Disable Certificate Checking** - disable any certificate validation that may interact poorly with proxies with in your cluster\n* **Disable OneAgent Update** - disable the Operator's auto-update feature for OneAgent pods\n* **Enable Istio Auto-config** - automatically create Istio objects for egress communication to the Dynatrace environment from the OneAgent\n\nFor a complete list of supported parameters please consult the [Operator Deploy Guide](https://www.dynatrace.com/support/help/shortlink/openshift-deploy).\n\n### Help\nYou can find more about our instructions in our [documentation](https://www.dynatrace.com/support/help/shortlink/openshift-deploy#install-oneagent-operator).\n",
      "csv_display_name": "Dynatrace OneAgent",
      "csv_metadata_description": "Install full-stack monitoring of OpenShift clusters with the Dynatrace OneAgent.",
      "csv_name": "dynatrace-monitoring.v0.9.5",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:30:48.754000+00:00",
      "latest_in_channel": false,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "oneagent-certified",
      "provided_apis": [
        {
          "group": "dynatrace.com",
          "kind": "OneAgentAPM",
          "plural": "oneagentapms",
          "version": "v1alpha1"
        },
        {
          "group": "dynatrace.com",
          "kind": "OneAgent",
          "plural": "oneagents",
          "version": "v1alpha1"
        }
      ],
      "provider": "Dynatrace LLC",
      "related_images": [
        {
          "digest": "sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "image": "registry.connect.redhat.com/dynatrace/dynatrace-oneagent-operator@sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "name": "dynatrace-oneagent-operator-4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed-annotation"
        },
        {
          "digest": "sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "image": "registry.connect.redhat.com/dynatrace/dynatrace-oneagent-operator@sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "name": "dynatrace-oneagent-operator"
        },
        {
          "digest": "sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "image": "registry.connect.redhat.com/dynatrace/dynatrace-oneagent-operator@sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "name": "webhook"
        },
        {
          "digest": "sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "image": "registry.connect.redhat.com/dynatrace/dynatrace-oneagent-operator@sha256:4f626c6f83d93c7c6b6279fa48003ea5cf4ef972cc7831f1d2367f20f0c4afed",
          "name": "bootstrapper"
        },
        {
          "digest": "sha256:7610615cb9b0855aa8dde0bff9a1ec2464e586f5bff13f607c5fd643abd890e0",
          "image": "registry.connect.redhat.com/dynatrace/oneagent@sha256:7610615cb9b0855aa8dde0bff9a1ec2464e586f5bff13f607c5fd643abd890e0",
          "name": "dynatrace_oneagent"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.9.5",
      "version_original": "0.9.5"
    },
    {
      "_id": "60470fa66280a414853ec529",
      "alm_examples": [
        {
          "api_version": "openliberty.io/v1beta1",
          "kind": "OpenLibertyApplication",
          "metadata": {
            "name": "demo-app"
          },
          "spec": {
            "applicationImage": "registry.connect.redhat.com/ibm/open-liberty-samples@sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
            "expose": true,
            "replicas": 1
          }
        },
        {
          "api_version": "openliberty.io/v1beta1",
          "kind": "OpenLibertyDump",
          "metadata": {
            "name": "example-dump"
          },
          "spec": {
            "include": [
              "heap",
              "thread"
            ],
            "podName": "Specify_Pod_Name_Here"
          }
        },
        {
          "api_version": "openliberty.io/v1beta1",
          "kind": "OpenLibertyTrace",
          "metadata": {
            "name": "example-trace"
          },
          "spec": {
            "podName": "Specify_Pod_Name_Here",
            "traceSpecification": "*=info:com.ibm.ws.webcontainer*=all"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/ibm/open-liberty-operator-bundle@sha256:66987dd9d568c2b004a358c9fbbb5c89a74a7512bd43599b2463b08cf44724a4",
      "bundle_path_digest": "sha256:66987dd9d568c2b004a358c9fbbb5c89a74a7512bd43599b2463b08cf44724a4",
      "capabilities": [
        "Auto Pilot"
      ],
      "channel_name": "beta",
      "creation_date": "2021-03-09T06:03:18.711000+00:00",
      "csv_description": "This advanced Operator can be used to deploy and manage Open Liberty applications with consistent, production-grade QoS. This operator is based on the [Runtime Component Operator](https://github.com/application-stacks/runtime-component-operator) and provides all of its capabilities in addition to Open Liberty specific features such as gathering traces and dumps (Day-2 operations) and easily configuring and managing the single sign-on information for your Open Liberty applications.\nOpen Liberty Operator enables enterprise architects to govern the way their applications get deployed & managed in the cluster, while dramatically reducing the learning curve for developers to deploy into Kubernetes - allowing them to focus on writing the code!\nHere are some key features:\n#### Application Lifecyle\nYou can deploy your Open Liberty application container by either pointing to a container image, or an OpenShift ImageStream. When using an ImageStream the Operator will watch for any updates and will re-deploy the modified image.\n\n#### Custom RBAC\nThis Operator is capable of using a custom ServiceAccount from the caller, allowing it to follow RBAC restrictions. By default it creates a ServiceAccount if one is not specified, which can also be bound with specific roles.\n\n#### Environment Configuration\nYou can configured a variety of artifacts with your deployment, such as: labels, annotations, and environment variables from a ConfigMap, a Secret or a value.\n\n#### Routing\nExpose your application to external users via a single toggle to create a Route on OpenShift or an Ingress on other Kubernetes environments. Advanced configuration, such as TLS settings, are also easily enabled.  Expiring Route certificates are re-issued.\n\n#### High Availability via Horizontal Pod Autoscaling\nRun multiple instances of your application for high availability. Either specify a static number of replicas or easily configure horizontal auto scaling to create (and delete) instances based on resource consumption.\n\n#### Persistence and advanced storage\nEnable persistence for your application by specifying simple requirements: just tell us the size of the storage and where you would like it to be mounted and We will create and manage that storage for you.\nThis toggles a StatefulSet resource instead of a Deployment resource, so your container can recover transactions and state upon a pod restart.\nWe offer an advanced mode where the user specifies a built-in PersistentVolumeClaim, allowing them to configure many details of the persistent volume, such as its storage class and access mode.\nYou can also easily configure and use a single storage for serviceability related Day-2 operations, such as gatherig server traces and dumps.\n\n#### Service Binding\nEasily bind to available services in your cluster.  Your runtime components can expose and consume other services by simply specifying the target endpoinds: we take care of the heavy lifting such as creating k8s Secrets, injecting them into your container and watching for any changes in configuration!  This way your applications can dynamically reconnect to its required services without any intervention or interruption.\n\n#### Single Sign-On (SSO)\nOpen Liberty provides capabilities to delegate authentication to external providers. Your application users can log in using their existing social media credentials from providers such as Google, Facebook, LinkedIn, Twitter, GitHub, and any OpenID Connect (OIDC) or OAuth 2.0 clients.\nOpen Liberty Operator allows to easily configure and manage the single sign-on information for your applications.\n#### Exposing metrics to Prometheus\nThe Open Liberty Operator exposes the runtime container's metrics via the [Prometheus Operator](https://operatorhub.io/operator/prometheus).\nUsers can pick between a basic mode, where they simply specify the label that Prometheus is watching to scrape the metrics from the container, or they can specify the full `ServiceMonitor` spec embedded into the OpenLibertyApplication's `spec.monitoring` key controlling things like the poll internal and security credentials.\n#### Easily mount logs and transaction directories\nIf you need to mount the logs and transaction data from your application to an external volume such as NFS (or any storage supported in your cluster), simply add the following (customizing the folder location and size) to your OpenLibertyApplication CR:\n``` storage: size: 2Gi mountPath: \"/logs\" ```\n\n#### Integration with OpenShift's Certificate Manager\nThe Open Liberty Operator takes advantage of the [cert-manager tool](https://cert-manager.io/), if it is installed on the cluster. This allows the operator to automatically provision TLS certificates for pods as well as routes.\nWhen creating certificates via the OpenLibertyApplication CR the user can specify a particular issuer name and toggle the scopes between ClusterIssuer (cluster scoped) and Issuer (namespace scoped). If not specified, these values are retrieved from a ConfigMap, with a default value of `self-signed` and `ClusterIssuer`.\nThe certificate is mounted into the container via a Secret so that it is automatically refreshed once the certificate is updated.\n#### Integration with OpenShift Serverless\nDeploy your serverless runtime component using a single toggle.  The Operator will convert all of its generated resources into [Knative](https://knative.dev) resources, allowing your pod to automatically scale to 0 when it is idle.\n\n#### Integration with Kubernetes Application Navigator (kAppNav) and OpenShift's Topology UI\nAutomatically configures the Kubernetes resources for integration with [kAppNav](https://kappnav.io/), allowing your runtime component to compose an umbrella [Application](https://github.com/kubernetes-sigs/application).  This integration allows users to monitor all constituents resources of the application and receive alerts when the health status of a component changes.  From an integrated panel users can also launch day-2-operations, such as viewing the Kibana / Grafana dashboards, and enabling trace for a component.\nDuring this integration we also set the corresponding labels to support OpenShift's Developer Topology UI,which allows you to visualize your entire set of deployments and how they are connected.\nSee our [**documentation**](https://github.com/OpenLiberty/open-liberty-operator/tree/master/doc/) for more information.",
      "csv_display_name": "Open Liberty Operator",
      "csv_metadata_description": "Deploy and manage applications running on Open Liberty",
      "csv_name": "open-liberty-operator.v0.7.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": true,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": false,
      "last_update_date": "2022-08-15T13:34:24.516000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "open-liberty-certified",
      "provided_apis": [
        {
          "group": "openliberty.io",
          "kind": "OpenLibertyApplication",
          "plural": "openlibertyapplications",
          "version": "v1beta1"
        },
        {
          "group": "openliberty.io",
          "kind": "OpenLibertyDump",
          "plural": "openlibertydumps",
          "version": "v1beta1"
        },
        {
          "group": "openliberty.io",
          "kind": "OpenLibertyTrace",
          "plural": "openlibertytraces",
          "version": "v1beta1"
        }
      ],
      "provider": "IBM",
      "related_images": [
        {
          "digest": "sha256:7e439b96d0ab5cbf38bdbd39feffd80370fed748430807a7fd1c1ba7d1e17d38",
          "image": "registry.connect.redhat.com/ibm/open-liberty-operator@sha256:7e439b96d0ab5cbf38bdbd39feffd80370fed748430807a7fd1c1ba7d1e17d38",
          "name": "open-liberty-operator-7e439b96d0ab5cbf38bdbd39feffd80370fed748430807a7fd1c1ba7d1e17d38-annotation"
        },
        {
          "digest": "sha256:7e439b96d0ab5cbf38bdbd39feffd80370fed748430807a7fd1c1ba7d1e17d38",
          "image": "registry.connect.redhat.com/ibm/open-liberty-operator@sha256:7e439b96d0ab5cbf38bdbd39feffd80370fed748430807a7fd1c1ba7d1e17d38",
          "name": "open-liberty-operator"
        },
        {
          "digest": "sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
          "image": "registry.connect.redhat.com/ibm/open-liberty-samples@sha256:8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4",
          "name": "open-liberty-samples-8ea2d3405ff2829d93c5dda4dab5d695ea8ead34e804aaf6e39ea84f53a15ee4-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.7.0",
      "version_original": "0.7.0"
    },
    {
      "_id": "60470fa9122bd89307e01082",
      "alm_examples": [
        {
          "api_version": "charts.helm.k8s.io/v1alpha1",
          "kind": "OpenshiftPipeline",
          "metadata": {
            "name": "openshiftpipeline"
          },
          "spec": {
            "pipelines": {
              "global": {
                "postgresql": {
                  "database": "OVERRIDE",
                  "host": "OVERRIDE",
                  "password": "OVERRIDE",
                  "port": "OVERRIDE",
                  "ssl": "false",
                  "user": "OVERRIDE"
                }
              },
              "imageRegistry": "registry.connect.redhat.com",
              "initContainer": {
                "image": "registry.connect.redhat.com/jfrog/pipelines-init@sha256:9c54e5ed032653b6d70ca0fe293ca4a23d082f5790f7dbbfac499a08573a663b",
                "pullPolicy": "Always"
              },
              "pipelines": {
                "accessControlAllowOrigins_0": "OVERRIDE",
                "accessControlAllowOrigins_1": "OVERRIDE",
                "api": {
                  "externalUrl": "OVERRIDE",
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-api"
                  }
                },
                "cron": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "extensionSync": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "hookHandler": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "jfrogUrl": "OVERRIDE",
                "jfrogUrlUI": "OVERRIDE",
                "joinKey": "OVERRIDE",
                "logup": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "marshaller": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "masterKey": "OVERRIDE",
                "msg": {
                  "uiUser": "OVERRIDE",
                  "uiUserPassword": "OVERRIDE"
                },
                "nexec": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "pipelineSync": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "pipelinesInit": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-installer"
                  }
                },
                "router": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-router"
                  }
                },
                "runTrigger": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "stepTrigger": {
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-micro"
                  }
                },
                "version": "1.8.0",
                "www": {
                  "externalUrl": "OVERRIDE",
                  "image": {
                    "pullPolicy": "Always",
                    "repository": "jfrog/pipelines-www"
                  }
                }
              },
              "postgresql": {
                "enabled": false
              },
              "rabbitmq": {
                "enabled": true,
                "externalUrl": "OVERRIDE",
                "image": {
                  "registry": "registry.connect.redhat.com",
                  "repository": "jfrog/pipelines-rabbitmq",
                  "tag": "3.8.9"
                }
              },
              "redis": {
                "enabled": true,
                "image": {
                  "registry": "registry.redhat.io",
                  "repository": "rhel8/redis-5",
                  "tag": "1-98"
                },
                "master": {
                  "command": "container-entrypoint run-redis"
                }
              },
              "securityContext": {
                "enabled": true,
                "gid": "1000721117",
                "uid": "1000721117"
              },
              "vault": {
                "disablemlock": false,
                "enabled": true,
                "image": {
                  "repository": "registry.connect.redhat.com/jfrog/pipelines-vault",
                  "tag": "1.8.0"
                },
                "init": {
                  "pullPolicy": "Always",
                  "repository": "jfrog/pipelines-vault-init"
                }
              }
            }
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/jfrog/pipelines-operator-bundle@sha256:319b188f70a139c3f5e1a64533280a60388365a5585465d55c6a4e1db98fca28",
      "bundle_path_digest": "sha256:319b188f70a139c3f5e1a64533280a60388365a5585465d55c6a4e1db98fca28",
      "capabilities": [
        "Seamless Upgrades"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-03-09T06:03:21.217000+00:00",
      "csv_description": "## Overview\n\nOpenshift Operator to deploy JFrog Pipelines into your Openshift cluster.\n## Usage\n\nAn external DB is required. The operator will not deploy a DB but will require you to specify the configuration values to connect to it.\n\nSearch for JFrog and click JFrog Pipeline Operator to install.\n\nGo to the Installed Operators.\n\nWait for the JFrog Pipeline Operator to complete the installation.\n\nOpen the Operator and click on the provided API: Xray\n\nClick Create New Instance and provide the following parameters for your DB configuration:\n\n```\npipelines.global.postgresql.host=<postgresql_host> pipelines.global.postgresql.port=<postgresql_port> pipelines.global.postgresql.database=<postgresql_dbname> pipelines.global.postgresql.user=<postgresql_user> pipelines.global.postgresql.password=<postgresql_password>\n```\n\nJFROG_URL is the external ip or DNS of your Artifactory to connect Pipelines to. Artifactory is required to use this operator.\nYou will need to specify your JFROG_URL in the follow locations:\nUse the cluster DNS name of the service for most operator deployments this will be: http://openshiftartifactoryha-nginx\n``` pipelines.pipelines.jfrogUrl=<JFROG_URL> pipelines.pipelines.jfrogUrlUI=<JFROG_URL> pipelines.pipelines.accessControlAllowOrigins_0=<JFROG_URL> pipelines.pipelines.accessControlAllowOrigins_1=<JFROG_URL> ```\nSetup a unique master key and use the same join key you used when creating Artifactory:\n``` pipelines.pipelines.masterKey=$MASTER_KEY pipelines.pipelines.joinKey=$JOIN_KEY ```\nSetup a unique username and password for Rabbitmq user:\n``` pipelines.pipelines.msg.uiUser=monitor pipelines.pipelines.msg.uiUserPassword=monitor ```\nSpecify external urls that will be your Openshift routes if desired:\n``` pipelines.rabbitmq.externalUrl=amqps://pipelines-rabbit.example.com pipelines.pipelines.api.externalUrl=http://pipelines-api.example.com pipelines.pipelines.www.externalUrl=http://pipelines-www.example.com ```\nDeploy JFrog Pipelines into your cluster.\n## Build Plane Usage\nTo use the pipelines build plane you can either use your Openshift cluster or a 3rd party cloud provider like AWS.\nSetup the Pipelines build plane.\n## Sync issue fix\nTo resolve the known host issue when syncing from a new site for now users can rsh into the pod or open the terminal into the pod in the Openshift web console.\nOnce inside the container `pipelinesync` run the follow command:\n``` /pipelineSync/clone.sh ```\nType yes to accept the host verification and then re-sync your pipeline. ",
      "csv_display_name": "JFrog Pipeline Operator",
      "csv_metadata_description": "JFrog Pipeline Enterprise deploys Pipeline CI/CD Openshift (Requires Jfrog Artifactory)",
      "csv_name": "pipeline-operator.v1.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:41:41.904000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "openshiftpipeline-operator",
      "provided_apis": [
        {
          "group": "charts.helm.k8s.io",
          "kind": "OpenshiftPipeline",
          "plural": "openshiftpipelines",
          "version": "v1alpha1"
        }
      ],
      "provider": "JFrog",
      "related_images": [
        {
          "digest": "sha256:2acce47191cd20b2a73fb01f97976ee030a091ed57bbd57f3fa5a316a71614a4",
          "image": "registry.connect.redhat.com/jfrog/pipelines-operator@sha256:2acce47191cd20b2a73fb01f97976ee030a091ed57bbd57f3fa5a316a71614a4",
          "name": "pipelines-operator-2acce47191cd20b2a73fb01f97976ee030a091ed57bbd57f3fa5a316a71614a4-annotation"
        },
        {
          "digest": "sha256:2acce47191cd20b2a73fb01f97976ee030a091ed57bbd57f3fa5a316a71614a4",
          "image": "registry.connect.redhat.com/jfrog/pipelines-operator@sha256:2acce47191cd20b2a73fb01f97976ee030a091ed57bbd57f3fa5a316a71614a4",
          "name": "pipeline-operator"
        },
        {
          "digest": "sha256:27baf3f2d50482984f7550d856c51c02bdad013facc53165d246305ab4ba11d2",
          "image": "registry.connect.redhat.com/jfrog/pipelines-api@sha256:27baf3f2d50482984f7550d856c51c02bdad013facc53165d246305ab4ba11d2",
          "name": "pipeline_api_image_repository"
        },
        {
          "digest": "sha256:30898def831fec6a779a3f809e2098a2421ac56a7d383fae26f972749b4d585c",
          "image": "registry.connect.redhat.com/jfrog/pipelines-router@sha256:30898def831fec6a779a3f809e2098a2421ac56a7d383fae26f972749b4d585c",
          "name": "pipeline_router_image_repository"
        },
        {
          "digest": "sha256:bd0857fb811972c412eca139104e754e095f5beb53fe88bdcc7ea683ece5b4e0",
          "image": "registry.connect.redhat.com/jfrog/pipelines-www@sha256:bd0857fb811972c412eca139104e754e095f5beb53fe88bdcc7ea683ece5b4e0",
          "name": "pipeline_www_image_repository"
        },
        {
          "digest": "sha256:0587b685cc7abeb73e4529a9885a2bd56c4d63fa3801dd5ea61d8495f9b260cd",
          "image": "registry.connect.redhat.com/jfrog/pipelines-micro@sha256:0587b685cc7abeb73e4529a9885a2bd56c4d63fa3801dd5ea61d8495f9b260cd",
          "name": "pipeline_micro_image_repository"
        },
        {
          "digest": "sha256:16c1cb3729dc52851d7af512f8d7d7151b3231f2445c10c04784a69bcf027c3c",
          "image": "registry.connect.redhat.com/jfrog/pipelines-installer@sha256:16c1cb3729dc52851d7af512f8d7d7151b3231f2445c10c04784a69bcf027c3c",
          "name": "pipeline_installer_image_repository"
        },
        {
          "digest": "sha256:54dce2f3707794a16bcb9a385035454f3ae0a7861551b4c54f682a9894772f79",
          "image": "registry.connect.redhat.com/jfrog/pipelines-rabbitmq@sha256:54dce2f3707794a16bcb9a385035454f3ae0a7861551b4c54f682a9894772f79",
          "name": "pipeline_rabbitmq_image_repository"
        },
        {
          "digest": "sha256:c4302979defaaa396e1df57ad2adb7949f06d7c4c7c2904c445d4bb9111e9b1e",
          "image": "registry.redhat.io/rhel8/redis-5@sha256:c4302979defaaa396e1df57ad2adb7949f06d7c4c7c2904c445d4bb9111e9b1e",
          "name": "pipeline_redis_image_repository"
        },
        {
          "digest": "sha256:fefea387baefffaf3c3636e61f39fb5ea1fb09119af34a944f522341d50c6a1f",
          "image": "registry.connect.redhat.com/jfrog/pipelines-vault-init@sha256:fefea387baefffaf3c3636e61f39fb5ea1fb09119af34a944f522341d50c6a1f",
          "name": "pipeline_vault_init_image_repository"
        },
        {
          "digest": "sha256:acdaab7820f42244cc83ef31091d57f349488619fbf37a08c90700f88a7ba98c",
          "image": "registry.connect.redhat.com/jfrog/pipelines-vault@sha256:acdaab7820f42244cc83ef31091d57f349488619fbf37a08c90700f88a7ba98c",
          "name": "pipeline_vault_image_repository"
        },
        {
          "digest": "sha256:9c54e5ed032653b6d70ca0fe293ca4a23d082f5790f7dbbfac499a08573a663b",
          "image": "registry.connect.redhat.com/jfrog/pipelines-init@sha256:9c54e5ed032653b6d70ca0fe293ca4a23d082f5790f7dbbfac499a08573a663b",
          "name": "pipelines-init-9c54e5ed032653b6d70ca0fe293ca4a23d082f5790f7dbbfac499a08573a663b-annotation"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.0.1",
      "version_original": "1.0.1"
    },
    {
      "_id": "6047168d3937aa922df5dc5e",
      "alm_examples": [
        {
          "api_version": "openunison.tremolo.io/v1",
          "kind": "OpenUnison",
          "metadata": {
            "name": "test-openunison"
          },
          "spec": {
            "dest_secret": "openunison",
            "enable_activemq": false,
            "hosts": [
              {
                "ingress_name": "openunison",
                "names": [
                  {
                    "env_var": "OU_HOST",
                    "name": "test.apps.mydomain.com"
                  }
                ]
              }
            ],
            "key_store": {
              "key_pairs": {
                "create_keypair_template": [
                  {
                    "name": "ou",
                    "value": "k8s"
                  },
                  {
                    "name": "o",
                    "value": "Tremolo Security"
                  },
                  {
                    "name": "l",
                    "value": "Alexandria"
                  },
                  {
                    "name": "st",
                    "value": "Virginia"
                  },
                  {
                    "name": "c",
                    "value": "US"
                  }
                ],
                "keys": [
                  {
                    "create_data": {
                      "ca_cert": true,
                      "key#": 2048,
                      "server_name": "test-openunison.openunison.svc.cluster.local",
                      "sign_by_k8s_ca": false,
                      "subject_alternative_names": []
                    },
                    "import_into_ks": "keypair",
                    "name": "unison-tls",
                    "tls_secret_name": "unison-tls-secret"
                  }
                ]
              },
              "static_keys": [
                {
                  "name": "session-unison",
                  "version": 1
                }
              ],
              "trusted_certificates": []
            },
            "non_secret_data": [
              {
                "name": "REG_CRED_USER",
                "value": "rh_user"
              },
              {
                "name": "TEST_USER_NAME",
                "value": "testuser"
              },
              {
                "name": "MYVD_CONFIG_PATH",
                "value": "WEB-INF/myvd.conf"
              },
              {
                "name": "unisonKeystorePath",
                "value": "/etc/openunison/unisonKeyStore.p12"
              }
            ],
            "openshift": {
              "builder_image": "registry.connect.redhat.com/tremolosecurity/openunison-s2i-10",
              "git": {
                "branch": "master",
                "dir": "/",
                "repo": "https://github.com/TremoloSecurity/openunison-qs-simple.git"
              }
            },
            "openunison_network_configuration": {
              "activemq_dir": "/tmp/amq",
              "allowed_client_names": [],
              "ciphers": [
                "TLS_RSA_WITH_RC4_128_SHA",
                "TLS_RSA_WITH_AES_128_CBC_SHA",
                "TLS_RSA_WITH_AES_256_CBC_SHA",
                "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                "TLS_RSA_WITH_AES_128_CBC_SHA256",
                "TLS_RSA_WITH_AES_256_CBC_SHA256"
              ],
              "client_auth": "none",
              "force_to_secure": true,
              "open_external_port": 80,
              "open_port": 8080,
              "path_to_deployment": "/usr/local/openunison/work",
              "path_to_env_file": "/etc/openunison/ou.env",
              "quartz_dir": "/tmp/quartz",
              "secure_external_port": 443,
              "secure_key_alias": "unison-tls",
              "secure_port": 8443
            },
            "replicas": 1,
            "secret_data": [
              "unisonKeystorePassword",
              "TEST_USER_PASSWORD",
              "REG_CRED_PASSWORD"
            ],
            "source_secret": "openunison-secrets-source"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tremolosecurity/openunison-operator-bundle@sha256:bf50b128eefd6fb80e48f08aa8f6e6f3f384ca3d76641e7d2f5df73b055f6fbf",
      "bundle_path_digest": "sha256:bf50b128eefd6fb80e48f08aa8f6e6f3f384ca3d76641e7d2f5df73b055f6fbf",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "stable",
      "creation_date": "2021-03-09T06:32:45.732000+00:00",
      "csv_description": "The OpenUnison operator automates the deployment of OpenUnison in OpenShift and OKD.  This operator will generate all the objects needed to run OpenUnison and keep them up-to-date.  On OpenShift OpenUnison is built and deployed via a Red Hat certified Source-to-Image (s2i) builder that generates a container based on your configuration.  The default example provided by the operator is a simple login page.  Tremolo Security offers [Orchestra for OpenShift](https://www.tremolosecurity.com/openshift/) to manage authentication, authorization and project onboarding for your OpenShift clusters.  \n\n## Before You Start\n\nBefore deploying, obtain an account for Red Hat Connect to be able to access certified images. Next create a source secret with information that shouldn't be stored in the `OpenUnison` custom resource, referenced by the `source_secret` attribute.  The minimal data in this secret should be at least:\n\n* `unisonKeystorePassword` - The password to use for the generated keystore\n* `REG_CRED_PASSWORD` - Your password for Red Hat Connect\n* `TEST_USER_PASSWORD` - The password for your test user \n\n An example of creating a secret used by the example configuration is:\n  \n```\n$ mkdir secret\n$ cd secret\n$ echo 'my_secret_password'  > unisonKeystorePassword\n$ echo 'my_rh_connect_password'  > REG_CRED_PASSWORD\n$ echo 'my_test_user_password'  > TEST_USER_PASSWORD\n$ oc create secret generic openunison-secrets-source --from-file=.\n```\n  \nYou should edit the `hosts` \\ `names` \\ `name` variable from `test.apps.mydomain.com` to whatever you want the host of your OpenUnison instance to be.  The operator will generate a `Route` based on this hostname with `reencrypt` enabled.  Also, update `key_store` \\ 'key_pairs' \\ `keys` for the `server_name` to reflect the correct `Service` name for your OpenUnison.  For instance if your `OpenUnison` CR has the name `test-openunison` and is being deployed in the `openunison` namespace this value should be `test-openunison.openunison.svc.cluster.local`.\n\n## Testing\n\nOnce deployed, point your browser to the host name you created via TLS (ie https://myapp.apps.domain.com)\n\n## Updating Keys\n\nThe operator builds a keystore for OpenUnison based on secrets referenced in the `OpenUnison` custom resource.  To regenerate self signed certificates (such as the default `unison-tls` certificate), simple delete the secret and update the custom resource.  To use certificates signed by a third party CA, create the secret and reference it in your `OpenUnison` custom resource.\n\n## New Images and Configuration\n\nThe OpenUnison Operator generates an OpenShift `BuildConfig` object and `ImageStream` objects.  The certified s2i builder image is rebuilt auotmaticlly by Red Hat as new packages are made available.  To update your deployment's container, simply tag it to your image stream.  To point to a new git repository for the configuration of OpenUnison, update the CR.",
      "csv_display_name": "OpenUnison",
      "csv_metadata_description": "OpenUnison Operator provides identity management and automation services including Single Sign-On (SSO), workflow based user provisioning, self service access management, auditing and reporting",
      "csv_name": "openunison.1.0.0",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:36:18.286000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "openunison-ocp-certified",
      "provided_apis": [
        {
          "group": "openunison.tremolo.io",
          "kind": "OpenUnison",
          "plural": "openunisons",
          "version": "v1"
        }
      ],
      "provider": "Tremolo Security, Inc.",
      "related_images": [
        {
          "digest": "sha256:1fc3e5d2f54c0cf3668bc070450e0f0f7c5917ca36c0934ea639dbb249ac97db",
          "image": "registry.connect.redhat.com/tremolosecurity/openunison-operator@sha256:1fc3e5d2f54c0cf3668bc070450e0f0f7c5917ca36c0934ea639dbb249ac97db",
          "name": "openunison-operator-1fc3e5d2f54c0cf3668bc070450e0f0f7c5917ca36c0934ea639dbb249ac97db-annotation"
        },
        {
          "digest": "sha256:1fc3e5d2f54c0cf3668bc070450e0f0f7c5917ca36c0934ea639dbb249ac97db",
          "image": "registry.connect.redhat.com/tremolosecurity/openunison-operator@sha256:1fc3e5d2f54c0cf3668bc070450e0f0f7c5917ca36c0934ea639dbb249ac97db",
          "name": "openunison-operator"
        },
        {
          "digest": "sha256:185b4e9fae41900ccc07ce90622c9e128c832bcfe180ae1362c7b033747dcebf",
          "image": "registry.connect.redhat.com/tremolosecurity/activemq@sha256:185b4e9fae41900ccc07ce90622c9e128c832bcfe180ae1362c7b033747dcebf",
          "name": "amq"
        },
        {
          "digest": "sha256:5a91e1de68f3ce1d2fb837e09c6090da609882c42840859650e62b218904486c",
          "image": "registry.connect.redhat.com/tremolosecurity/openunison-s2i-10@sha256:5a91e1de68f3ce1d2fb837e09c6090da609882c42840859650e62b218904486c",
          "name": "s2i"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.0.0",
      "version_original": "1.0.0"
    },
    {
      "_id": "6047168edbb14c0b8248bae5",
      "alm_examples": [
        {
          "api_version": "tufin.io/v1alpha1",
          "kind": "Orca",
          "metadata": {
            "name": "orca"
          },
          "spec": {
            "components": {
              "conntrack": true,
              "dns": false,
              "istio": false,
              "kube-network-policy": true,
              "pusher": true,
              "syslog": false,
              "watcher": true
            },
            "domain": "generic-bank",
            "endpoints": {
              "guru": "guru.tufin.io:443",
              "orca": "https://securecloud.tufin.io",
              "registry": "registry.tufin.io"
            },
            "ignored_config_maps": [
              "kube-system/ingress-gce-lock",
              "istio-system/istio-ingress-controller-leader-istio"
            ],
            "images": {
              "kite": "registry.connect.redhat.com/tufin/kite",
              "monitor": "registry.connect.redhat.com/tufin/monitor"
            },
            "kube_platform": "Openshift",
            "namespace": "tufin-system",
            "project": "openshift4"
          }
        },
        {
          "api_version": "networking.tufin.io/v1",
          "kind": "Policy",
          "metadata": {
            "name": "orca",
            "namespace": "placeholder"
          },
          "spec": {
            "mode": "learning",
            "networkPolicyAllowAll": true,
            "rules": []
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/tufin/orca-operator-bundle@sha256:3ea67ab24efcb9b693d57ba2624de6c9dd5745c788d669dff0562c4b283d447b",
      "bundle_path_digest": "sha256:3ea67ab24efcb9b693d57ba2624de6c9dd5745c788d669dff0562c4b283d447b",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "beta",
      "creation_date": "2021-03-09T06:32:46.951000+00:00",
      "csv_description": "Tufin SecureCloud is a cloud-based security monitoring and enforcement platform for Kubernetes clusters, containers and microservices.\nThe SecureCloud Operator installs SecureCloud resources into your cluster. These work with the SecureCloud cloud application to give the following functionality:\n* Monitor the cluster configuration: namespaces, containers, pods, services, network policies etc.\n* Learn and visualize the cluster connectivity\n* Build a connectivity policy (whitelist)\n* Generate audit reports\n* Alert on unauthorized connections\n* Enforce the connectivity policy in the cluster and on enterprise firewalls surrounding the cluster\n* Integrate into the CI/CD pipeline to learn and update the policy continuously\n* Scan images for vulnerabilities\n## Deploying the agent\n* Sign up to SecureCloud [here] (https://www.tufin.com/tufin-orchestration-suite/securecloud)\n* You will be sent an email containing your deployment parameters\n* Complete the deployment following the instructions for generating the agent's secret [here] (https://github.com/Tufin/orca-operator/blob/master/docs/install_securecloud_operator.md)",
      "csv_display_name": "Tufin SecureCloud Operator",
      "csv_metadata_description": "Installs the SecureCloud Agent on the cluster. SecureCloud is a cloud-based security monitoring and enforcement platform for Kubernetes.",
      "csv_name": "orca-operator.v1.0.197",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:38:29.435000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "orca",
      "provided_apis": [
        {
          "group": "tufin.io",
          "kind": "Orca",
          "plural": "orcas",
          "version": "v1alpha1"
        },
        {
          "group": "networking.tufin.io",
          "kind": "Policy",
          "plural": "policies",
          "version": "v1"
        }
      ],
      "provider": "Tufin",
      "related_images": [
        {
          "digest": "sha256:dfe69f95b629f1380879eee8e09dc1d51ebecf2a9cae18b254a3da6fd0f2951f",
          "image": "registry.connect.redhat.com/tufin/orca-operator@sha256:dfe69f95b629f1380879eee8e09dc1d51ebecf2a9cae18b254a3da6fd0f2951f",
          "name": "orca-operator-dfe69f95b629f1380879eee8e09dc1d51ebecf2a9cae18b254a3da6fd0f2951f-annotation"
        },
        {
          "digest": "sha256:dfe69f95b629f1380879eee8e09dc1d51ebecf2a9cae18b254a3da6fd0f2951f",
          "image": "registry.connect.redhat.com/tufin/orca-operator@sha256:dfe69f95b629f1380879eee8e09dc1d51ebecf2a9cae18b254a3da6fd0f2951f",
          "name": "orca-operator"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.0.197",
      "version_original": "1.0.197"
    },
    {
      "_id": "6047168f5a00810ecaf7c442",
      "alm_examples": [
        {
          "api_version": "perceptilabs.com/v1",
          "kind": "PerceptiLabs",
          "metadata": {
            "name": "example-perceptilabs"
          },
          "spec": {
            "coreGpus": 0,
            "corePvc": "perceptilabs-pvc",
            "license_name": "demo",
            "license_value": "demo",
            "ryggPvc": "perceptilabs-pvc"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/perceptilabs/perceptilabs-operator-bundle@sha256:ac9d7ca9b4ca142bd5c983e541cc687fea3143446b79d7d853f7dd654a3001ef",
      "bundle_path_digest": "sha256:ac9d7ca9b4ca142bd5c983e541cc687fea3143446b79d7d853f7dd654a3001ef",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "stable",
      "creation_date": "2021-03-09T06:32:47.953000+00:00",
      "csv_description": "The PerceptiLabs operator creates and maintains PerceptiLabs, a visual tool for machine learning at warp speed.\n\nPerceptiLabs visual modeling tool provides a GUI for building,\ntraining, and assessing your models, while also enabling deeper\ndevelopment with code. You get faster iterations and better\nexplainability of your results.\n\nFor more information visit [http://perceptilabs.com](http://perceptilabs.com).\n\n# Features\n\n**Fast modeling**  \nMake changes, debug, and tune your model through the GUI of custom code\neditor where every component/layer is reprogrammable. Choose from\nmultiple neural network models as well as classical AI methods.\n\n\n**Transparency of Model Performance and Results**  \nGet instant feedback about your model's performance through the\nvisualization of the architecture, to better review and understand the\nresults. See real-time analytics in every operation and variable, and\ngranular previews of output from each model component.\n\n\n**Flexibility**  \nCustomize your environment and statistics dashboard. Use high-level\nabstractions or low-level code. Execute any custom Python code or export\na fully trained TensorFlow model to perform inference in your projects.\n\n\n\n# Installation Instructions  \nFor your convenience, we've included an example quickstart for running PerceptiLabs in demo mode.\n\n## Prepare your namespace  \nChoose or create the namespace into which you'd like install PerceptiLabs. For example:  \n```\noc create namespace REPLACE_NAMESPACE\n```\n\n## Prepare storage for your data\n\nYou'll need to have a place on your cluster for storing training data and models.\n\nHere's an example configuration for creating storage on a cluster hosted on AWS that you can tailor to your needs:\n\n```\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: perceptilabs-example-sc\n  annotations:\n    description: Example Storage for PerceptiLabs\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  fsType: ext4\n  type: gp2\nreclaimPolicy: Delete\nvolumeBindingMode: Immediate\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: REPLACE_PVC_NAME\n  namespace: REPLACE_NAMESPACE\nspec:\n  storageClassName: perceptilabs-example-sc\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n```\n\n## Subscribe to the PerceptiLabs operator in your namespace\n\nIf you're using the OpenShift console webpage, just click the Install button on this operator. If not, you can customize and apply this configuration:\n\n```\napiVersion: operators.coreos.com/v1\nkind: OperatorGroup\nmetadata:\n  name: REPLACE_NAMESPACE-operatorgroup\n  namespace: REPLACE_NAMESPACE\nspec:\n  targetNamespaces:\n  - REPLACE_NAMESPACE\n---\napiVersion: operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: perceptilabs-operator\n  namespace: REPLACE_NAMESPACE\nspec:\n  channel: stable\n  name: perceptilabs-operator-package\n  source: perceptilabs-operators\n  sourceNamespace: openshift-marketplace\n  namespace: REPLACE_NAMESPACE\n```\n\nAfter this, you should see a `perceptilabs-operator` pod start up in your namespace. In that pod, the log for the `operator` container should eventually say \"starting to serve\".\n\n## Start a copy of PerceptiLabs\n\nThis is where you connect your storage and service account to a PerceptiLabs instance and run it. You can customize and apply the following configuration:\n\n```\napiVersion: perceptilabs.com/v1\nkind: PerceptiLabs\nmetadata:\n  name: example-perceptilabs\n  namespace: REPLACE_NAMESPACE\nspec:\n  corePvc: REPLACE_PVC_NAME\n  ryggPvc: REPLACE_PVC_NAME\n```\n\nAt this point two pods named 'perceptilabs-core-...' and 'perceptilabs-frontend-...` will start up in your namespace.\n\n## Copy data files to your cluster\n\nIf you've used the persistent storage configuration from above, then you have a read-write volume mounted in the pod at `/mnt/plabs`. Copy your files there:\n\n```\noc cp REPLACE_FILENAME --namespace=REPLACE_NAMESPACE REPLACE_CORE_POD_NAME:/mnt/plabs --container=core\n```\n\n## Get the URL of your PerceptiLabs\n\nOnce everything is up and running, you'll have two new routes in your namespace. Go to the routes for your namespace and follow the link named `perceptilabs-frontend`. Your browser will be connected to your instance of PerceptiLabs! Alternatively, you can get the URL from the command line:\n\n```\noc get routes --namespace REPLACE_NAMESPACE perceptilabs-frontend\n```",
      "csv_display_name": "PerceptiLabs Operator",
      "csv_metadata_description": "AI platform which lets you Build, Train and Analyze",
      "csv_name": "perceptilabs-operator.v1.0.21",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:37:28.515000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "perceptilabs-operator-package",
      "provided_apis": [
        {
          "group": "perceptilabs.com",
          "kind": "PerceptiLabs",
          "plural": "perceptilabs",
          "version": "v1alpha1"
        },
        {
          "group": "perceptilabs.com",
          "kind": "PerceptiLabs",
          "plural": "perceptilabs",
          "version": "v1"
        }
      ],
      "provider": "PerceptiLabs",
      "related_images": [
        {
          "digest": "sha256:520d0b84a205a00653493bd88ee570b46ee010da51c00aefb44e16a483ef46a8",
          "image": "registry.connect.redhat.com/perceptilabs/perceptilabs-operator@sha256:520d0b84a205a00653493bd88ee570b46ee010da51c00aefb44e16a483ef46a8",
          "name": "perceptilabs-operator-520d0b84a205a00653493bd88ee570b46ee010da51c00aefb44e16a483ef46a8-annotation"
        },
        {
          "digest": "sha256:520d0b84a205a00653493bd88ee570b46ee010da51c00aefb44e16a483ef46a8",
          "image": "registry.connect.redhat.com/perceptilabs/perceptilabs-operator@sha256:520d0b84a205a00653493bd88ee570b46ee010da51c00aefb44e16a483ef46a8",
          "name": "ansible"
        },
        {
          "digest": "sha256:520d0b84a205a00653493bd88ee570b46ee010da51c00aefb44e16a483ef46a8",
          "image": "registry.connect.redhat.com/perceptilabs/perceptilabs-operator@sha256:520d0b84a205a00653493bd88ee570b46ee010da51c00aefb44e16a483ef46a8",
          "name": "operator"
        },
        {
          "digest": "sha256:e32ba8261fd22d8324b7cee2cd62a04602e33a11dc12994f629b715ae6983459",
          "image": "registry.connect.redhat.com/perceptilabs/perceptilabs-frontend-1@sha256:e32ba8261fd22d8324b7cee2cd62a04602e33a11dc12994f629b715ae6983459",
          "name": "frontend_image"
        },
        {
          "digest": "sha256:bf50b30c9e1c09929b0cc70d200638c5947ca20695ded49bc38fc6790cd7f2ef",
          "image": "registry.connect.redhat.com/perceptilabs/perceptilabs-core-1@sha256:bf50b30c9e1c09929b0cc70d200638c5947ca20695ded49bc38fc6790cd7f2ef",
          "name": "core_image"
        },
        {
          "digest": "sha256:5927fde799ab21ab425db72ddb51d19c1ea7c6fb0b5dbe68cf7637f6d66774d3",
          "image": "registry.connect.redhat.com/perceptilabs/perceptilabs-rygg-1@sha256:5927fde799ab21ab425db72ddb51d19c1ea7c6fb0b5dbe68cf7637f6d66774d3",
          "name": "rygg_image"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "1.0.21",
      "version_original": "1.0.21"
    },
    {
      "_id": "604716928985fcd889e788d7",
      "alm_examples": [
        {
          "api_version": "portshift.io/v1",
          "kind": "PortshiftInstaller",
          "metadata": {
            "name": "example-portshiftinstaller"
          },
          "spec": {
            "managementUrl": "console.portshift.io",
            "portshiftClusterId": "CLUSTER_ID"
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/portshift/operator-bundle@sha256:315706e1ed51c3543b44c0524ee717b36324d128d8dafac2388adf94107c4c48",
      "bundle_path_digest": "sha256:315706e1ed51c3543b44c0524ee717b36324d128d8dafac2388adf94107c4c48",
      "capabilities": [
        "Basic Install"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-03-09T06:32:50.831000+00:00",
      "csv_description": "### Contents\n * About\n * Requirements\n * Documentation\n * Issues and feedback\n\n### About\nThe portshift-operator is a controller that runs within a Kubernetes or Openshift cluster that provides a means to deploy and manage Portshift's runtime controller, which is a single pod (agentless admission controller) that provide comperhensive runtime security.\n\n## Use the portshift-operator to:\n\n * Deploy Portshfit controler on Kubernetes or Openshift cluster\n * Automate the registration/authentication process prior to the deployment.\n\n## Deployment Requirements\nThe Operator deploys on Kubernetes and Openshift clusters.\n\n * Kubernetes: 1.15 +\n * Openshift: 4.0 +\n\n## Documentation\nThe following documentation is provided:\n\n * [Installation](http://portshift.readme.io/)\n\n## Issues and feedback\nIf you encounter any problems or would like to give us feedback on deployments, we encourage you to raise issues here on GitHub.\n",
      "csv_display_name": "Portshift Operator",
      "csv_metadata_description": "The operator will deploy portshift agent on the cluster",
      "csv_name": "portshift-operator.v0.1.6",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": true,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:37:55.495000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "portshift-controller-operator",
      "provided_apis": [
        {
          "group": "portshift.io",
          "kind": "PortshiftInstaller",
          "plural": "portshiftinstallers",
          "version": "v1"
        }
      ],
      "provider": "Portshift",
      "related_images": [
        {
          "digest": "sha256:7676180f5fcd495ed9d3bf232e5ffc426767c7f8e9914637a3505da84ddcfc4e",
          "image": "registry.connect.redhat.com/portshift/operator@sha256:7676180f5fcd495ed9d3bf232e5ffc426767c7f8e9914637a3505da84ddcfc4e",
          "name": "operator-7676180f5fcd495ed9d3bf232e5ffc426767c7f8e9914637a3505da84ddcfc4e-annotation"
        },
        {
          "digest": "sha256:7676180f5fcd495ed9d3bf232e5ffc426767c7f8e9914637a3505da84ddcfc4e",
          "image": "registry.connect.redhat.com/portshift/operator@sha256:7676180f5fcd495ed9d3bf232e5ffc426767c7f8e9914637a3505da84ddcfc4e",
          "name": "portshift-operator"
        },
        {
          "digest": "sha256:f52b3097d049ac86920bd6cdd4dac3def7411dcd1757438b92f0d7d36fa4852e",
          "image": "registry.connect.redhat.com/portshift/portshift-k8s-agent@sha256:f52b3097d049ac86920bd6cdd4dac3def7411dcd1757438b92f0d7d36fa4852e",
          "name": "agent"
        },
        {
          "digest": "sha256:19a49c31102b8f4afa2ad8980d3037c78167da089f4c62023da059bbf2c77c87",
          "image": "registry.connect.redhat.com/portshift/k8s-upgrader@sha256:19a49c31102b8f4afa2ad8980d3037c78167da089f4c62023da059bbf2c77c87",
          "name": "agent_upgrader"
        },
        {
          "digest": "sha256:5569481578b0049f2bdc10158c50e8c76947d0b053ed4ed9add6838c52f5ddb7",
          "image": "registry.connect.redhat.com/portshift/gopassivedns@sha256:5569481578b0049f2bdc10158c50e8c76947d0b053ed4ed9add6838c52f5ddb7",
          "name": "agent_passive_dns_detector"
        },
        {
          "digest": "sha256:3c1567790f045dd646f65cdcd3287d5ed8a01ca3212db8f48bd5586675261e74",
          "image": "registry.connect.redhat.com/portshift/clair@sha256:3c1567790f045dd646f65cdcd3287d5ed8a01ca3212db8f48bd5586675261e74",
          "name": "clair"
        },
        {
          "digest": "sha256:b27d47eb7a66968d34dc8d8e9374b74cec1bcb20345926c3ef56b1c1e46d5f15",
          "image": "registry.connect.redhat.com/portshift/clair-db@sha256:b27d47eb7a66968d34dc8d8e9374b74cec1bcb20345926c3ef56b1c1e46d5f15",
          "name": "clair_db"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.1.6",
      "version_original": "0.1.6"
    },
    {
      "_id": "604716978985fcd889e788da",
      "alm_examples": [
        {
          "api_version": "api.rapidbiz.com/v1",
          "kind": "Rapidbiz",
          "metadata": {
            "labels": {
              "app.kubernetes.io/component": "server",
              "app.kubernetes.io/instance": "rapidbiz-operator",
              "app.kubernetes.io/managed-by": "ansible",
              "app.kubernetes.io/name": "rapidbiz",
              "name": "rapidbiz-operator"
            },
            "name": "example-rapidbiz"
          },
          "spec": {
            "adminpassword": "adminpwd",
            "adminuser": "admin@unknown.com",
            "company": "",
            "databasehost": "",
            "databasename": "",
            "databasepassword": "",
            "databaseport": "3306",
            "databasetype": "MySQL",
            "databaseuser": "",
            "pullpolicy": "IfNotPresent",
            "pvc": true,
            "replicas": 1,
            "resourcerequirement": {
              "limits": {
                "cpu": "8",
                "memory": "6400Mi"
              },
              "requests": {
                "cpu": "1000m",
                "memory": "1000Mi"
              }
            },
            "scalepodcpu": 75,
            "scalepodmax": 10,
            "scalepodmin": 1,
            "scalestate": false,
            "serverlicense": "",
            "serviceroute": true
          }
        }
      ],
      "annotations": {
        "infrastructure_features": [],
        "valid_subscription": []
      },
      "architectures": [],
      "bundle_path": "registry.connect.redhat.com/vacava/rapidbiz-operator-bundle@sha256:57e0e6c51ed2b9ebf5347eee1fdd3ebff795cf8cf51f83e43cad4b02ea3872ad",
      "bundle_path_digest": "sha256:57e0e6c51ed2b9ebf5347eee1fdd3ebff795cf8cf51f83e43cad4b02ea3872ad",
      "capabilities": [
        "Full Lifecycle"
      ],
      "channel_name": "alpha",
      "creation_date": "2021-03-09T06:32:55.932000+00:00",
      "csv_description": "RapidBIZ Ansible Operator OLM is designed to work on Open Shift version 4.2 or greater with Kuberutes version 1.14 or greater.\n\nRapidBIZ is a simple to use, integrated cloud development, and delivery environment that enables significant productivity and cost advantages - leveraging Docker Images provides enterprise level deployment management.\n\nRequires a database either external to the cluster or one installed via a database operator or docker image.\n\nSee our website [documention](https://www.vacava.com/rapidbiz/deploy) for more detailed information.",
      "csv_display_name": "RapidBIZ Operator",
      "csv_metadata_description": "RapidBIZ is a simple to use, integrated cloud development and delivery environment that enables significant productivity advantages.",
      "csv_name": "rapidbiz-operator.v0.0.1",
      "in_index_img": true,
      "install_modes": [
        {
          "supported": true,
          "type": "OwnNamespace"
        },
        {
          "supported": true,
          "type": "SingleNamespace"
        },
        {
          "supported": false,
          "type": "MultiNamespace"
        },
        {
          "supported": false,
          "type": "AllNamespaces"
        }
      ],
      "is_default_channel": true,
      "last_update_date": "2022-08-15T13:09:21.894000+00:00",
      "latest_in_channel": true,
      "ocp_version": "4.8",
      "organization": "certified-operators",
      "package": "rapidbiz-operator-certified",
      "provided_apis": [
        {
          "group": "api.rapidbiz.com",
          "kind": "Rapidbiz",
          "plural": "rapidbizs",
          "version": "v1"
        }
      ],
      "provider": "Vacava",
      "related_images": [
        {
          "digest": "sha256:0a297bf1be48f3587577ca471587601eda7cda37fd20e834aad235ab99168d1a",
          "image": "registry.connect.redhat.com/vacava/rapidbiz-operator@sha256:0a297bf1be48f3587577ca471587601eda7cda37fd20e834aad235ab99168d1a",
          "name": "rapidbiz-operator-0a297bf1be48f3587577ca471587601eda7cda37fd20e834aad235ab99168d1a-annotation"
        },
        {
          "digest": "sha256:0a297bf1be48f3587577ca471587601eda7cda37fd20e834aad235ab99168d1a",
          "image": "registry.connect.redhat.com/vacava/rapidbiz-operator@sha256:0a297bf1be48f3587577ca471587601eda7cda37fd20e834aad235ab99168d1a",
          "name": "ansible"
        },
        {
          "digest": "sha256:0a297bf1be48f3587577ca471587601eda7cda37fd20e834aad235ab99168d1a",
          "image": "registry.connect.redhat.com/vacava/rapidbiz-operator@sha256:0a297bf1be48f3587577ca471587601eda7cda37fd20e834aad235ab99168d1a",
          "name": "operator"
        },
        {
          "digest": "sha256:af1fbbb2e68bd736aee9b213ec4cf299dc5fd0ad228d35bee8e97e9926e4e905",
          "image": "registry.connect.redhat.com/vacava/rapidbiz@sha256:af1fbbb2e68bd736aee9b213ec4cf299dc5fd0ad228d35bee8e97e9926e4e905",
          "name": "rapidbiz"
        }
      ],
      "replaces": null,
      "skip_range": null,
      "skips": [],
      "source_index_container_path": "registry.redhat.io/redhat/certified-operator-index:v4.8",
      "version": "0.0.1",
      "version_original": "0.0.1"
    }
  ],
  "total": 4910
}
