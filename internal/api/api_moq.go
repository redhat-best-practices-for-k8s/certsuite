// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"github.com/test-network-function/cnf-certification-test/pkg/configuration"
	"sync"
)

// Ensure, that CertAPIClientFuncsMock does implement CertAPIClientFuncs.
// If this is not the case, regenerate this file with moq.
var _ CertAPIClientFuncs = &CertAPIClientFuncsMock{}

// CertAPIClientFuncsMock is a mock implementation of CertAPIClientFuncs.
//
// 	func TestSomethingThatUsesCertAPIClientFuncs(t *testing.T) {
//
// 		// make and configure a mocked CertAPIClientFuncs
// 		mockedCertAPIClientFuncs := &CertAPIClientFuncsMock{
// 			FindFunc: func(obj interface{}, key string) (interface{}, bool) {
// 				panic("mock out the Find method")
// 			},
// 			GetContainerCatalogEntryFunc: func(id configuration.ContainerImageIdentifier) (*ContainerCatalogEntry, error) {
// 				panic("mock out the GetContainerCatalogEntry method")
// 			},
// 			GetImageByIDFunc: func(id string) (string, error) {
// 				panic("mock out the GetImageByID method")
// 			},
// 			GetImageIDByRepositoryFunc: func(repository string, imageName string) (string, error) {
// 				panic("mock out the GetImageIDByRepository method")
// 			},
// 			GetOperatorBundleIDByPackageNameFunc: func(org string, name string, version string) (string, error) {
// 				panic("mock out the GetOperatorBundleIDByPackageName method")
// 			},
// 			GetYamlFileFunc: func() (ChartStruct, error) {
// 				panic("mock out the GetYamlFile method")
// 			},
// 			IsContainerCertifiedFunc: func(repository string, imageName string) bool {
// 				panic("mock out the IsContainerCertified method")
// 			},
// 			IsOperatorCertifiedFunc: func(org string, packageName string, version string) (bool, error) {
// 				panic("mock out the IsOperatorCertified method")
// 			},
// 			getIDFromResponseFunc: func(response []byte) (string, error) {
// 				panic("mock out the getIDFromResponse method")
// 			},
// 			getRequestFunc: func(url string) ([]byte, error) {
// 				panic("mock out the getRequest method")
// 			},
// 		}
//
// 		// use mockedCertAPIClientFuncs in code that requires CertAPIClientFuncs
// 		// and then make assertions.
//
// 	}
type CertAPIClientFuncsMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(obj interface{}, key string) (interface{}, bool)

	// GetContainerCatalogEntryFunc mocks the GetContainerCatalogEntry method.
	GetContainerCatalogEntryFunc func(id configuration.ContainerImageIdentifier) (*ContainerCatalogEntry, error)

	// GetImageByIDFunc mocks the GetImageByID method.
	GetImageByIDFunc func(id string) (string, error)

	// GetImageIDByRepositoryFunc mocks the GetImageIDByRepository method.
	GetImageIDByRepositoryFunc func(repository string, imageName string) (string, error)

	// GetOperatorBundleIDByPackageNameFunc mocks the GetOperatorBundleIDByPackageName method.
	GetOperatorBundleIDByPackageNameFunc func(org string, name string, version string) (string, error)

	// GetYamlFileFunc mocks the GetYamlFile method.
	GetYamlFileFunc func() (ChartStruct, error)

	// IsContainerCertifiedFunc mocks the IsContainerCertified method.
	IsContainerCertifiedFunc func(repository string, imageName string) bool

	// IsOperatorCertifiedFunc mocks the IsOperatorCertified method.
	IsOperatorCertifiedFunc func(org string, packageName string, version string) (bool, error)

	// getIDFromResponseFunc mocks the getIDFromResponse method.
	getIDFromResponseFunc func(response []byte) (string, error)

	// getRequestFunc mocks the getRequest method.
	getRequestFunc func(url string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Obj is the obj argument value.
			Obj interface{}
			// Key is the key argument value.
			Key string
		}
		// GetContainerCatalogEntry holds details about calls to the GetContainerCatalogEntry method.
		GetContainerCatalogEntry []struct {
			// ID is the id argument value.
			ID configuration.ContainerImageIdentifier
		}
		// GetImageByID holds details about calls to the GetImageByID method.
		GetImageByID []struct {
			// ID is the id argument value.
			ID string
		}
		// GetImageIDByRepository holds details about calls to the GetImageIDByRepository method.
		GetImageIDByRepository []struct {
			// Repository is the repository argument value.
			Repository string
			// ImageName is the imageName argument value.
			ImageName string
		}
		// GetOperatorBundleIDByPackageName holds details about calls to the GetOperatorBundleIDByPackageName method.
		GetOperatorBundleIDByPackageName []struct {
			// Org is the org argument value.
			Org string
			// Name is the name argument value.
			Name string
			// Version is the version argument value.
			Version string
		}
		// GetYamlFile holds details about calls to the GetYamlFile method.
		GetYamlFile []struct {
		}
		// IsContainerCertified holds details about calls to the IsContainerCertified method.
		IsContainerCertified []struct {
			// Repository is the repository argument value.
			Repository string
			// ImageName is the imageName argument value.
			ImageName string
		}
		// IsOperatorCertified holds details about calls to the IsOperatorCertified method.
		IsOperatorCertified []struct {
			// Org is the org argument value.
			Org string
			// PackageName is the packageName argument value.
			PackageName string
			// Version is the version argument value.
			Version string
		}
		// getIDFromResponse holds details about calls to the getIDFromResponse method.
		getIDFromResponse []struct {
			// Response is the response argument value.
			Response []byte
		}
		// getRequest holds details about calls to the getRequest method.
		getRequest []struct {
			// URL is the url argument value.
			URL string
		}
	}
	lockFind                             sync.RWMutex
	lockGetContainerCatalogEntry         sync.RWMutex
	lockGetImageByID                     sync.RWMutex
	lockGetImageIDByRepository           sync.RWMutex
	lockGetOperatorBundleIDByPackageName sync.RWMutex
	lockGetYamlFile                      sync.RWMutex
	lockIsContainerCertified             sync.RWMutex
	lockIsOperatorCertified              sync.RWMutex
	lockgetIDFromResponse                sync.RWMutex
	lockgetRequest                       sync.RWMutex
}

// Find calls FindFunc.
func (mock *CertAPIClientFuncsMock) Find(obj interface{}, key string) (interface{}, bool) {
	if mock.FindFunc == nil {
		panic("CertAPIClientFuncsMock.FindFunc: method is nil but CertAPIClientFuncs.Find was just called")
	}
	callInfo := struct {
		Obj interface{}
		Key string
	}{
		Obj: obj,
		Key: key,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(obj, key)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedCertAPIClientFuncs.FindCalls())
func (mock *CertAPIClientFuncsMock) FindCalls() []struct {
	Obj interface{}
	Key string
} {
	var calls []struct {
		Obj interface{}
		Key string
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// GetContainerCatalogEntry calls GetContainerCatalogEntryFunc.
func (mock *CertAPIClientFuncsMock) GetContainerCatalogEntry(id configuration.ContainerImageIdentifier) (*ContainerCatalogEntry, error) {
	if mock.GetContainerCatalogEntryFunc == nil {
		panic("CertAPIClientFuncsMock.GetContainerCatalogEntryFunc: method is nil but CertAPIClientFuncs.GetContainerCatalogEntry was just called")
	}
	callInfo := struct {
		ID configuration.ContainerImageIdentifier
	}{
		ID: id,
	}
	mock.lockGetContainerCatalogEntry.Lock()
	mock.calls.GetContainerCatalogEntry = append(mock.calls.GetContainerCatalogEntry, callInfo)
	mock.lockGetContainerCatalogEntry.Unlock()
	return mock.GetContainerCatalogEntryFunc(id)
}

// GetContainerCatalogEntryCalls gets all the calls that were made to GetContainerCatalogEntry.
// Check the length with:
//     len(mockedCertAPIClientFuncs.GetContainerCatalogEntryCalls())
func (mock *CertAPIClientFuncsMock) GetContainerCatalogEntryCalls() []struct {
	ID configuration.ContainerImageIdentifier
} {
	var calls []struct {
		ID configuration.ContainerImageIdentifier
	}
	mock.lockGetContainerCatalogEntry.RLock()
	calls = mock.calls.GetContainerCatalogEntry
	mock.lockGetContainerCatalogEntry.RUnlock()
	return calls
}

// GetImageByID calls GetImageByIDFunc.
func (mock *CertAPIClientFuncsMock) GetImageByID(id string) (string, error) {
	if mock.GetImageByIDFunc == nil {
		panic("CertAPIClientFuncsMock.GetImageByIDFunc: method is nil but CertAPIClientFuncs.GetImageByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetImageByID.Lock()
	mock.calls.GetImageByID = append(mock.calls.GetImageByID, callInfo)
	mock.lockGetImageByID.Unlock()
	return mock.GetImageByIDFunc(id)
}

// GetImageByIDCalls gets all the calls that were made to GetImageByID.
// Check the length with:
//     len(mockedCertAPIClientFuncs.GetImageByIDCalls())
func (mock *CertAPIClientFuncsMock) GetImageByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetImageByID.RLock()
	calls = mock.calls.GetImageByID
	mock.lockGetImageByID.RUnlock()
	return calls
}

// GetImageIDByRepository calls GetImageIDByRepositoryFunc.
func (mock *CertAPIClientFuncsMock) GetImageIDByRepository(repository string, imageName string) (string, error) {
	if mock.GetImageIDByRepositoryFunc == nil {
		panic("CertAPIClientFuncsMock.GetImageIDByRepositoryFunc: method is nil but CertAPIClientFuncs.GetImageIDByRepository was just called")
	}
	callInfo := struct {
		Repository string
		ImageName  string
	}{
		Repository: repository,
		ImageName:  imageName,
	}
	mock.lockGetImageIDByRepository.Lock()
	mock.calls.GetImageIDByRepository = append(mock.calls.GetImageIDByRepository, callInfo)
	mock.lockGetImageIDByRepository.Unlock()
	return mock.GetImageIDByRepositoryFunc(repository, imageName)
}

// GetImageIDByRepositoryCalls gets all the calls that were made to GetImageIDByRepository.
// Check the length with:
//     len(mockedCertAPIClientFuncs.GetImageIDByRepositoryCalls())
func (mock *CertAPIClientFuncsMock) GetImageIDByRepositoryCalls() []struct {
	Repository string
	ImageName  string
} {
	var calls []struct {
		Repository string
		ImageName  string
	}
	mock.lockGetImageIDByRepository.RLock()
	calls = mock.calls.GetImageIDByRepository
	mock.lockGetImageIDByRepository.RUnlock()
	return calls
}

// GetOperatorBundleIDByPackageName calls GetOperatorBundleIDByPackageNameFunc.
func (mock *CertAPIClientFuncsMock) GetOperatorBundleIDByPackageName(org string, name string, version string) (string, error) {
	if mock.GetOperatorBundleIDByPackageNameFunc == nil {
		panic("CertAPIClientFuncsMock.GetOperatorBundleIDByPackageNameFunc: method is nil but CertAPIClientFuncs.GetOperatorBundleIDByPackageName was just called")
	}
	callInfo := struct {
		Org     string
		Name    string
		Version string
	}{
		Org:     org,
		Name:    name,
		Version: version,
	}
	mock.lockGetOperatorBundleIDByPackageName.Lock()
	mock.calls.GetOperatorBundleIDByPackageName = append(mock.calls.GetOperatorBundleIDByPackageName, callInfo)
	mock.lockGetOperatorBundleIDByPackageName.Unlock()
	return mock.GetOperatorBundleIDByPackageNameFunc(org, name, version)
}

// GetOperatorBundleIDByPackageNameCalls gets all the calls that were made to GetOperatorBundleIDByPackageName.
// Check the length with:
//     len(mockedCertAPIClientFuncs.GetOperatorBundleIDByPackageNameCalls())
func (mock *CertAPIClientFuncsMock) GetOperatorBundleIDByPackageNameCalls() []struct {
	Org     string
	Name    string
	Version string
} {
	var calls []struct {
		Org     string
		Name    string
		Version string
	}
	mock.lockGetOperatorBundleIDByPackageName.RLock()
	calls = mock.calls.GetOperatorBundleIDByPackageName
	mock.lockGetOperatorBundleIDByPackageName.RUnlock()
	return calls
}

// GetYamlFile calls GetYamlFileFunc.
func (mock *CertAPIClientFuncsMock) GetYamlFile() (ChartStruct, error) {
	if mock.GetYamlFileFunc == nil {
		panic("CertAPIClientFuncsMock.GetYamlFileFunc: method is nil but CertAPIClientFuncs.GetYamlFile was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetYamlFile.Lock()
	mock.calls.GetYamlFile = append(mock.calls.GetYamlFile, callInfo)
	mock.lockGetYamlFile.Unlock()
	return mock.GetYamlFileFunc()
}

// GetYamlFileCalls gets all the calls that were made to GetYamlFile.
// Check the length with:
//     len(mockedCertAPIClientFuncs.GetYamlFileCalls())
func (mock *CertAPIClientFuncsMock) GetYamlFileCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetYamlFile.RLock()
	calls = mock.calls.GetYamlFile
	mock.lockGetYamlFile.RUnlock()
	return calls
}

// IsContainerCertified calls IsContainerCertifiedFunc.
func (mock *CertAPIClientFuncsMock) IsContainerCertified(repository string, imageName string) bool {
	if mock.IsContainerCertifiedFunc == nil {
		panic("CertAPIClientFuncsMock.IsContainerCertifiedFunc: method is nil but CertAPIClientFuncs.IsContainerCertified was just called")
	}
	callInfo := struct {
		Repository string
		ImageName  string
	}{
		Repository: repository,
		ImageName:  imageName,
	}
	mock.lockIsContainerCertified.Lock()
	mock.calls.IsContainerCertified = append(mock.calls.IsContainerCertified, callInfo)
	mock.lockIsContainerCertified.Unlock()
	return mock.IsContainerCertifiedFunc(repository, imageName)
}

// IsContainerCertifiedCalls gets all the calls that were made to IsContainerCertified.
// Check the length with:
//     len(mockedCertAPIClientFuncs.IsContainerCertifiedCalls())
func (mock *CertAPIClientFuncsMock) IsContainerCertifiedCalls() []struct {
	Repository string
	ImageName  string
} {
	var calls []struct {
		Repository string
		ImageName  string
	}
	mock.lockIsContainerCertified.RLock()
	calls = mock.calls.IsContainerCertified
	mock.lockIsContainerCertified.RUnlock()
	return calls
}

// IsOperatorCertified calls IsOperatorCertifiedFunc.
func (mock *CertAPIClientFuncsMock) IsOperatorCertified(org string, packageName string, version string) (bool, error) {
	if mock.IsOperatorCertifiedFunc == nil {
		panic("CertAPIClientFuncsMock.IsOperatorCertifiedFunc: method is nil but CertAPIClientFuncs.IsOperatorCertified was just called")
	}
	callInfo := struct {
		Org         string
		PackageName string
		Version     string
	}{
		Org:         org,
		PackageName: packageName,
		Version:     version,
	}
	mock.lockIsOperatorCertified.Lock()
	mock.calls.IsOperatorCertified = append(mock.calls.IsOperatorCertified, callInfo)
	mock.lockIsOperatorCertified.Unlock()
	return mock.IsOperatorCertifiedFunc(org, packageName, version)
}

// IsOperatorCertifiedCalls gets all the calls that were made to IsOperatorCertified.
// Check the length with:
//     len(mockedCertAPIClientFuncs.IsOperatorCertifiedCalls())
func (mock *CertAPIClientFuncsMock) IsOperatorCertifiedCalls() []struct {
	Org         string
	PackageName string
	Version     string
} {
	var calls []struct {
		Org         string
		PackageName string
		Version     string
	}
	mock.lockIsOperatorCertified.RLock()
	calls = mock.calls.IsOperatorCertified
	mock.lockIsOperatorCertified.RUnlock()
	return calls
}

// getIDFromResponse calls getIDFromResponseFunc.
func (mock *CertAPIClientFuncsMock) getIDFromResponse(response []byte) (string, error) {
	if mock.getIDFromResponseFunc == nil {
		panic("CertAPIClientFuncsMock.getIDFromResponseFunc: method is nil but CertAPIClientFuncs.getIDFromResponse was just called")
	}
	callInfo := struct {
		Response []byte
	}{
		Response: response,
	}
	mock.lockgetIDFromResponse.Lock()
	mock.calls.getIDFromResponse = append(mock.calls.getIDFromResponse, callInfo)
	mock.lockgetIDFromResponse.Unlock()
	return mock.getIDFromResponseFunc(response)
}

// getIDFromResponseCalls gets all the calls that were made to getIDFromResponse.
// Check the length with:
//     len(mockedCertAPIClientFuncs.getIDFromResponseCalls())
func (mock *CertAPIClientFuncsMock) getIDFromResponseCalls() []struct {
	Response []byte
} {
	var calls []struct {
		Response []byte
	}
	mock.lockgetIDFromResponse.RLock()
	calls = mock.calls.getIDFromResponse
	mock.lockgetIDFromResponse.RUnlock()
	return calls
}

// getRequest calls getRequestFunc.
func (mock *CertAPIClientFuncsMock) getRequest(url string) ([]byte, error) {
	if mock.getRequestFunc == nil {
		panic("CertAPIClientFuncsMock.getRequestFunc: method is nil but CertAPIClientFuncs.getRequest was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockgetRequest.Lock()
	mock.calls.getRequest = append(mock.calls.getRequest, callInfo)
	mock.lockgetRequest.Unlock()
	return mock.getRequestFunc(url)
}

// getRequestCalls gets all the calls that were made to getRequest.
// Check the length with:
//     len(mockedCertAPIClientFuncs.getRequestCalls())
func (mock *CertAPIClientFuncsMock) getRequestCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockgetRequest.RLock()
	calls = mock.calls.getRequest
	mock.lockgetRequest.RUnlock()
	return calls
}
