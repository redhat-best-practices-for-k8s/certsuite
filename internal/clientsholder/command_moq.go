// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package clientsholder

import (
	"sync"
)

// Ensure, that CommandMock does implement Command.
// If this is not the case, regenerate this file with moq.
var _ Command = &CommandMock{}

// CommandMock Provides a mock implementation of Command for testing
//
// The struct holds a function field that replaces the real ExecCommandContainer
// method, allowing tests to supply custom behavior. It records each call with
// its context and string arguments in an internal slice protected by a
// readâ€‘write mutex. A helper returns the recorded calls for assertions.
type CommandMock struct {
	// ExecCommandContainerFunc mocks the ExecCommandContainer method.
	ExecCommandContainerFunc func(context Context, s string) (string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ExecCommandContainer holds details about calls to the ExecCommandContainer method.
		ExecCommandContainer []struct {
			// Context is the context argument value.
			Context Context
			// S is the s argument value.
			S string
		}
	}
	lockExecCommandContainer sync.RWMutex
}

// CommandMock.ExecCommandContainer invokes a user-defined function to execute container commands
//
// This method records the call arguments, ensures thread safety with locks, and
// then delegates execution to the mock's ExecCommandContainerFunc. If no
// implementation is provided it panics to signal misuse. The return values are
// the stdout, stderr output strings and an error from the underlying function.
func (mock *CommandMock) ExecCommandContainer(context Context, s string) (string, string, error) {
	if mock.ExecCommandContainerFunc == nil {
		panic("CommandMock.ExecCommandContainerFunc: method is nil but Command.ExecCommandContainer was just called")
	}
	callInfo := struct {
		Context Context
		S       string
	}{
		Context: context,
		S:       s,
	}
	mock.lockExecCommandContainer.Lock()
	mock.calls.ExecCommandContainer = append(mock.calls.ExecCommandContainer, callInfo)
	mock.lockExecCommandContainer.Unlock()
	return mock.ExecCommandContainerFunc(context, s)
}

// CommandMock.ExecCommandContainerCalls retrieves every ExecCommandContainer call that has been logged
//
// This method gathers all the calls made to ExecCommandContainer into a slice
// of structures containing the execution context and the string argument used.
// It acquires a read lock on the internal mutex to safely access the stored
// calls, then releases the lock before returning the slice. The result allows
// callers to inspect or assert how many times and with what parameters
// ExecCommandContainer was invoked.
func (mock *CommandMock) ExecCommandContainerCalls() []struct {
	Context Context
	S       string
} {
	var calls []struct {
		Context Context
		S       string
	}
	mock.lockExecCommandContainer.RLock()
	calls = mock.calls.ExecCommandContainer
	mock.lockExecCommandContainer.RUnlock()
	return calls
}
