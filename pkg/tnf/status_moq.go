// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tnf

import (
	"sync"
)

// Ensure, that GinkgoFuncsMock does implement GinkgoFuncs.
// If this is not the case, regenerate this file with moq.
var _ GinkgoFuncs = &GinkgoFuncsMock{}

// GinkgoFuncsMock is a mock implementation of GinkgoFuncs.
//
// 	func TestSomethingThatUsesGinkgoFuncs(t *testing.T) {
//
// 		// make and configure a mocked GinkgoFuncs
// 		mockedGinkgoFuncs := &GinkgoFuncsMock{
// 			GinkgoAbortSuiteFunc: func(message string, callerSkip ...int)  {
// 				panic("mock out the GinkgoAbortSuite method")
// 			},
// 			GinkgoByFunc: func(text string, callback ...func())  {
// 				panic("mock out the GinkgoBy method")
// 			},
// 			GinkgoFailFunc: func(message string, callerSkip ...int)  {
// 				panic("mock out the GinkgoFail method")
// 			},
// 			GinkgoSkipFunc: func(message string, callerSkip ...int)  {
// 				panic("mock out the GinkgoSkip method")
// 			},
// 		}
//
// 		// use mockedGinkgoFuncs in code that requires GinkgoFuncs
// 		// and then make assertions.
//
// 	}
type GinkgoFuncsMock struct {
	// GinkgoAbortSuiteFunc mocks the GinkgoAbortSuite method.
	GinkgoAbortSuiteFunc func(message string, callerSkip ...int)

	// GinkgoByFunc mocks the GinkgoBy method.
	GinkgoByFunc func(text string, callback ...func())

	// GinkgoFailFunc mocks the GinkgoFail method.
	GinkgoFailFunc func(message string, callerSkip ...int)

	// GinkgoSkipFunc mocks the GinkgoSkip method.
	GinkgoSkipFunc func(message string, callerSkip ...int)

	// calls tracks calls to the methods.
	calls struct {
		// GinkgoAbortSuite holds details about calls to the GinkgoAbortSuite method.
		GinkgoAbortSuite []struct {
			// Message is the message argument value.
			Message string
			// CallerSkip is the callerSkip argument value.
			CallerSkip []int
		}
		// GinkgoBy holds details about calls to the GinkgoBy method.
		GinkgoBy []struct {
			// Text is the text argument value.
			Text string
			// Callback is the callback argument value.
			Callback []func()
		}
		// GinkgoFail holds details about calls to the GinkgoFail method.
		GinkgoFail []struct {
			// Message is the message argument value.
			Message string
			// CallerSkip is the callerSkip argument value.
			CallerSkip []int
		}
		// GinkgoSkip holds details about calls to the GinkgoSkip method.
		GinkgoSkip []struct {
			// Message is the message argument value.
			Message string
			// CallerSkip is the callerSkip argument value.
			CallerSkip []int
		}
	}
	lockGinkgoAbortSuite sync.RWMutex
	lockGinkgoBy         sync.RWMutex
	lockGinkgoFail       sync.RWMutex
	lockGinkgoSkip       sync.RWMutex
}

// GinkgoAbortSuite calls GinkgoAbortSuiteFunc.
func (mock *GinkgoFuncsMock) GinkgoAbortSuite(message string, callerSkip ...int) {
	if mock.GinkgoAbortSuiteFunc == nil {
		panic("GinkgoFuncsMock.GinkgoAbortSuiteFunc: method is nil but GinkgoFuncs.GinkgoAbortSuite was just called")
	}
	callInfo := struct {
		Message    string
		CallerSkip []int
	}{
		Message:    message,
		CallerSkip: callerSkip,
	}
	mock.lockGinkgoAbortSuite.Lock()
	mock.calls.GinkgoAbortSuite = append(mock.calls.GinkgoAbortSuite, callInfo)
	mock.lockGinkgoAbortSuite.Unlock()
	mock.GinkgoAbortSuiteFunc(message, callerSkip...)
}

// GinkgoAbortSuiteCalls gets all the calls that were made to GinkgoAbortSuite.
// Check the length with:
//     len(mockedGinkgoFuncs.GinkgoAbortSuiteCalls())
func (mock *GinkgoFuncsMock) GinkgoAbortSuiteCalls() []struct {
	Message    string
	CallerSkip []int
} {
	var calls []struct {
		Message    string
		CallerSkip []int
	}
	mock.lockGinkgoAbortSuite.RLock()
	calls = mock.calls.GinkgoAbortSuite
	mock.lockGinkgoAbortSuite.RUnlock()
	return calls
}

// GinkgoBy calls GinkgoByFunc.
func (mock *GinkgoFuncsMock) GinkgoBy(text string, callback ...func()) {
	if mock.GinkgoByFunc == nil {
		panic("GinkgoFuncsMock.GinkgoByFunc: method is nil but GinkgoFuncs.GinkgoBy was just called")
	}
	callInfo := struct {
		Text     string
		Callback []func()
	}{
		Text:     text,
		Callback: callback,
	}
	mock.lockGinkgoBy.Lock()
	mock.calls.GinkgoBy = append(mock.calls.GinkgoBy, callInfo)
	mock.lockGinkgoBy.Unlock()
	mock.GinkgoByFunc(text, callback...)
}

// GinkgoByCalls gets all the calls that were made to GinkgoBy.
// Check the length with:
//     len(mockedGinkgoFuncs.GinkgoByCalls())
func (mock *GinkgoFuncsMock) GinkgoByCalls() []struct {
	Text     string
	Callback []func()
} {
	var calls []struct {
		Text     string
		Callback []func()
	}
	mock.lockGinkgoBy.RLock()
	calls = mock.calls.GinkgoBy
	mock.lockGinkgoBy.RUnlock()
	return calls
}

// GinkgoFail calls GinkgoFailFunc.
func (mock *GinkgoFuncsMock) GinkgoFail(message string, callerSkip ...int) {
	if mock.GinkgoFailFunc == nil {
		panic("GinkgoFuncsMock.GinkgoFailFunc: method is nil but GinkgoFuncs.GinkgoFail was just called")
	}
	callInfo := struct {
		Message    string
		CallerSkip []int
	}{
		Message:    message,
		CallerSkip: callerSkip,
	}
	mock.lockGinkgoFail.Lock()
	mock.calls.GinkgoFail = append(mock.calls.GinkgoFail, callInfo)
	mock.lockGinkgoFail.Unlock()
	mock.GinkgoFailFunc(message, callerSkip...)
}

// GinkgoFailCalls gets all the calls that were made to GinkgoFail.
// Check the length with:
//     len(mockedGinkgoFuncs.GinkgoFailCalls())
func (mock *GinkgoFuncsMock) GinkgoFailCalls() []struct {
	Message    string
	CallerSkip []int
} {
	var calls []struct {
		Message    string
		CallerSkip []int
	}
	mock.lockGinkgoFail.RLock()
	calls = mock.calls.GinkgoFail
	mock.lockGinkgoFail.RUnlock()
	return calls
}

// GinkgoSkip calls GinkgoSkipFunc.
func (mock *GinkgoFuncsMock) GinkgoSkip(message string, callerSkip ...int) {
	if mock.GinkgoSkipFunc == nil {
		panic("GinkgoFuncsMock.GinkgoSkipFunc: method is nil but GinkgoFuncs.GinkgoSkip was just called")
	}
	callInfo := struct {
		Message    string
		CallerSkip []int
	}{
		Message:    message,
		CallerSkip: callerSkip,
	}
	mock.lockGinkgoSkip.Lock()
	mock.calls.GinkgoSkip = append(mock.calls.GinkgoSkip, callInfo)
	mock.lockGinkgoSkip.Unlock()
	mock.GinkgoSkipFunc(message, callerSkip...)
}

// GinkgoSkipCalls gets all the calls that were made to GinkgoSkip.
// Check the length with:
//     len(mockedGinkgoFuncs.GinkgoSkipCalls())
func (mock *GinkgoFuncsMock) GinkgoSkipCalls() []struct {
	Message    string
	CallerSkip []int
} {
	var calls []struct {
		Message    string
		CallerSkip []int
	}
	mock.lockGinkgoSkip.RLock()
	calls = mock.calls.GinkgoSkip
	mock.lockGinkgoSkip.RUnlock()
	return calls
}
