// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cnffsdiff

import (
	"github.com/test-network-function/cnf-certification-test/internal/clientsholder"
	"sync"
)

// Ensure, that FsDiffFuncsMock does implement FsDiffFuncs.
// If this is not the case, regenerate this file with moq.
var _ FsDiffFuncs = &FsDiffFuncsMock{}

// FsDiffFuncsMock is a mock implementation of FsDiffFuncs.
//
// 	func TestSomethingThatUsesFsDiffFuncs(t *testing.T) {
//
// 		// make and configure a mocked FsDiffFuncs
// 		mockedFsDiffFuncs := &FsDiffFuncsMock{
// 			GetResultsFunc: func() int {
// 				panic("mock out the GetResults method")
// 			},
// 			RunTestFunc: func(ctx clientsholder.Context)  {
// 				panic("mock out the RunTest method")
// 			},
// 		}
//
// 		// use mockedFsDiffFuncs in code that requires FsDiffFuncs
// 		// and then make assertions.
//
// 	}
type FsDiffFuncsMock struct {
	// GetResultsFunc mocks the GetResults method.
	GetResultsFunc func() int

	// RunTestFunc mocks the RunTest method.
	RunTestFunc func(ctx clientsholder.Context)

	// calls tracks calls to the methods.
	calls struct {
		// GetResults holds details about calls to the GetResults method.
		GetResults []struct {
		}
		// RunTest holds details about calls to the RunTest method.
		RunTest []struct {
			// Ctx is the ctx argument value.
			Ctx clientsholder.Context
		}
	}
	lockGetResults sync.RWMutex
	lockRunTest    sync.RWMutex
}

// GetResults calls GetResultsFunc.
func (mock *FsDiffFuncsMock) GetResults() int {
	if mock.GetResultsFunc == nil {
		panic("FsDiffFuncsMock.GetResultsFunc: method is nil but FsDiffFuncs.GetResults was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetResults.Lock()
	mock.calls.GetResults = append(mock.calls.GetResults, callInfo)
	mock.lockGetResults.Unlock()
	return mock.GetResultsFunc()
}

// GetResultsCalls gets all the calls that were made to GetResults.
// Check the length with:
//     len(mockedFsDiffFuncs.GetResultsCalls())
func (mock *FsDiffFuncsMock) GetResultsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetResults.RLock()
	calls = mock.calls.GetResults
	mock.lockGetResults.RUnlock()
	return calls
}

// RunTest calls RunTestFunc.
func (mock *FsDiffFuncsMock) RunTest(ctx clientsholder.Context) {
	if mock.RunTestFunc == nil {
		panic("FsDiffFuncsMock.RunTestFunc: method is nil but FsDiffFuncs.RunTest was just called")
	}
	callInfo := struct {
		Ctx clientsholder.Context
	}{
		Ctx: ctx,
	}
	mock.lockRunTest.Lock()
	mock.calls.RunTest = append(mock.calls.RunTest, callInfo)
	mock.lockRunTest.Unlock()
	mock.RunTestFunc(ctx)
}

// RunTestCalls gets all the calls that were made to RunTest.
// Check the length with:
//     len(mockedFsDiffFuncs.RunTestCalls())
func (mock *FsDiffFuncsMock) RunTestCalls() []struct {
	Ctx clientsholder.Context
} {
	var calls []struct {
		Ctx clientsholder.Context
	}
	mock.lockRunTest.RLock()
	calls = mock.calls.RunTest
	mock.lockRunTest.RUnlock()
	return calls
}
