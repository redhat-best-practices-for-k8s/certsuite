// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rbac

import (
	"sync"
)

// Ensure, that AutomountTokenFuncsMock does implement AutomountTokenFuncs.
// If this is not the case, regenerate this file with moq.
var _ AutomountTokenFuncs = &AutomountTokenFuncsMock{}

// AutomountTokenFuncsMock is a mock implementation of AutomountTokenFuncs.
//
// 	func TestSomethingThatUsesAutomountTokenFuncs(t *testing.T) {
//
// 		// make and configure a mocked AutomountTokenFuncs
// 		mockedAutomountTokenFuncs := &AutomountTokenFuncsMock{
// 			AutomountServiceAccountSetOnSAFunc: func(serviceAccountName string, podNamespace string) (*bool, error) {
// 				panic("mock out the AutomountServiceAccountSetOnSA method")
// 			},
// 			SetTestingResultFunc: func(result bool)  {
// 				panic("mock out the SetTestingResult method")
// 			},
// 		}
//
// 		// use mockedAutomountTokenFuncs in code that requires AutomountTokenFuncs
// 		// and then make assertions.
//
// 	}
type AutomountTokenFuncsMock struct {
	// AutomountServiceAccountSetOnSAFunc mocks the AutomountServiceAccountSetOnSA method.
	AutomountServiceAccountSetOnSAFunc func(serviceAccountName string, podNamespace string) (*bool, error)

	// SetTestingResultFunc mocks the SetTestingResult method.
	SetTestingResultFunc func(result bool)

	// calls tracks calls to the methods.
	calls struct {
		// AutomountServiceAccountSetOnSA holds details about calls to the AutomountServiceAccountSetOnSA method.
		AutomountServiceAccountSetOnSA []struct {
			// ServiceAccountName is the serviceAccountName argument value.
			ServiceAccountName string
			// PodNamespace is the podNamespace argument value.
			PodNamespace string
		}
		// SetTestingResult holds details about calls to the SetTestingResult method.
		SetTestingResult []struct {
			// Result is the result argument value.
			Result bool
		}
	}
	lockAutomountServiceAccountSetOnSA sync.RWMutex
	lockSetTestingResult               sync.RWMutex
}

// AutomountServiceAccountSetOnSA calls AutomountServiceAccountSetOnSAFunc.
func (mock *AutomountTokenFuncsMock) AutomountServiceAccountSetOnSA(serviceAccountName string, podNamespace string) (*bool, error) {
	if mock.AutomountServiceAccountSetOnSAFunc == nil {
		panic("AutomountTokenFuncsMock.AutomountServiceAccountSetOnSAFunc: method is nil but AutomountTokenFuncs.AutomountServiceAccountSetOnSA was just called")
	}
	callInfo := struct {
		ServiceAccountName string
		PodNamespace       string
	}{
		ServiceAccountName: serviceAccountName,
		PodNamespace:       podNamespace,
	}
	mock.lockAutomountServiceAccountSetOnSA.Lock()
	mock.calls.AutomountServiceAccountSetOnSA = append(mock.calls.AutomountServiceAccountSetOnSA, callInfo)
	mock.lockAutomountServiceAccountSetOnSA.Unlock()
	return mock.AutomountServiceAccountSetOnSAFunc(serviceAccountName, podNamespace)
}

// AutomountServiceAccountSetOnSACalls gets all the calls that were made to AutomountServiceAccountSetOnSA.
// Check the length with:
//     len(mockedAutomountTokenFuncs.AutomountServiceAccountSetOnSACalls())
func (mock *AutomountTokenFuncsMock) AutomountServiceAccountSetOnSACalls() []struct {
	ServiceAccountName string
	PodNamespace       string
} {
	var calls []struct {
		ServiceAccountName string
		PodNamespace       string
	}
	mock.lockAutomountServiceAccountSetOnSA.RLock()
	calls = mock.calls.AutomountServiceAccountSetOnSA
	mock.lockAutomountServiceAccountSetOnSA.RUnlock()
	return calls
}

// SetTestingResult calls SetTestingResultFunc.
func (mock *AutomountTokenFuncsMock) SetTestingResult(result bool) {
	if mock.SetTestingResultFunc == nil {
		panic("AutomountTokenFuncsMock.SetTestingResultFunc: method is nil but AutomountTokenFuncs.SetTestingResult was just called")
	}
	callInfo := struct {
		Result bool
	}{
		Result: result,
	}
	mock.lockSetTestingResult.Lock()
	mock.calls.SetTestingResult = append(mock.calls.SetTestingResult, callInfo)
	mock.lockSetTestingResult.Unlock()
	mock.SetTestingResultFunc(result)
}

// SetTestingResultCalls gets all the calls that were made to SetTestingResult.
// Check the length with:
//     len(mockedAutomountTokenFuncs.SetTestingResultCalls())
func (mock *AutomountTokenFuncsMock) SetTestingResultCalls() []struct {
	Result bool
} {
	var calls []struct {
		Result bool
	}
	mock.lockSetTestingResult.RLock()
	calls = mock.calls.SetTestingResult
	mock.lockSetTestingResult.RUnlock()
	return calls
}
