// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rbac

import (
	"sync"
)

// Ensure, that RoleBindingFuncsMock does implement RoleBindingFuncs.
// If this is not the case, regenerate this file with moq.
var _ RoleBindingFuncs = &RoleBindingFuncsMock{}

// RoleBindingFuncsMock is a mock implementation of RoleBindingFuncs.
//
// 	func TestSomethingThatUsesRoleBindingFuncs(t *testing.T) {
//
// 		// make and configure a mocked RoleBindingFuncs
// 		mockedRoleBindingFuncs := &RoleBindingFuncsMock{
// 			GetRoleBindingsFunc: func(podNamespace string, serviceAccountName string) ([]string, error) {
// 				panic("mock out the GetRoleBindings method")
// 			},
// 			SetTestingResultFunc: func(result bool)  {
// 				panic("mock out the SetTestingResult method")
// 			},
// 		}
//
// 		// use mockedRoleBindingFuncs in code that requires RoleBindingFuncs
// 		// and then make assertions.
//
// 	}
type RoleBindingFuncsMock struct {
	// GetRoleBindingsFunc mocks the GetRoleBindings method.
	GetRoleBindingsFunc func(podNamespace string, serviceAccountName string) ([]string, error)

	// SetTestingResultFunc mocks the SetTestingResult method.
	SetTestingResultFunc func(result bool)

	// calls tracks calls to the methods.
	calls struct {
		// GetRoleBindings holds details about calls to the GetRoleBindings method.
		GetRoleBindings []struct {
			// PodNamespace is the podNamespace argument value.
			PodNamespace string
			// ServiceAccountName is the serviceAccountName argument value.
			ServiceAccountName string
		}
		// SetTestingResult holds details about calls to the SetTestingResult method.
		SetTestingResult []struct {
			// Result is the result argument value.
			Result bool
		}
	}
	lockGetRoleBindings  sync.RWMutex
	lockSetTestingResult sync.RWMutex
}

// GetRoleBindings calls GetRoleBindingsFunc.
func (mock *RoleBindingFuncsMock) GetRoleBindings(podNamespace string, serviceAccountName string) ([]string, error) {
	if mock.GetRoleBindingsFunc == nil {
		panic("RoleBindingFuncsMock.GetRoleBindingsFunc: method is nil but RoleBindingFuncs.GetRoleBindings was just called")
	}
	callInfo := struct {
		PodNamespace       string
		ServiceAccountName string
	}{
		PodNamespace:       podNamespace,
		ServiceAccountName: serviceAccountName,
	}
	mock.lockGetRoleBindings.Lock()
	mock.calls.GetRoleBindings = append(mock.calls.GetRoleBindings, callInfo)
	mock.lockGetRoleBindings.Unlock()
	return mock.GetRoleBindingsFunc(podNamespace, serviceAccountName)
}

// GetRoleBindingsCalls gets all the calls that were made to GetRoleBindings.
// Check the length with:
//     len(mockedRoleBindingFuncs.GetRoleBindingsCalls())
func (mock *RoleBindingFuncsMock) GetRoleBindingsCalls() []struct {
	PodNamespace       string
	ServiceAccountName string
} {
	var calls []struct {
		PodNamespace       string
		ServiceAccountName string
	}
	mock.lockGetRoleBindings.RLock()
	calls = mock.calls.GetRoleBindings
	mock.lockGetRoleBindings.RUnlock()
	return calls
}

// SetTestingResult calls SetTestingResultFunc.
func (mock *RoleBindingFuncsMock) SetTestingResult(result bool) {
	if mock.SetTestingResultFunc == nil {
		panic("RoleBindingFuncsMock.SetTestingResultFunc: method is nil but RoleBindingFuncs.SetTestingResult was just called")
	}
	callInfo := struct {
		Result bool
	}{
		Result: result,
	}
	mock.lockSetTestingResult.Lock()
	mock.calls.SetTestingResult = append(mock.calls.SetTestingResult, callInfo)
	mock.lockSetTestingResult.Unlock()
	mock.SetTestingResultFunc(result)
}

// SetTestingResultCalls gets all the calls that were made to SetTestingResult.
// Check the length with:
//     len(mockedRoleBindingFuncs.SetTestingResultCalls())
func (mock *RoleBindingFuncsMock) SetTestingResultCalls() []struct {
	Result bool
} {
	var calls []struct {
		Result bool
	}
	mock.lockSetTestingResult.RLock()
	calls = mock.calls.SetTestingResult
	mock.lockSetTestingResult.RUnlock()
	return calls
}
