name: QE Testing (Ubuntu-hosted)

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  # Schedule a daily cron at midnight UTC
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: read

env:
  QE_REPO: redhat-best-practices-for-k8s/certsuite-qe
  CERTSUITE_IMAGE_NAME: quay.io/redhat-best-practices-for-k8s/certsuite
  CERTSUITE_IMAGE_NAME_LEGACY: quay.io/redhat-best-practices-for-k8s/redhat-best-practices-for-k8s-certsuite
  TEST_CERTSUITE_IMAGE_TAG: localtest
  CERTSUITE_CONFIG_DIR: '/tmp/certsuite_config'
  CERTSUITE_REPORT_DIR: '/tmp/certsuite_report'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build the image used for testing first, then pass the reference to the QE tests.
  # This saves time and resources by not building the image in each QE suite.
  build-image-for-qe:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.sha }}

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Build temporary image tag for this PR
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        with:
          context: .
          file: ./Dockerfile
          tags: |
            ${{ env.CERTSUITE_IMAGE_NAME }}:${{ env.TEST_CERTSUITE_IMAGE_TAG }}
            ${{ env.CERTSUITE_IMAGE_NAME_LEGACY }}:${{ env.TEST_CERTSUITE_IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/testimage.tar
      
      - name: Store image as artifact
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: testimage
          path: /tmp/testimage.tar

  qe-testing:
    runs-on: ubuntu-22.04
    needs: build-image-for-qe
    if: needs.build-image-for-qe.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        suite: [accesscontrol, affiliatedcertification, manageability, networking, lifecycle, performance, platformalteration, observability, operator]
    env:
      SHELL: /bin/bash
      KUBECONFIG: '/home/runner/.kube/config'
      PFLT_DOCKERCONFIG: '/home/runner/.docker/config'
      DOCKER_CONFIG_DIR: '/home/runner/.docker/'
      SKIP_PRELOAD_IMAGES: true

    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.sha }}

      - name: Run initial setup
        uses: ./.github/actions/setup

      # Download the image from the artifact and load it into the docker daemon.
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Setup partner cluster
        uses: ./.github/actions/setup-partner-cluster
        with:
          make-command: 'install-for-qe'

      - name: Download image from artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: testimage
          path: /tmp

      - name: Load image into docker
        run: docker load --input /tmp/testimage.tar

      - name: Wait for all pods to be ready
        run: ./scripts/wait-for-all-pods-running.sh
        working-directory: certsuite-sample-workload
        timeout-minutes: 10

      - name: Clone the QE repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: ${{ env.QE_REPO }}
          path: certsuite-qe
          ref: main

      - name: Extract dependent Pull Requests
        uses: depends-on/depends-on-action@9e8a61fce18b15281e831f1bba0e14c71d1e1f46 # main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run the tests (against image)
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e # v3.0.0
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: cd ${GITHUB_WORKSPACE}/certsuite-qe; FEATURES=${{matrix.suite}} CERTSUITE_REPO_PATH=${GITHUB_WORKSPACE} CERTSUITE_IMAGE=${{env.CERTSUITE_IMAGE_NAME}} CERTSUITE_IMAGE_TAG=${{env.TEST_CERTSUITE_IMAGE_TAG}} JOB_ID=${{github.run_id}} DISABLE_INTRUSIVE_TESTS=true ENABLE_PARALLEL=true ENABLE_FLAKY_RETRY=true make test-features

      # Only run against the binary during a scheduled run
      - name: Build the binary
        if: github.event_name == 'schedule'
        run: make build-certsuite-tool
        
      - name: Run the tests (against binary)
        if: github.event_name == 'schedule'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e # v3.0.0
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: cd ${GITHUB_WORKSPACE}/certsuite-qe; FEATURES=${{matrix.suite}} CERTSUITE_REPO_PATH=${GITHUB_WORKSPACE} USE_BINARY=true JOB_ID=${{github.run_id}} DISABLE_INTRUSIVE_TESTS=true ENABLE_PARALLEL=true ENABLE_FLAKY_RETRY=true make test-features

      - name: (if on main and upstream) Send chat msg to dev team if failed to run QE tests
        if: ${{ failure() && github.ref == 'refs/heads/main' && github.repository_owner == 'redhat-best-practices-for-k8s' }}
        env:
          COMMIT_SHA: ${{ github.sha }}
          JOB_RUN_ID: ${{ github.run_id }}
          JOB_RUN_ATTEMPT: ${{ github.run_attempt }}
          GITHUB_REPO: https://github.com/redhat-best-practices-for-k8s/certsuite
        run: |
          curl -X POST --data "{
              \"text\": \"üö®‚ö†Ô∏è  Failed to run Github hosted QE tests from commit \<$GITHUB_REPO/commit/$COMMIT_SHA|$COMMIT_SHA\>, job ID \<$GITHUB_REPO/actions/runs/$JOB_RUN_ID/attempts/$JOB_RUN_ATTEMPT|$JOB_RUN_ID\> \"
          }" -H 'Content-type: application/json; charset=UTF-8' '${{ secrets.QE_NIGHTLY_WEBHOOK }}'
