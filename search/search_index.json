{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 This repository provides a set of Cloud-Native Network Functions ( CNF ) test cases and the framework to add more test cases. CNF The app (containers/pods/operators) we want to certify according Verizon/RH\u2019s best practices. TNF /Certification Test Suite The tool we use to certify a CNF . The purpose of the tests and the framework is to test the interaction of CNF with OpenShift Container Platform ( OCP ). Info This test suite is provided for the CNF Developers to test their CNFs readiness for certification. Please see \u201c CNF Developers\u201d for more information. Features The framework generates a report (named claim.json ) as the end of test execution. The catalog of the existing test cases and test building blocks are available in CATALOG.md Architecture \u00b6 There are 3 building blocks in the above framework. the CNF represents the CNF to be certified. The certification suite identifies the resources (containers/pods/operators etc) belonging to the CNF via labels or static data entries in the config file the Certification container/exec is the certification test suite running on the platform or in a container. The executable verifies the CNF under test configuration and its interactions with openshift the Debug pods are part of a Kubernetes daemonset responsible to run various privileged commands on kubernetes nodes. Debug pods are useful to run platform tests and test commands (e.g. ping) in container namespaces without changing the container image content. The debug daemonset is instantiated via the cnf-certification-test-partner repository.","title":"Overview"},{"location":"#overview","text":"This repository provides a set of Cloud-Native Network Functions ( CNF ) test cases and the framework to add more test cases. CNF The app (containers/pods/operators) we want to certify according Verizon/RH\u2019s best practices. TNF /Certification Test Suite The tool we use to certify a CNF . The purpose of the tests and the framework is to test the interaction of CNF with OpenShift Container Platform ( OCP ). Info This test suite is provided for the CNF Developers to test their CNFs readiness for certification. Please see \u201c CNF Developers\u201d for more information. Features The framework generates a report (named claim.json ) as the end of test execution. The catalog of the existing test cases and test building blocks are available in CATALOG.md","title":"Overview"},{"location":"#architecture","text":"There are 3 building blocks in the above framework. the CNF represents the CNF to be certified. The certification suite identifies the resources (containers/pods/operators etc) belonging to the CNF via labels or static data entries in the config file the Certification container/exec is the certification test suite running on the platform or in a container. The executable verifies the CNF under test configuration and its interactions with openshift the Debug pods are part of a Kubernetes daemonset responsible to run various privileged commands on kubernetes nodes. Debug pods are useful to run platform tests and test commands (e.g. ping) in container namespaces without changing the container image content. The debug daemonset is instantiated via the cnf-certification-test-partner repository.","title":"Architecture"},{"location":"cnf-developers/","text":"CNF Developers Guidelines \u00b6","title":"CNF Developers"},{"location":"cnf-developers/#cnf-developers-guidelines","text":"","title":"CNF Developers Guidelines"},{"location":"configuration/","text":"Test configuration \u00b6 The certification test suite supports autodiscovery using labels and annotations. These can be configured through a config file. Sample As per the requirement the following fields can be changed. targetNameSpaces \u00b6 Multiple namespaces can be specified to deploy partner pods for testing through targetNameSpaces in the config file. targetNameSpaces : - name : firstnamespace - name : secondnamespace targetPodLabels \u00b6 The goal of this section is to specify the labels to be used to identify the CNF resources under test. Highly recommended The labels should be defined in pod definition rather than added after pod is created, as labels added later on will be lost in case the pod gets rescheduled. In case of pods defined as part of a deployment, it\u2019s best to use the same label as the one defined in the spec.selector.matchLabels section of the deployment yaml. The prefix field can be used to avoid naming collision with other labels. targetPodLabels : - prefix : test-network-function.com name : generic value : target The corresponding pod label used to match pods is: test-network-function.com/generic : target Once the pods are found, all of their containers are also added to the target container list. A target deployment list will also be created with all the deployments which the test pods belong to. targetCrds \u00b6 In order to autodiscover the CRDs to be tested, an array of search filters can be set under the \u201ctargetCrdFilters\u201d label. The autodiscovery mechanism will iterate through all the filters to look for all the CRDs that match it. Currently, filters only work by name suffix. targetCrdFilters : - nameSuffix : \"group1.tnf.com\" - nameSuffix : \"anydomain.com\" The autodiscovery mechanism will create a list of all CRD names in the cluster whose names have the suffix group1.tnf.com or anydomain.com , e.g. crd1.group1.tnf.com or mycrd.mygroup.anydomain.com . testTarget \u00b6 podsUnderTest / containersUnderTest \u00b6 The autodiscovery mechanism will attempt to identify the default network device and all the IP addresses of the pods it needs for network connectivity tests, though that information can be explicitly set using annotations if needed. Pod IPs \u00b6 The annotation test-network-function.com/multusips is the highest priority, and must contain a JSON-encoded list of IP addresses to be tested for the pod. This must be explicitly set . If the above is not present, the k8s.v1.cni.cncf.io/networks-status annotation is checked and all IPs from it are used. This annotation is automatically managed in OpenShift but may not be present in K8s. If neither of the above is present, then only known IPs associated with the pod are used (the pod .status.ips field). Network Interfaces \u00b6 The annotation test-network-function.com/defaultnetworkinterface is the highest priority, and must contain a JSON-encoded string of the primary network interface for the pod. This must be explicitly set if needed. Examples are provided in cnf-certification-test-partner . If the above is not present, the k8s.v1.cni.cncf.io/networks-status annotation is checked and the interface from the first entry found with \"default\"=true is used. This annotation is automatically managed in OpenShift but may not be present in K8s. The label test-network-function.com/skip_connectivity_tests excludes pods from all connectivity tests. The label value is not important, only its presence. The label test-network-function.com/skip_multus_connectivity_tests excludes pods from Multus connectivity tests. Tests on default interface are still done. The label value is not important, but its presence. AffinityRequired \u00b6 For CNF workloads that require pods to use Pod or Node Affinity rules, the label AffinityRequired: true must be included on either the Deployment, StatefulSet, or Pod YAML. This will prevent any tests for anti-affinity to fail as well as test your workloads for affinity rules that support your CNF \u2018s use-case. certifiedcontainerinfo \u00b6 The certifiedcontainerinfo section contains information about CNFs containers that are to be checked for certification status on Red Hat catalogs. Operators \u00b6 CSVs to be tested by the operator and affiliated-certification specs are identified with the test-network-function.com/operator=target label. Any value is permitted but target is used here for consistency with the other specs.","title":"Test Configuration"},{"location":"configuration/#test-configuration","text":"The certification test suite supports autodiscovery using labels and annotations. These can be configured through a config file. Sample As per the requirement the following fields can be changed.","title":"Test configuration"},{"location":"configuration/#targetnamespaces","text":"Multiple namespaces can be specified to deploy partner pods for testing through targetNameSpaces in the config file. targetNameSpaces : - name : firstnamespace - name : secondnamespace","title":"targetNameSpaces"},{"location":"configuration/#targetpodlabels","text":"The goal of this section is to specify the labels to be used to identify the CNF resources under test. Highly recommended The labels should be defined in pod definition rather than added after pod is created, as labels added later on will be lost in case the pod gets rescheduled. In case of pods defined as part of a deployment, it\u2019s best to use the same label as the one defined in the spec.selector.matchLabels section of the deployment yaml. The prefix field can be used to avoid naming collision with other labels. targetPodLabels : - prefix : test-network-function.com name : generic value : target The corresponding pod label used to match pods is: test-network-function.com/generic : target Once the pods are found, all of their containers are also added to the target container list. A target deployment list will also be created with all the deployments which the test pods belong to.","title":"targetPodLabels"},{"location":"configuration/#targetcrds","text":"In order to autodiscover the CRDs to be tested, an array of search filters can be set under the \u201ctargetCrdFilters\u201d label. The autodiscovery mechanism will iterate through all the filters to look for all the CRDs that match it. Currently, filters only work by name suffix. targetCrdFilters : - nameSuffix : \"group1.tnf.com\" - nameSuffix : \"anydomain.com\" The autodiscovery mechanism will create a list of all CRD names in the cluster whose names have the suffix group1.tnf.com or anydomain.com , e.g. crd1.group1.tnf.com or mycrd.mygroup.anydomain.com .","title":"targetCrds"},{"location":"configuration/#testtarget","text":"","title":"testTarget"},{"location":"configuration/#podsundertest-containersundertest","text":"The autodiscovery mechanism will attempt to identify the default network device and all the IP addresses of the pods it needs for network connectivity tests, though that information can be explicitly set using annotations if needed.","title":"podsUnderTest / containersUnderTest"},{"location":"configuration/#pod-ips","text":"The annotation test-network-function.com/multusips is the highest priority, and must contain a JSON-encoded list of IP addresses to be tested for the pod. This must be explicitly set . If the above is not present, the k8s.v1.cni.cncf.io/networks-status annotation is checked and all IPs from it are used. This annotation is automatically managed in OpenShift but may not be present in K8s. If neither of the above is present, then only known IPs associated with the pod are used (the pod .status.ips field).","title":"Pod IPs"},{"location":"configuration/#network-interfaces","text":"The annotation test-network-function.com/defaultnetworkinterface is the highest priority, and must contain a JSON-encoded string of the primary network interface for the pod. This must be explicitly set if needed. Examples are provided in cnf-certification-test-partner . If the above is not present, the k8s.v1.cni.cncf.io/networks-status annotation is checked and the interface from the first entry found with \"default\"=true is used. This annotation is automatically managed in OpenShift but may not be present in K8s. The label test-network-function.com/skip_connectivity_tests excludes pods from all connectivity tests. The label value is not important, only its presence. The label test-network-function.com/skip_multus_connectivity_tests excludes pods from Multus connectivity tests. Tests on default interface are still done. The label value is not important, but its presence.","title":"Network Interfaces"},{"location":"configuration/#affinityrequired","text":"For CNF workloads that require pods to use Pod or Node Affinity rules, the label AffinityRequired: true must be included on either the Deployment, StatefulSet, or Pod YAML. This will prevent any tests for anti-affinity to fail as well as test your workloads for affinity rules that support your CNF \u2018s use-case.","title":"AffinityRequired"},{"location":"configuration/#certifiedcontainerinfo","text":"The certifiedcontainerinfo section contains information about CNFs containers that are to be checked for certification status on Red Hat catalogs.","title":"certifiedcontainerinfo"},{"location":"configuration/#operators","text":"CSVs to be tested by the operator and affiliated-certification specs are identified with the test-network-function.com/operator=target label. Any value is permitted but target is used here for consistency with the other specs.","title":"Operators"},{"location":"developers/","text":"Description \u00b6 Set Runtime Environment variables \u00b6 Specify the location of the partner repo \u00b6 For disconnected Environment \u00b6 Execute test suites \u00b6 CNF Developers \u00b6 Developers of CNFs , particularly those targeting CNF Certification with Red Hat on OpenShift , can use this suite to test the interaction of their CNF with OpenShift. If you are interested in CNF Certification please contact Red Hat . Refer to the rest of the documentation in this file to see how to install and run the tests as well as how to interpret the results. You will need an OpenShift 4.10 installation running your CNF , and at least one other machine available to host the test suite. The cnf-certification-test-partner repository has a very simple example of this you can model your setup on.","title":"Developers"},{"location":"developers/#description","text":"","title":"Description"},{"location":"developers/#set-runtime-environment-variables","text":"","title":"Set Runtime Environment variables"},{"location":"developers/#specify-the-location-of-the-partner-repo","text":"","title":"Specify the location of the partner repo"},{"location":"developers/#for-disconnected-environment","text":"","title":"For disconnected Environment"},{"location":"developers/#execute-test-suites","text":"","title":"Execute test suites"},{"location":"developers/#cnf-developers","text":"Developers of CNFs , particularly those targeting CNF Certification with Red Hat on OpenShift , can use this suite to test the interaction of their CNF with OpenShift. If you are interested in CNF Certification please contact Red Hat . Refer to the rest of the documentation in this file to see how to install and run the tests as well as how to interpret the results. You will need an OpenShift 4.10 installation running your CNF , and at least one other machine available to host the test suite. The cnf-certification-test-partner repository has a very simple example of this you can model your setup on.","title":"CNF Developers"},{"location":"exception/","text":"Exception Process \u00b6 Please refer to the CATALOG and to the specific test you are attempting to gain an exception for if you are a partner organization.","title":"Exception Process"},{"location":"exception/#exception-process","text":"Please refer to the CATALOG and to the specific test you are attempting to gain an exception for if you are a partner organization.","title":"Exception Process"},{"location":"reference/","text":"Contribution Guideline \u00b6 TODO","title":"Contribution Guideline"},{"location":"reference/#contribution-guideline","text":"TODO","title":"Contribution Guideline"},{"location":"runtime-env/","text":"Runtime environment variables \u00b6 To run the test suite, some runtime environment variables are to be set. Disable intrusive tests \u00b6 To skip intrusive tests which may disrupt cluster operations, issue the following: export TNF_NON_INTRUSIVE_ONLY = true Likewise, to enable intrusive tests, set the following: export TNF_NON_INTRUSIVE_ONLY = false Specify the location of the partner repo \u00b6 This env var is optional, but highly recommended if running the test suite from a clone of this github repo. It\u2019s not needed or used if running the tnf image. To set it, clone the partner repo and set TNF_PARTNER_SRC_DIR to point to it. export TNF_PARTNER_SRC_DIR = /home/userid/code/cnf-certification-test-partner When this variable is set, the run-cnf-suites.sh script will deploy/refresh the partner deployments/pods in the cluster before starting the test run. Disconnected environment \u00b6 In a disconnected environment, only specific versions of images are mirrored to the local repo. For those environments, the partner pod image quay.io/testnetworkfunction/cnf-test-partner and debug pod image quay.io/testnetworkfunction/debug-partner should be mirrored and TNF_PARTNER_REPO should be set to the local repo, e.g.: export TNF_PARTNER_REPO = \"registry.dfwt5g.lab:5000/testnetworkfunction\" Note that you can also specify the debug pod image to use with SUPPORT_IMAGE environment variable, default to debug-partner:latest . Execute test suites from openshift-kni/cnf-feature-deploy \u00b6 The test suites from openshift-kni/cnf-feature-deploy can be run prior to the actual CNF certification test execution and the results are incorporated in the same claim file if the following environment variable is set: export TNF_RUN_CFD_TEST = true By default, the image with release tag 4.6 is used and the ginkgo skip argument is set to performance|sriov|ptp|sctp|xt_u32|dpdk|ovn . To override the default behaviour, set these environment variables: TNF_CFD_IMAGE_TAG and TNF_CFD_SKIP . For more information on the test suites, refer to the cnf-features-deploy repository","title":"Runtime environment variables"},{"location":"runtime-env/#runtime-environment-variables","text":"To run the test suite, some runtime environment variables are to be set.","title":"Runtime environment variables"},{"location":"runtime-env/#disable-intrusive-tests","text":"To skip intrusive tests which may disrupt cluster operations, issue the following: export TNF_NON_INTRUSIVE_ONLY = true Likewise, to enable intrusive tests, set the following: export TNF_NON_INTRUSIVE_ONLY = false","title":"Disable intrusive tests"},{"location":"runtime-env/#specify-the-location-of-the-partner-repo","text":"This env var is optional, but highly recommended if running the test suite from a clone of this github repo. It\u2019s not needed or used if running the tnf image. To set it, clone the partner repo and set TNF_PARTNER_SRC_DIR to point to it. export TNF_PARTNER_SRC_DIR = /home/userid/code/cnf-certification-test-partner When this variable is set, the run-cnf-suites.sh script will deploy/refresh the partner deployments/pods in the cluster before starting the test run.","title":"Specify the location of the partner repo"},{"location":"runtime-env/#disconnected-environment","text":"In a disconnected environment, only specific versions of images are mirrored to the local repo. For those environments, the partner pod image quay.io/testnetworkfunction/cnf-test-partner and debug pod image quay.io/testnetworkfunction/debug-partner should be mirrored and TNF_PARTNER_REPO should be set to the local repo, e.g.: export TNF_PARTNER_REPO = \"registry.dfwt5g.lab:5000/testnetworkfunction\" Note that you can also specify the debug pod image to use with SUPPORT_IMAGE environment variable, default to debug-partner:latest .","title":"Disconnected environment"},{"location":"runtime-env/#execute-test-suites-from-openshift-knicnf-feature-deploy","text":"The test suites from openshift-kni/cnf-feature-deploy can be run prior to the actual CNF certification test execution and the results are incorporated in the same claim file if the following environment variable is set: export TNF_RUN_CFD_TEST = true By default, the image with release tag 4.6 is used and the ginkgo skip argument is set to performance|sriov|ptp|sctp|xt_u32|dpdk|ovn . To override the default behaviour, set these environment variables: TNF_CFD_IMAGE_TAG and TNF_CFD_SKIP . For more information on the test suites, refer to the cnf-features-deploy repository","title":"Execute test suites from openshift-kni/cnf-feature-deploy"},{"location":"test-container/","text":"Running the tests within a prebuilt container \u00b6 Pulling test image \u00b6 An image is built and is available at this repository: quay.io The image can be pulled using : ```shell script podman pull quay.io/testnetworkfunction/cnf-certification-test ### Cluster requirement * OCP cluster should allow interactive shell sessions to pods/containers to stay alive when being idle for more than a few minutes. If it is not the case, consult the maintainer of the cluster infrastructure on how it can be enabled. Also, make sure the firewalls/load balancers on the path do not timeout idle connections too quickly. * OCP cluster should provide enough resources to drain nodes and reschedule pods. If that is not the case, then ``lifecycle-pod-recreation`` test should be skipped. ### Check cluster resources Some tests suites such as platform-alteration require node access to get node configuration like hugepage. In order to get the required information, the test suite does not ssh into nodes, but instead rely on [oc debug tools ](https://docs.openshift.com/container-platform/3.7/cli_reference/basic_cli_operations.html#debug). This tool makes it easier to fetch information from nodes and also to debug running pods. In short, oc debug tool will launch a new container ending with \"-debug\" suffix, the container will be destroyed once the debug session is done. To be able to create the debug pod, the cluster should have enough resources, otherwise those tests would fail. **Note:** It's recommended to clean up disk space and make sure there's enough resources to deploy another container image in every node before starting the tests. ### Run the tests ``./run-tnf-container.sh`` script is used to launch the tests. There are several required arguments: * `-t` gives the local directory that contains tnf config files set up for the test. * `-o` gives the local directory that the test results will be available in once the container exits. This directory must exist in order for the claim file to be written. Optional arguments are: * `-l` gives the list of labels to be run. See [Ginkgo Spec Labels](https://onsi.github.io/ginkgo/#spec-labels) for more information on how to filter tests with labels. * `-i` gives a name to a custom TNF container image. Supports local images, as well as images from external registries. * `-k` gives a path to one or more kubeconfig files to be used by the container to authenticate with the cluster. Paths must be separated by a colon. * `-n` gives the network mode of the container. Defaults set to `host`, which requires selinux to be disabled. Alternatively, `bridge` mode can be used with selinux if TNF_CONTAINER_CLIENT is set to `docker` or running the test as root. See the [docker run --network parameter reference](https://docs.docker.com/engine/reference/run/#network-settings) for more information on how to configure network settings. If `-l` is not specified, the tnf will run in 'diagnostic' mode. In this mode, no test case will run: it will only get information from the cluster (PUTs, CRDs, nodes info, etc...) to save it in the claim file. This can be used to make sure the configuration was properly set and the autodiscovery found the right pods/crds... If `-k` is not specified, autodiscovery is performed. The autodiscovery first looks for paths in the `$KUBECONFIG` environment variable on the host system, and if the variable is not set or is empty, the default configuration stored in `$HOME/.kube/config` is checked. ```shell script ./run-tnf-container.sh -k ~/.kube/config -t ~/tnf/config -o ~/tnf/output -l \"networking,access-control\" See General tests for a list of available keywords. Running using docker instead of podman \u00b6 By default, run-container.sh utilizes podman . However, you can configure an alternate container virtualization client using TNF_CONTAINER_CLIENT . This is particularly useful for operating systems that do not readily support podman . In order to configure the test harness to use docker , issue the following prior to run-tnf-container.sh : ```shell script export TNF_CONTAINER_CLIENT=docker ### Building the container image locally You can build an image locally by using the command below. Use the value of `TNF_VERSION` to set a branch, a tag, or a hash of a commit that will be installed into the image. Also use `OPENSHIFT_VERSION` to point to the OCP version of the cluster in which the workloads to be tested are deployed. ```shell script podman build -t cnf-certification-test:v1.0.5 \\ --build-arg TNF_VERSION=v1.0.5 \\ --build-arg OPENSHIFT_VERSION=4.7.55 . To build an image that installs TNF from an unofficial source (e.g. a fork of the TNF repository), use the TNF_SRC_URL build argument to override the URL to a source repository. ```shell script podman build -t cnf-certification-test:v1.0.5 \\ \u2013build-arg TNF_VERSION=v1.0.5 \\ \u2013build-arg TNF_SRC_URL= https://github.com/test-network-function/cnf-certification-test \\ \u2013build-arg OPENSHIFT_VERSION=4.7.55 . To make `run-tnf-container.sh` use the newly built image, specify the custom TNF image using the `-i` parameter. ```shell script ./run-tnf-container.sh -i test-network-function:v1.0.5 -t ~/tnf/config -o ~/tnf/output -l \"networking,access-control\" Note: see General tests for a list of available keywords.","title":"Within prebuilt container"},{"location":"test-container/#running-the-tests-within-a-prebuilt-container","text":"","title":"Running the tests within a prebuilt container"},{"location":"test-container/#pulling-test-image","text":"An image is built and is available at this repository: quay.io The image can be pulled using : ```shell script podman pull quay.io/testnetworkfunction/cnf-certification-test ### Cluster requirement * OCP cluster should allow interactive shell sessions to pods/containers to stay alive when being idle for more than a few minutes. If it is not the case, consult the maintainer of the cluster infrastructure on how it can be enabled. Also, make sure the firewalls/load balancers on the path do not timeout idle connections too quickly. * OCP cluster should provide enough resources to drain nodes and reschedule pods. If that is not the case, then ``lifecycle-pod-recreation`` test should be skipped. ### Check cluster resources Some tests suites such as platform-alteration require node access to get node configuration like hugepage. In order to get the required information, the test suite does not ssh into nodes, but instead rely on [oc debug tools ](https://docs.openshift.com/container-platform/3.7/cli_reference/basic_cli_operations.html#debug). This tool makes it easier to fetch information from nodes and also to debug running pods. In short, oc debug tool will launch a new container ending with \"-debug\" suffix, the container will be destroyed once the debug session is done. To be able to create the debug pod, the cluster should have enough resources, otherwise those tests would fail. **Note:** It's recommended to clean up disk space and make sure there's enough resources to deploy another container image in every node before starting the tests. ### Run the tests ``./run-tnf-container.sh`` script is used to launch the tests. There are several required arguments: * `-t` gives the local directory that contains tnf config files set up for the test. * `-o` gives the local directory that the test results will be available in once the container exits. This directory must exist in order for the claim file to be written. Optional arguments are: * `-l` gives the list of labels to be run. See [Ginkgo Spec Labels](https://onsi.github.io/ginkgo/#spec-labels) for more information on how to filter tests with labels. * `-i` gives a name to a custom TNF container image. Supports local images, as well as images from external registries. * `-k` gives a path to one or more kubeconfig files to be used by the container to authenticate with the cluster. Paths must be separated by a colon. * `-n` gives the network mode of the container. Defaults set to `host`, which requires selinux to be disabled. Alternatively, `bridge` mode can be used with selinux if TNF_CONTAINER_CLIENT is set to `docker` or running the test as root. See the [docker run --network parameter reference](https://docs.docker.com/engine/reference/run/#network-settings) for more information on how to configure network settings. If `-l` is not specified, the tnf will run in 'diagnostic' mode. In this mode, no test case will run: it will only get information from the cluster (PUTs, CRDs, nodes info, etc...) to save it in the claim file. This can be used to make sure the configuration was properly set and the autodiscovery found the right pods/crds... If `-k` is not specified, autodiscovery is performed. The autodiscovery first looks for paths in the `$KUBECONFIG` environment variable on the host system, and if the variable is not set or is empty, the default configuration stored in `$HOME/.kube/config` is checked. ```shell script ./run-tnf-container.sh -k ~/.kube/config -t ~/tnf/config -o ~/tnf/output -l \"networking,access-control\" See General tests for a list of available keywords.","title":"Pulling test image"},{"location":"test-container/#running-using-docker-instead-of-podman","text":"By default, run-container.sh utilizes podman . However, you can configure an alternate container virtualization client using TNF_CONTAINER_CLIENT . This is particularly useful for operating systems that do not readily support podman . In order to configure the test harness to use docker , issue the following prior to run-tnf-container.sh : ```shell script export TNF_CONTAINER_CLIENT=docker ### Building the container image locally You can build an image locally by using the command below. Use the value of `TNF_VERSION` to set a branch, a tag, or a hash of a commit that will be installed into the image. Also use `OPENSHIFT_VERSION` to point to the OCP version of the cluster in which the workloads to be tested are deployed. ```shell script podman build -t cnf-certification-test:v1.0.5 \\ --build-arg TNF_VERSION=v1.0.5 \\ --build-arg OPENSHIFT_VERSION=4.7.55 . To build an image that installs TNF from an unofficial source (e.g. a fork of the TNF repository), use the TNF_SRC_URL build argument to override the URL to a source repository. ```shell script podman build -t cnf-certification-test:v1.0.5 \\ \u2013build-arg TNF_VERSION=v1.0.5 \\ \u2013build-arg TNF_SRC_URL= https://github.com/test-network-function/cnf-certification-test \\ \u2013build-arg OPENSHIFT_VERSION=4.7.55 . To make `run-tnf-container.sh` use the newly built image, specify the custom TNF image using the `-i` parameter. ```shell script ./run-tnf-container.sh -i test-network-function:v1.0.5 -t ~/tnf/config -o ~/tnf/output -l \"networking,access-control\" Note: see General tests for a list of available keywords.","title":"Running using docker instead of podman"},{"location":"test-output/","text":"Test Output \u00b6 Claim File \u00b6 The test suite generates a \u201cclaim\u201d file, which describes the system(s) under test, the tests that were run, and the outcome of all of the tests. This claim file is the proof of the test run that is evaluated by Red Hat when \u201ccertified\u201d status is being considered. For more information about the contents of the claim file please see the schema . You can read more about the purpose of the claim file and CNF Certification in the Guide . Adding Test Results for the CNF Validation Test Suite to a Claim File \u00b6 e.g. Adding a cnf platform test results to your existing claim file. You can use the claim cli tool to append other related test suite results to your existing claim.json file. The output of the tool will be an updated claim file. go run cmd/tools/cmd/main.go claim-add --claimfile=claim.json --reportdir=/home/$USER/reports Args: --claimfile is an existing claim.json file --repordir :path to test results that you want to include. The tests result files from the given report dir will be appended under the result section of the claim file using file name as the key/value pair. The tool will ignore the test result, if the key name is already present under result section of the claim file. \"results\": { \"cnf-certification-tests_junit\": { \"testsuite\": { \"-errors\": \"0\", \"-failures\": \"2\", \"-name\": \"CNF Certification Test Suite\", \"-tests\": \"14\", Command Line Output \u00b6 When run the CNF test suite will output a report to the terminal that is primarily useful for Developers to evaluate and address problems. This output is similar to many testing tools. Test successful output example \u00b6 Here\u2019s an example of a Test pass. It verifies that the CNF is using a replica set: ------------------------------ lifecycle when Testing owners of CNF pod Should be only ReplicaSet /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/lifecycle/suite.go:339 2021 /07/27 11 :41:25 Sent: \"oc -n tnf get pods test-697ff58f87-d55zx -o custom-columns=OWNERKIND:.metadata.ownerReferences\\\\[\\\\*\\\\].kind && echo END_OF_TEST_SENTINEL\\n\" 2021 /07/27 11 :41:26 Match for RE: \"(?s)OWNERKIND\\n.+((.|\\n)*END_OF_TEST_SENTINEL\\n)\" found: [ \"OWNERKIND\\nReplicaSet\\nEND_OF_TEST_SENTINEL\\n\" \"END_OF_TEST_SENTINEL\\n\" \"\" ] Buffer: \"OWNERKIND\\nReplicaSet\\nEND_OF_TEST_SENTINEL\\n\" \u2022 Test failed output examples \u00b6 The following is the output from a Test failure. In this case, the test is checking that a CSV (ClusterServiceVersion) is installed correctly, but does not find it (the operator was not present on the cluster under test): ------------------------------ operator Runs test on operators when under test is: my-etcd/etcdoperator.v0.9.4 tests for : CSV_INSTALLED /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:122 2020 /12/15 15 :28:19 Sent: \"oc get csv etcdoperator.v0.9.4 -n my-etcd -o json | jq -r '.status.phase'\\n\" \u2022 Failure [ 10 .002 seconds ] operator /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:58 Runs test on operators /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:71 when under test is: my-etcd/etcdoperator.v0.9.4 /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:121 tests for : CSV_INSTALLED [ It ] /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:122 Expected <int>: 0 to equal <int>: 1 The following is the output from a Test failure. In this case, the test is checking that a Subscription is installed correctly, but does not find it (the operator was not present on the cluster under test): ------------------------------ operator Runs test on operators when under test is: my-etcd/etcd tests for : SUBSCRIPTION_INSTALLED /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:129 2021 /04/09 12 :37:10 Sent: \"oc get subscription etcd -n my-etcd -ojson | jq -r '.spec.name'\\n\" \u2022 Failure [ 10 .000 seconds ] operator /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:55 Runs test on operators /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:68 when under test is: default/etcdoperator.v0.9.4 /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:128 tests for : SUBSCRIPTION_INSTALLED [ It ] /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:129 Expected <int>: 0 to equal <int>: 1 The following is the output from a Test failure. In this case, the test is checking clusterPermissions for specific CSV, but does not find it (the operator was not present on the cluster under test): ------------------------------ operator Runs test on operators should eventually be verified as certified ( operator redhat-marketplace/etcd-operator ) /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:146 \u2022 Failure [ 30 .002 seconds ] operator /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:76 Runs test on operators /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:89 should eventually be verified as certified ( operator redhat-marketplace/etcd-operator ) [ It ] /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:146 Timed out after 30 .001s. Expected <bool>: false to be true /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:152 Log level \u00b6 The optional TNF_LOG_LEVEL environment variable sets the log level. Defaults to \u201cinfo\u201d if not set. Valid values are: trace, debug, info, warn, error, fatal, panic.","title":"Test Output"},{"location":"test-output/#test-output","text":"","title":"Test Output"},{"location":"test-output/#claim-file","text":"The test suite generates a \u201cclaim\u201d file, which describes the system(s) under test, the tests that were run, and the outcome of all of the tests. This claim file is the proof of the test run that is evaluated by Red Hat when \u201ccertified\u201d status is being considered. For more information about the contents of the claim file please see the schema . You can read more about the purpose of the claim file and CNF Certification in the Guide .","title":"Claim File"},{"location":"test-output/#adding-test-results-for-the-cnf-validation-test-suite-to-a-claim-file","text":"e.g. Adding a cnf platform test results to your existing claim file. You can use the claim cli tool to append other related test suite results to your existing claim.json file. The output of the tool will be an updated claim file. go run cmd/tools/cmd/main.go claim-add --claimfile=claim.json --reportdir=/home/$USER/reports Args: --claimfile is an existing claim.json file --repordir :path to test results that you want to include. The tests result files from the given report dir will be appended under the result section of the claim file using file name as the key/value pair. The tool will ignore the test result, if the key name is already present under result section of the claim file. \"results\": { \"cnf-certification-tests_junit\": { \"testsuite\": { \"-errors\": \"0\", \"-failures\": \"2\", \"-name\": \"CNF Certification Test Suite\", \"-tests\": \"14\",","title":"Adding Test Results for the CNF Validation Test Suite to a Claim File"},{"location":"test-output/#command-line-output","text":"When run the CNF test suite will output a report to the terminal that is primarily useful for Developers to evaluate and address problems. This output is similar to many testing tools.","title":"Command Line Output"},{"location":"test-output/#test-successful-output-example","text":"Here\u2019s an example of a Test pass. It verifies that the CNF is using a replica set: ------------------------------ lifecycle when Testing owners of CNF pod Should be only ReplicaSet /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/lifecycle/suite.go:339 2021 /07/27 11 :41:25 Sent: \"oc -n tnf get pods test-697ff58f87-d55zx -o custom-columns=OWNERKIND:.metadata.ownerReferences\\\\[\\\\*\\\\].kind && echo END_OF_TEST_SENTINEL\\n\" 2021 /07/27 11 :41:26 Match for RE: \"(?s)OWNERKIND\\n.+((.|\\n)*END_OF_TEST_SENTINEL\\n)\" found: [ \"OWNERKIND\\nReplicaSet\\nEND_OF_TEST_SENTINEL\\n\" \"END_OF_TEST_SENTINEL\\n\" \"\" ] Buffer: \"OWNERKIND\\nReplicaSet\\nEND_OF_TEST_SENTINEL\\n\" \u2022","title":"Test successful output example"},{"location":"test-output/#test-failed-output-examples","text":"The following is the output from a Test failure. In this case, the test is checking that a CSV (ClusterServiceVersion) is installed correctly, but does not find it (the operator was not present on the cluster under test): ------------------------------ operator Runs test on operators when under test is: my-etcd/etcdoperator.v0.9.4 tests for : CSV_INSTALLED /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:122 2020 /12/15 15 :28:19 Sent: \"oc get csv etcdoperator.v0.9.4 -n my-etcd -o json | jq -r '.status.phase'\\n\" \u2022 Failure [ 10 .002 seconds ] operator /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:58 Runs test on operators /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:71 when under test is: my-etcd/etcdoperator.v0.9.4 /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:121 tests for : CSV_INSTALLED [ It ] /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:122 Expected <int>: 0 to equal <int>: 1 The following is the output from a Test failure. In this case, the test is checking that a Subscription is installed correctly, but does not find it (the operator was not present on the cluster under test): ------------------------------ operator Runs test on operators when under test is: my-etcd/etcd tests for : SUBSCRIPTION_INSTALLED /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:129 2021 /04/09 12 :37:10 Sent: \"oc get subscription etcd -n my-etcd -ojson | jq -r '.spec.name'\\n\" \u2022 Failure [ 10 .000 seconds ] operator /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:55 Runs test on operators /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:68 when under test is: default/etcdoperator.v0.9.4 /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:128 tests for : SUBSCRIPTION_INSTALLED [ It ] /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:129 Expected <int>: 0 to equal <int>: 1 The following is the output from a Test failure. In this case, the test is checking clusterPermissions for specific CSV, but does not find it (the operator was not present on the cluster under test): ------------------------------ operator Runs test on operators should eventually be verified as certified ( operator redhat-marketplace/etcd-operator ) /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:146 \u2022 Failure [ 30 .002 seconds ] operator /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:76 Runs test on operators /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:89 should eventually be verified as certified ( operator redhat-marketplace/etcd-operator ) [ It ] /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:146 Timed out after 30 .001s. Expected <bool>: false to be true /Users/ $USER /cnf-cert/test-network-function/cnf-certification-test/operator/suite.go:152","title":"Test failed output examples"},{"location":"test-output/#log-level","text":"The optional TNF_LOG_LEVEL environment variable sets the log level. Defaults to \u201cinfo\u201d if not set. Valid values are: trace, debug, info, warn, error, fatal, panic.","title":"Log level"},{"location":"test-spec/","text":"Test Specifications \u00b6 Available Test Specs \u00b6 There are two categories for CNF tests; \u2018General\u2019 and \u2018 CNF -specific\u2019 (TODO). The \u2018General\u2019 tests are designed to test any commodity CNF running on OpenShift, and include specifications such as \u2018Default\u2019 network connectivity. \u2018 CNF -specific\u2019 tests are designed to test some unique aspects of the CNF under test are behaving correctly. This could include specifications such as issuing a GET request to a web server, or passing traffic through an IPSEC tunnel. \u2018 CNF -specific\u2019 test are yet to be defined. General tests \u00b6 Test in the \u201cgeneral\u201d category belong to multiple suites that can be run in any combination as is appropriate for the CNF (s) under test. Test suites group tests by topic area: Suite Test Spec Description Minimum OpenShift Version access-control The access-control test suite is used to test service account, namespace and cluster/pod role binding for the pods under test. It also tests the pods/containers configuration. 4.6.0 affiliated-certification The affiliated-certification test suite verifies that the containers and operators discovered or listed in the configuration file are certified by Redhat 4.6.0 lifecycle The lifecycle test suite verifies the pods deployment, creation, shutdown and survivability. 4.6.0 networking The networking test suite contains tests that check connectivity and networking config related best practices. 4.6.0 operator The operator test suite is designed to test basic Kubernetes Operator functionality. 4.6.0 platform-alteration verifies that key platform configuration is not modified by the CNF under test 4.6.0 observability the observability test suite contains tests that check CNF logging is following best practices and that CRDs have status fields 4.6.0 Please consult CATALOG.md for a detailed description of tests in each suite. CNF -specific tests \u00b6 TODO","title":"Available Test Specs"},{"location":"test-spec/#test-specifications","text":"","title":"Test Specifications"},{"location":"test-spec/#available-test-specs","text":"There are two categories for CNF tests; \u2018General\u2019 and \u2018 CNF -specific\u2019 (TODO). The \u2018General\u2019 tests are designed to test any commodity CNF running on OpenShift, and include specifications such as \u2018Default\u2019 network connectivity. \u2018 CNF -specific\u2019 tests are designed to test some unique aspects of the CNF under test are behaving correctly. This could include specifications such as issuing a GET request to a web server, or passing traffic through an IPSEC tunnel. \u2018 CNF -specific\u2019 test are yet to be defined.","title":"Available Test Specs"},{"location":"test-spec/#general-tests","text":"Test in the \u201cgeneral\u201d category belong to multiple suites that can be run in any combination as is appropriate for the CNF (s) under test. Test suites group tests by topic area: Suite Test Spec Description Minimum OpenShift Version access-control The access-control test suite is used to test service account, namespace and cluster/pod role binding for the pods under test. It also tests the pods/containers configuration. 4.6.0 affiliated-certification The affiliated-certification test suite verifies that the containers and operators discovered or listed in the configuration file are certified by Redhat 4.6.0 lifecycle The lifecycle test suite verifies the pods deployment, creation, shutdown and survivability. 4.6.0 networking The networking test suite contains tests that check connectivity and networking config related best practices. 4.6.0 operator The operator test suite is designed to test basic Kubernetes Operator functionality. 4.6.0 platform-alteration verifies that key platform configuration is not modified by the CNF under test 4.6.0 observability the observability test suite contains tests that check CNF logging is following best practices and that CRDs have status fields 4.6.0 Please consult CATALOG.md for a detailed description of tests in each suite.","title":"General tests"},{"location":"test-spec/#cnf-specific-tests","text":"TODO","title":"CNF-specific tests"},{"location":"test-standalone/","text":"Building and running the standalone test executable \u00b6 Currently, all available tests are part of the \u201c CNF Certification Test Suite\u201d test suite, which serves as the entrypoint to run all test specs. By default, cnf-certification-test emits results to cnf-certification-test/cnf-certification-tests_junit.xml . Dependencies \u00b6 At a minimum, the following dependencies must be installed prior to running make install-tools . Dependency Minimum Version GoLang 1.18 golangci-lint 1.49.0 jq 1.6 OpenShift Client 4.7 Other binary dependencies required to run tests can be installed using the following command: ```shell script make install-tools *Note*: You must also make sure that `$GOBIN` (default `$GOPATH/bin`) is on your `$PATH`. *Note*: Efforts to containerize this offering are considered a work in progress. ### Pulling The Code In order to pull the code, issue the following command: ```shell script mkdir ~/workspace cd ~/workspace git clone git@github.com:test-network-function/cnf-certification-test.git cd cnf-certification-test Building the Tests \u00b6 In order to build the test executable, first make sure you have satisfied the dependencies . ```shell script make build-cnf-tests *Gotcha:* The `make build*` commands run unit tests where appropriate. They do NOT test the CNF. ### Testing a CNF Once the executable is built, a CNF can be tested by specifying which suites to run using the `run-cnf-suites.sh` helper script. Run any combination of the suites keywords listed at in the [General tests](#general-tests) section, e.g. ```shell script ./run-cnf-suites.sh -l \"lifecycle\" ./run-cnf-suites.sh -l \"networking,lifecycle\" ./run-cnf-suites.sh -l \"operator,networking\" ./run-cnf-suites.sh -l \"networking,platform-alteration\" ./run-cnf-suites.sh -l \"networking,lifecycle,affiliated-certification,operator\" As with \u201crun-tnf-container.sh\u201d, if -l is not specified here, the tnf will run in \u2018diagnostic\u2019 mode. See Run the tests section for more info. By default the claim file will be output into the same location as the test executable. The -o argument for run-cnf-suites.sh can be used to provide a new location that the output files will be saved to. For more detailed control over the outputs, see the output of cnf-certification-test.test --help . ```shell script cd cnf-certification-test && ./cnf-certification-test.test \u2013help *Gotcha:* check that OCP cluster has resources to deploy [debug image](#check-cluster-resources) #### Running a single test or a subset All tests have unique labels, which can be used to filter which tests are to be run. This is useful when debugging a single test. You can select the test to be executed when running `run-cnf-suites.sh` with the following command-line: ```shell script ./run-cnf-suites.sh -l operator-install-source Note that the test labels work the same as the suite labels, so you can select more than one test with the filtering mechanism shown before. You can find all the labels attached to the tests by running the following command: ```shell script ./run-cnf-suites.sh \u2013list You can also check the [CATALOG.md](CATALOG.md) to find all test labels. #### Labels to run in offline environments Some tests do require connectivity to Redhat servers to validate certification status. If you're running the tests in an offline environment, you can skip the tests using the `l` option as explained in [Label use](#running-a-single-test-or-a-subset) ```shell script ./run-cnf-suites.sh -l '!online'","title":"Standalone test executable"},{"location":"test-standalone/#building-and-running-the-standalone-test-executable","text":"Currently, all available tests are part of the \u201c CNF Certification Test Suite\u201d test suite, which serves as the entrypoint to run all test specs. By default, cnf-certification-test emits results to cnf-certification-test/cnf-certification-tests_junit.xml .","title":"Building and running the standalone test executable"},{"location":"test-standalone/#dependencies","text":"At a minimum, the following dependencies must be installed prior to running make install-tools . Dependency Minimum Version GoLang 1.18 golangci-lint 1.49.0 jq 1.6 OpenShift Client 4.7 Other binary dependencies required to run tests can be installed using the following command: ```shell script make install-tools *Note*: You must also make sure that `$GOBIN` (default `$GOPATH/bin`) is on your `$PATH`. *Note*: Efforts to containerize this offering are considered a work in progress. ### Pulling The Code In order to pull the code, issue the following command: ```shell script mkdir ~/workspace cd ~/workspace git clone git@github.com:test-network-function/cnf-certification-test.git cd cnf-certification-test","title":"Dependencies"},{"location":"test-standalone/#building-the-tests","text":"In order to build the test executable, first make sure you have satisfied the dependencies . ```shell script make build-cnf-tests *Gotcha:* The `make build*` commands run unit tests where appropriate. They do NOT test the CNF. ### Testing a CNF Once the executable is built, a CNF can be tested by specifying which suites to run using the `run-cnf-suites.sh` helper script. Run any combination of the suites keywords listed at in the [General tests](#general-tests) section, e.g. ```shell script ./run-cnf-suites.sh -l \"lifecycle\" ./run-cnf-suites.sh -l \"networking,lifecycle\" ./run-cnf-suites.sh -l \"operator,networking\" ./run-cnf-suites.sh -l \"networking,platform-alteration\" ./run-cnf-suites.sh -l \"networking,lifecycle,affiliated-certification,operator\" As with \u201crun-tnf-container.sh\u201d, if -l is not specified here, the tnf will run in \u2018diagnostic\u2019 mode. See Run the tests section for more info. By default the claim file will be output into the same location as the test executable. The -o argument for run-cnf-suites.sh can be used to provide a new location that the output files will be saved to. For more detailed control over the outputs, see the output of cnf-certification-test.test --help . ```shell script cd cnf-certification-test && ./cnf-certification-test.test \u2013help *Gotcha:* check that OCP cluster has resources to deploy [debug image](#check-cluster-resources) #### Running a single test or a subset All tests have unique labels, which can be used to filter which tests are to be run. This is useful when debugging a single test. You can select the test to be executed when running `run-cnf-suites.sh` with the following command-line: ```shell script ./run-cnf-suites.sh -l operator-install-source Note that the test labels work the same as the suite labels, so you can select more than one test with the filtering mechanism shown before. You can find all the labels attached to the tests by running the following command: ```shell script ./run-cnf-suites.sh \u2013list You can also check the [CATALOG.md](CATALOG.md) to find all test labels. #### Labels to run in offline environments Some tests do require connectivity to Redhat servers to validate certification status. If you're running the tests in an offline environment, you can skip the tests using the `l` option as explained in [Label use](#running-a-single-test-or-a-subset) ```shell script ./run-cnf-suites.sh -l '!online'","title":"Building the Tests"}]}